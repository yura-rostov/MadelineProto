{
    "object_availableReaction": "Animations associated with a message reaction",
    "object_availableReaction_param_inactive_type_flags.0?true": "If not set, the reaction can be added to new messages and enabled in chats.",
    "object_availableReaction_param_premium_type_flags.2?true": "Whether this reaction can only be used by Telegram Premium users",
    "object_availableReaction_param_reaction_type_string": "Reaction emoji",
    "object_availableReaction_param_title_type_string": "Reaction description",
    "object_availableReaction_param_static_icon_type_Document": "Static icon for the reaction",
    "object_availableReaction_param_appear_animation_type_Document": "The animated sticker to show when the user opens the reaction dropdown",
    "object_availableReaction_param_select_animation_type_Document": "The animated sticker to show when the user hovers over the reaction",
    "object_availableReaction_param_activate_animation_type_Document": "The animated sticker to show when the reaction is chosen and activated",
    "object_availableReaction_param_effect_animation_type_Document": "The background effect (still an animated sticker) to play under the `activate_animation`, when the reaction is chosen and activated",
    "object_availableReaction_param_around_animation_type_flags.1?Document": "The animation that plays around the button when you press an existing reaction (played together with `center_icon`).",
    "object_availableReaction_param_center_icon_type_flags.1?Document": "The animation of the emoji inside the button when you press an existing reaction (played together with `around_animation`).",
    "object_updateShortChatMessage": "Shortened constructor containing info on one new incoming text message from a chat",
    "object_updateShortChatMessage_param_out_type_flags.1?true": "Whether the message is outgoing",
    "object_updateShortChatMessage_param_mentioned_type_flags.4?true": "Whether we were mentioned in this message",
    "object_updateShortChatMessage_param_media_unread_type_flags.5?true": "Whether the message contains some **unread** mentions",
    "object_updateShortChatMessage_param_silent_type_flags.13?true": "If true, the message is a silent message, no notifications should be triggered",
    "object_updateShortChatMessage_param_id_type_int": "ID of the message",
    "object_updateShortChatMessage_param_from_id_type_long": "ID of the sender of the message",
    "object_updateShortChatMessage_param_chat_id_type_long": "ID of the chat where the message was sent",
    "object_updateShortChatMessage_param_message_type_string": "Message",
    "object_updateShortChatMessage_param_pts_type_int": "[PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortChatMessage_param_pts_count_type_int": "[PTS count](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortChatMessage_param_date_type_int": "[date](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortChatMessage_param_fwd_from_type_flags.2?MessageFwdHeader": "Info about a forwarded message",
    "object_updateShortChatMessage_param_via_bot_id_type_flags.11?long": "Info about the inline bot used to generate this message",
    "object_updateShortChatMessage_param_reply_to_type_flags.3?MessageReplyHeader": "Reply (thread) information",
    "object_updateShortChatMessage_param_entities_type_flags.7?Vector<MessageEntity>": "[Entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "object_updateShortChatMessage_param_ttl_period_type_flags.25?int": "Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
    "object_encryptedChatEmpty": "Empty constructor.",
    "object_encryptedChatEmpty_param_id_type_int": "Chat ID",
    "object_updates.channelDifferenceTooLong": "The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages):\n\n1. Delete all known messages in the chat, begin from scratch by refetching all messages manually with [messages.getHistory](..\/methods\/messages.getHistory.md). It is easy to implement, but suddenly disappearing messages look awful to the user.\n2. Save all messages loaded in the memory until application restart, but delete all messages from the database. Messages left in the memory must be lazily updated using calls to [messages.getHistory](..\/methods\/messages.getHistory.md).  \n  It will look much smoother to the user, they will need to redownload messages only after client restart.  \n  Unsynchronized messages left in memory shouldn't be saved to the database, results of [messages.getHistory](..\/methods\/messages.getHistory.md) and [messages.getMessages](..\/methods\/messages.getMessages.md) must be used to update the state of deleted and edited messages left in the memory.\n3. Save all messages loaded in the memory and stored in the database without saving that some messages form continuous ranges.  \n  Messages in the database will be excluded when paginating through or searching the local message history after application restart and will be available only through individual message queries.  \n  Every message should still be checked using [messages.getHistory](..\/methods\/messages.getHistory.md).  \n  It has more disadvantages over 2) than advantages.\n4. Save all messages with saving all data about continuous message ranges.  \n  Messages from the database may be used when paginating through or searching the local message history.  \n  The messages should still be lazily checked using [messages.getHistory](..\/methods\/messages.getHistory.md), but they are still available offline.  \n  It is the best way for gaps support, but it is pretty hard to implement correctly.\n\nIt should be also noted that some messages like live location messages shouldn't be deleted.",
    "object_updates.channelDifferenceTooLong_param_final_type_flags.0?true": "Whether there are more updates that must be fetched (always false)",
    "object_updates.channelDifferenceTooLong_param_timeout_type_flags.1?int": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
    "object_updates.channelDifferenceTooLong_param_dialog_type_Dialog": "Dialog containing the latest [PTS](https:\/\/core.telegram.org\/api\/updates) that can be used to reset the channel state",
    "object_updates.channelDifferenceTooLong_param_messages_type_Vector<Message>": "The latest messages",
    "object_updates.channelDifferenceTooLong_param_chats_type_Vector<Chat>": "Chats from messages",
    "object_updates.channelDifferenceTooLong_param_users_type_Vector<User>": "Users from messages",
    "object_peerNotifySettings": "Notification settings.",
    "object_peerNotifySettings_param_show_previews_type_flags.0?Bool": "(Ternary value) If set, indicates whether or not to display previews of messages in notifications; otherwise the default behavior should be used.",
    "object_peerNotifySettings_param_silent_type_flags.1?Bool": "(Ternary value) If set, indicates whether to mute or unmute the peer; otherwise the default behavior should be used.",
    "object_peerNotifySettings_param_mute_until_type_flags.2?int": "Mute all notifications until this date",
    "object_peerNotifySettings_param_ios_sound_type_flags.3?NotificationSound": "Notification sound for the official iOS application",
    "object_peerNotifySettings_param_android_sound_type_flags.4?NotificationSound": "Notification sound for the official android application",
    "object_peerNotifySettings_param_other_sound_type_flags.5?NotificationSound": "Notification sound for other applications",
    "object_pageBlockEmbedPost": "An embedded post",
    "object_pageBlockEmbedPost_param_url_type_string": "Web page URL",
    "object_pageBlockEmbedPost_param_webpage_id_type_long": "ID of generated webpage preview",
    "object_pageBlockEmbedPost_param_author_photo_id_type_long": "ID of the author's photo",
    "object_pageBlockEmbedPost_param_author_type_string": "Author name",
    "object_pageBlockEmbedPost_param_date_type_int": "Creation date",
    "object_pageBlockEmbedPost_param_blocks_type_Vector<PageBlock>": "Post contents",
    "object_pageBlockEmbedPost_param_caption_type_PageCaption": "Caption",
    "object_pageBlockUnsupported": "Unsupported IV element",
    "object_inputMessagesFilterPhotoVideo": "Filter for messages containing photos or videos.",
    "object_messageActionBotAllowed": "We have given the bot permission to send us direct messages.\n\nThe optional fields specify how did we authorize the bot to send us messages.",
    "object_messageActionBotAllowed_param_attach_menu_type_flags.1?true": "We have authorized the bot to send us messages by installing the bot's [attachment menu](https:\/\/core.telegram.org\/api\/bots\/attach).",
    "object_messageActionBotAllowed_param_domain_type_flags.0?string": "We have authorized the bot to send us messages by logging into a website via [Telegram Login \u00bb](https:\/\/core.telegram.org\/widgets\/login); this field contains the domain name of the website on which the user has logged in.",
    "object_messageActionBotAllowed_param_app_type_flags.2?BotApp": "We have authorized the bot to send us messages by opening the specified [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps).",
    "object_channelAdminLogEventActionChangeUsername": "Channel\/supergroup username was changed",
    "object_channelAdminLogEventActionChangeUsername_param_prev_value_type_string": "Old username",
    "object_channelAdminLogEventActionChangeUsername_param_new_value_type_string": "New username",
    "object_secureValueTypeDriverLicense": "Driver's license",
    "object_privacyKeyPhoneP2P": "Whether P2P connections in phone calls with this user are allowed",
    "object_autoDownloadSettings": "Autodownload settings",
    "object_autoDownloadSettings_param_disabled_type_flags.0?true": "Disable automatic media downloads?",
    "object_autoDownloadSettings_param_video_preload_large_type_flags.1?true": "Whether to preload the first seconds of videos larger than the specified limit",
    "object_autoDownloadSettings_param_audio_preload_next_type_flags.2?true": "Whether to preload the next audio track when you're listening to music",
    "object_autoDownloadSettings_param_phonecalls_less_data_type_flags.3?true": "Whether to enable data saving mode in phone calls",
    "object_autoDownloadSettings_param_photo_size_max_type_int": "Maximum size of photos to preload",
    "object_autoDownloadSettings_param_video_size_max_type_long": "Maximum size of videos to preload",
    "object_autoDownloadSettings_param_file_size_max_type_long": "Maximum size of other files to preload",
    "object_autoDownloadSettings_param_video_upload_maxbitrate_type_int": "Maximum suggested bitrate for **uploading** videos",
    "object_secureValueErrorSelfie": "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.",
    "object_secureValueErrorSelfie_param_type_type_SecureValueType": "One of [secureValueTypePassport](..\/constructors\/secureValueTypePassport.md), [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](..\/constructors\/secureValueTypeInternalPassport.md)",
    "object_secureValueErrorSelfie_param_file_hash_type_bytes": "File hash",
    "object_secureValueErrorSelfie_param_text_type_string": "Error message",
    "object_webPageEmpty": "No preview is available for the webpage",
    "object_webPageEmpty_param_id_type_long": "Preview ID",
    "object_keyboardButton": "Bot keyboard button",
    "object_keyboardButton_param_text_type_string": "Button text",
    "object_updateReadHistoryInbox": "Incoming messages were read",
    "object_updateReadHistoryInbox_param_folder_id_type_flags.0?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_updateReadHistoryInbox_param_peer_type_Peer": "Peer",
    "object_updateReadHistoryInbox_param_max_id_type_int": "Maximum ID of messages read",
    "object_updateReadHistoryInbox_param_still_unread_count_type_int": "Number of messages that are still unread",
    "object_updateReadHistoryInbox_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateReadHistoryInbox_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_encryptedChat": "Encrypted chat",
    "object_encryptedChat_param_id_type_int": "Chat ID",
    "object_encryptedChat_param_access_hash_type_long": "Check sum dependent on the user ID",
    "object_encryptedChat_param_date_type_int": "Date chat was created",
    "object_encryptedChat_param_admin_id_type_long": "Chat creator ID",
    "object_encryptedChat_param_participant_id_type_long": "ID of the second chat participant",
    "object_encryptedChat_param_g_a_or_b_type_bytes": "`B = g ^ b mod p`, if the currently authorized user is the chat's creator,<br>or `A = g ^ a mod p` otherwise<br>See [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange) for more info",
    "object_encryptedChat_param_key_fingerprint_type_long": "64-bit fingerprint of received key",
    "object_stickerSetMultiCovered": "Stickerset, with multiple stickers as preview",
    "object_stickerSetMultiCovered_param_set_type_StickerSet": "Stickerset",
    "object_stickerSetMultiCovered_param_covers_type_Vector<Document>": "Preview stickers",
    "object_pageBlockAudio": "Audio",
    "object_pageBlockAudio_param_audio_id_type_long": "Audio ID (to be fetched from the container [page](..\/constructors\/page.md) constructor",
    "object_pageBlockAudio_param_caption_type_PageCaption": "Audio caption",
    "object_updateDialogFilters": "Clients should update [folder](https:\/\/core.telegram.org\/api\/folders) info",
    "object_account.resetPasswordRequestedWait": "You successfully requested a password reset, please wait until the specified date before finalizing the reset.",
    "object_account.resetPasswordRequestedWait_param_until_date_type_int": "Wait until this date before finalizing the reset.",
    "object_updateTranscribedAudio": "A pending [voice message transcription \u00bb](https:\/\/core.telegram.org\/api\/transcribe) initiated with [messages.transcribeAudio](..\/methods\/messages.transcribeAudio.md) was updated.",
    "object_updateTranscribedAudio_param_pending_type_flags.0?true": "Whether this transcription is still pending and further [updateTranscribedAudio](..\/constructors\/updateTranscribedAudio.md) about it will be sent in the future.",
    "object_updateTranscribedAudio_param_peer_type_Peer": "Peer of the transcribed message",
    "object_updateTranscribedAudio_param_msg_id_type_int": "Transcribed message ID",
    "object_updateTranscribedAudio_param_transcription_id_type_long": "Transcription ID",
    "object_updateTranscribedAudio_param_text_type_string": "Transcribed text",
    "object_messageMediaWebPage": "Preview of webpage",
    "object_messageMediaWebPage_param_webpage_type_WebPage": "Webpage preview",
    "object_auth.sentCodeTypeCall": "The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input.",
    "object_auth.sentCodeTypeCall_param_length_type_int": "Length of the verification code",
    "object_chatParticipantCreator": "Represents the creator of the group",
    "object_chatParticipantCreator_param_user_id_type_long": "ID of the user that created the group",
    "object_updateBotCommands": "The [command set](https:\/\/core.telegram.org\/api\/bots\/commands) of a certain bot in a certain chat has changed.",
    "object_updateBotCommands_param_peer_type_Peer": "The affected chat",
    "object_updateBotCommands_param_bot_id_type_long": "ID of the bot that changed its command set",
    "object_updateBotCommands_param_commands_type_Vector<BotCommand>": "New bot commands",
    "object_channelParticipantsBanned": "Fetch only banned participants",
    "object_channelParticipantsBanned_param_q_type_string": "Optional filter for searching banned participants by name (otherwise empty)",
    "object_account.wallPapersNotModified": "No new [wallpapers](https:\/\/core.telegram.org\/api\/wallpapers) were found",
    "object_help.deepLinkInfoEmpty": "Deep link info empty",
    "object_updateChatUserTyping": "The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
    "object_updateChatUserTyping_param_chat_id_type_long": "Group id",
    "object_updateChatUserTyping_param_from_id_type_Peer": "Peer that started typing (can be the chat itself, in case of anonymous admins).",
    "object_updateChatUserTyping_param_action_type_SendMessageAction": "Type of action",
    "object_botInlineMessageMediaAuto": "Send whatever media is attached to the [botInlineMediaResult](..\/constructors\/botInlineMediaResult.md)",
    "object_botInlineMessageMediaAuto_param_message_type_string": "Caption",
    "object_botInlineMessageMediaAuto_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_botInlineMessageMediaAuto_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_pageBlockAuthorDate": "Author and date of creation of article",
    "object_pageBlockAuthorDate_param_author_type_RichText": "Author name",
    "object_pageBlockAuthorDate_param_published_date_type_int": "Date of publication",
    "object_account.passwordInputSettings": "Settings for setting up a new password",
    "object_account.passwordInputSettings_param_new_algo_type_flags.0?PasswordKdfAlgo": "The [SRP algorithm](https:\/\/core.telegram.org\/api\/srp) to use",
    "object_account.passwordInputSettings_param_new_password_hash_type_flags.0?bytes": "The [computed password hash](https:\/\/core.telegram.org\/api\/srp)",
    "object_account.passwordInputSettings_param_hint_type_flags.0?string": "Text hint for the password",
    "object_account.passwordInputSettings_param_email_type_flags.1?string": "Password recovery email",
    "object_account.passwordInputSettings_param_new_secure_settings_type_flags.2?SecureSecretSettings": "Telegram [passport](https:\/\/core.telegram.org\/passport) settings",
    "object_messages.sponsoredMessages": "A set of sponsored messages associated to a channel",
    "object_messages.sponsoredMessages_param_posts_between_type_flags.0?int": "If set, specifies the minimum number of messages between shown sponsored messages; otherwise, only one sponsored message must be shown after all ordinary messages.",
    "object_messages.sponsoredMessages_param_messages_type_Vector<SponsoredMessage>": "Sponsored messages",
    "object_messages.sponsoredMessages_param_chats_type_Vector<Chat>": "Chats mentioned in the sponsored messages",
    "object_messages.sponsoredMessages_param_users_type_Vector<User>": "Users mentioned in the sponsored messages",
    "object_messages.inactiveChats": "Inactive chat list",
    "object_messages.inactiveChats_param_dates_type_Vector<int>": "When was the chat last active",
    "object_messages.inactiveChats_param_chats_type_Vector<Chat>": "Chat list",
    "object_messages.inactiveChats_param_users_type_Vector<User>": "Users mentioned in the chat list",
    "object_updateChannelWebPage": "A webpage preview of a link in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) message was generated",
    "object_updateChannelWebPage_param_channel_id_type_long": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) ID",
    "object_updateChannelWebPage_param_webpage_type_WebPage": "Generated webpage preview",
    "object_updateChannelWebPage_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateChannelWebPage_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_chatlists.chatlistInvite": "Info about a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatlists.chatlistInvite_param_title_type_string": "Name of the link",
    "object_chatlists.chatlistInvite_param_emoticon_type_flags.0?string": "Emoji to use as icon for the folder.",
    "object_chatlists.chatlistInvite_param_peers_type_Vector<Peer>": "Supergroups and channels to join",
    "object_chatlists.chatlistInvite_param_chats_type_Vector<Chat>": "Related chat information",
    "object_chatlists.chatlistInvite_param_users_type_Vector<User>": "Related user information",
    "object_chatEmpty": "Empty constructor, group doesn't exist",
    "object_chatEmpty_param_id_type_long": "Group identifier",
    "object_wallPaper": "Represents a [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) based on an image.",
    "object_wallPaper_param_id_type_long": "Identifier",
    "object_wallPaper_param_creator_type_flags.0?true": "Whether we created this wallpaper",
    "object_wallPaper_param_default_type_flags.1?true": "Whether this is the default wallpaper",
    "object_wallPaper_param_pattern_type_flags.3?true": "Whether this is a [pattern wallpaper \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#pattern-wallpapers)",
    "object_wallPaper_param_dark_type_flags.4?true": "Whether this wallpaper should be used in dark mode.",
    "object_wallPaper_param_access_hash_type_long": "Access hash",
    "object_wallPaper_param_slug_type_string": "Unique wallpaper ID, used when generating [wallpaper links](https:\/\/core.telegram.org\/api\/links#wallpaper-links) or [importing wallpaper links](https:\/\/core.telegram.org\/api\/wallpapers).",
    "object_wallPaper_param_document_type_Document": "The actual wallpaper",
    "object_wallPaper_param_settings_type_flags.2?WallPaperSettings": "Info on how to generate the wallpaper, according to [these instructions \u00bb](https:\/\/core.telegram.org\/api\/wallpapers).",
    "object_bankCardOpenUrl": "Credit card info URL provided by the bank",
    "object_bankCardOpenUrl_param_url_type_string": "Info URL",
    "object_bankCardOpenUrl_param_name_type_string": "Bank name",
    "object_phone.joinAsPeers": "A list of peers that can be used to join a group call, presenting yourself as a specific user\/channel.",
    "object_phone.joinAsPeers_param_peers_type_Vector<Peer>": "Peers",
    "object_phone.joinAsPeers_param_chats_type_Vector<Chat>": "Chats mentioned in the peers vector",
    "object_phone.joinAsPeers_param_users_type_Vector<User>": "Users mentioned in the peers vector",
    "object_updates.differenceEmpty": "No events.",
    "object_updates.differenceEmpty_param_date_type_int": "Current date",
    "object_updates.differenceEmpty_param_seq_type_int": "Number of sent updates",
    "object_channelAdminLogEventActionDefaultBannedRights": "The default banned rights were modified",
    "object_channelAdminLogEventActionDefaultBannedRights_param_prev_banned_rights_type_ChatBannedRights": "Previous global [banned rights](https:\/\/core.telegram.org\/api\/rights)",
    "object_channelAdminLogEventActionDefaultBannedRights_param_new_banned_rights_type_ChatBannedRights": "New global [banned rights](https:\/\/core.telegram.org\/api\/rights).",
    "object_peerSelfLocated": "Current peer",
    "object_peerSelfLocated_param_expires_type_int": "Expiry of geolocation info for current peer",
    "object_messages.exportedChatInvites": "Info about chat invites exported by a certain admin.",
    "object_messages.exportedChatInvites_param_count_type_int": "Number of invites exported by the admin",
    "object_messages.exportedChatInvites_param_invites_type_Vector<ExportedChatInvite>": "Exported invites",
    "object_messages.exportedChatInvites_param_users_type_Vector<User>": "Info about the admin",
    "object_upload.file": "File content.",
    "object_upload.file_param_type_type_storage.FileType": "File type",
    "object_upload.file_param_mtime_type_int": "Modification time",
    "object_upload.file_param_bytes_type_bytes": "Binary data, file content",
    "object_help.countriesList": "Name, ISO code, localized name and phone codes\/patterns of all available countries",
    "object_help.countriesList_param_countries_type_Vector<help.Country>": "Name, ISO code, localized name and phone codes\/patterns of all available countries",
    "object_help.countriesList_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_photoStrippedSize": "A low-resolution compressed JPG payload",
    "object_photoStrippedSize_param_type_type_string": "Thumbnail type",
    "object_photoStrippedSize_param_bytes_type_bytes": "Thumbnail data, see [here for more info on decompression \u00bb](https:\/\/core.telegram.org\/api\/files#stripped-thumbnails)",
    "object_updateUser": "User information was updated, it must be refetched using [users.getFullUser](..\/methods\/users.getFullUser.md).",
    "object_updateUser_param_user_id_type_long": "User ID",
    "object_messagePeerReaction": "How a certain peer reacted to the message",
    "object_messagePeerReaction_param_big_type_flags.0?true": "Whether the specified [message reaction \u00bb](https:\/\/core.telegram.org\/api\/reactions) should elicit a bigger and longer reaction",
    "object_messagePeerReaction_param_unread_type_flags.1?true": "Whether the reaction wasn't yet marked as read by the current user",
    "object_messagePeerReaction_param_my_type_flags.2?true": "Starting from layer 159, [messages.sendReaction](..\/methods\/messages.sendReaction.md) will send reactions from the peer (user or channel) specified using [messages.saveDefaultSendAs](..\/methods\/messages.saveDefaultSendAs.md). <br>If set, this flag indicates that this reaction was sent by us, even if the `peer` doesn't point to the current account.",
    "object_messagePeerReaction_param_peer_id_type_Peer": "Peer that reacted to the message",
    "object_messagePeerReaction_param_date_type_int": "When was this reaction added",
    "object_messagePeerReaction_param_reaction_type_Reaction": "Reaction emoji",
    "object_paymentSavedCredentialsCard": "Saved credit card",
    "object_paymentSavedCredentialsCard_param_id_type_string": "Card ID",
    "object_paymentSavedCredentialsCard_param_title_type_string": "Title",
    "object_dialogFolder": "Dialog in folder",
    "object_dialogFolder_param_pinned_type_flags.2?true": "Is this folder pinned",
    "object_dialogFolder_param_folder_type_Folder": "The folder",
    "object_dialogFolder_param_peer_type_Peer": "Peer in folder",
    "object_dialogFolder_param_top_message_type_int": "Latest message ID of dialog",
    "object_dialogFolder_param_unread_muted_peers_count_type_int": "Number of unread muted peers in folder",
    "object_dialogFolder_param_unread_unmuted_peers_count_type_int": "Number of unread unmuted peers in folder",
    "object_dialogFolder_param_unread_muted_messages_count_type_int": "Number of unread messages from muted peers in folder",
    "object_dialogFolder_param_unread_unmuted_messages_count_type_int": "Number of unread messages from unmuted peers in folder",
    "object_webViewResultUrl": "Contains the webview URL with appropriate theme and user info parameters added",
    "object_webViewResultUrl_param_query_id_type_long": "Webview session ID",
    "object_webViewResultUrl_param_url_type_string": "Webview URL to open",
    "object_messageActionRequestedPeer": "Contains info about a peer that the user shared with the bot after clicking on a [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md) button.",
    "object_messageActionRequestedPeer_param_button_id_type_int": "`button_id` contained in the [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md)",
    "object_messageActionRequestedPeer_param_peer_type_Peer": "The shared peer",
    "object_textEmail": "Rich text email link",
    "object_textEmail_param_text_type_RichText": "Link text",
    "object_textEmail_param_email_type_string": "Email address",
    "object_inputPrivacyKeyForwards": "Whether messages forwarded from you will be [anonymous](https:\/\/telegram.org\/blog\/unsend-privacy-emoji#anonymous-forwarding)",
    "object_securePlainEmail": "Email address to use in [telegram passport](https:\/\/core.telegram.org\/passport): [it must be verified, first \u00bb](https:\/\/core.telegram.org\/passport\/encryption#secureplaindata).",
    "object_securePlainEmail_param_email_type_string": "Email address",
    "object_inputPeerSelf": "Defines the current user.",
    "object_stats.broadcastStats": "[Channel statistics](https:\/\/core.telegram.org\/api\/stats).",
    "object_stats.broadcastStats_param_period_type_StatsDateRangeDays": "Period in consideration",
    "object_stats.broadcastStats_param_followers_type_StatsAbsValueAndPrev": "Follower count change for period in consideration",
    "object_stats.broadcastStats_param_views_per_post_type_StatsAbsValueAndPrev": "`total_viewcount\/postcount`, for posts posted during the period in consideration (`views_per_post`). <br>Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`).",
    "object_stats.broadcastStats_param_shares_per_post_type_StatsAbsValueAndPrev": "`total_viewcount\/postcount`, for posts posted during the period in consideration (`views_per_post`). <br>Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`)",
    "object_stats.broadcastStats_param_enabled_notifications_type_StatsPercentValue": "Percentage of subscribers with enabled notifications",
    "object_stats.broadcastStats_param_growth_graph_type_StatsGraph": "Channel growth graph (absolute subscriber count)",
    "object_stats.broadcastStats_param_followers_graph_type_StatsGraph": "Followers growth graph (relative subscriber count)",
    "object_stats.broadcastStats_param_mute_graph_type_StatsGraph": "Muted users graph (relative)",
    "object_stats.broadcastStats_param_top_hours_graph_type_StatsGraph": "Views per hour graph (absolute)",
    "object_stats.broadcastStats_param_interactions_graph_type_StatsGraph": "Interactions graph (absolute)",
    "object_stats.broadcastStats_param_iv_interactions_graph_type_StatsGraph": "IV interactions graph (absolute)",
    "object_stats.broadcastStats_param_views_by_source_graph_type_StatsGraph": "Views by source graph (absolute)",
    "object_stats.broadcastStats_param_new_followers_by_source_graph_type_StatsGraph": "New followers by source graph (absolute)",
    "object_stats.broadcastStats_param_languages_graph_type_StatsGraph": "Subscriber language graph (pie chart)",
    "object_stats.broadcastStats_param_recent_message_interactions_type_Vector<MessageInteractionCounters>": "Recent message interactions",
    "object_messageService": "Indicates a service message",
    "object_messageService_param_out_type_flags.1?true": "Whether the message is outgoing",
    "object_messageService_param_mentioned_type_flags.4?true": "Whether we were mentioned in the message",
    "object_messageService_param_media_unread_type_flags.5?true": "Whether the message contains unread media",
    "object_messageService_param_silent_type_flags.13?true": "Whether the message is silent",
    "object_messageService_param_post_type_flags.14?true": "Whether it's a channel post",
    "object_messageService_param_legacy_type_flags.19?true": "This is a legacy message: it has to be refetched with the new layer",
    "object_messageService_param_id_type_int": "Message ID",
    "object_messageService_param_from_id_type_flags.8?Peer": "ID of the sender of this message",
    "object_messageService_param_peer_id_type_Peer": "Sender of service message",
    "object_messageService_param_reply_to_type_flags.3?MessageReplyHeader": "Reply (thread) information",
    "object_messageService_param_date_type_int": "Message date",
    "object_messageService_param_action_type_MessageAction": "Event connected with the service message",
    "object_messageService_param_ttl_period_type_flags.25?int": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
    "object_userFull": "Extended user info",
    "object_userFull_param_blocked_type_flags.0?true": "Whether you have blocked this user",
    "object_userFull_param_phone_calls_available_type_flags.4?true": "Whether this user can make VoIP calls",
    "object_userFull_param_phone_calls_private_type_flags.5?true": "Whether this user's privacy settings allow you to call them",
    "object_userFull_param_can_pin_message_type_flags.7?true": "Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself",
    "object_userFull_param_has_scheduled_type_flags.12?true": "Whether [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages) are available",
    "object_userFull_param_video_calls_available_type_flags.13?true": "Whether the user can receive video calls",
    "object_userFull_param_voice_messages_forbidden_type_flags.20?true": "Whether this user doesn't allow sending voice messages in a private chat with them",
    "object_userFull_param_translations_disabled_type_flags.23?true": "Whether the [real-time chat translation popup](https:\/\/core.telegram.org\/api\/translation) should be hidden.",
    "object_userFull_param_id_type_long": "User ID",
    "object_userFull_param_about_type_flags.1?string": "Bio of the user",
    "object_userFull_param_settings_type_PeerSettings": "Peer settings",
    "object_userFull_param_personal_photo_type_flags.21?Photo": "Personal profile photo, to be shown instead of `profile_photo`.",
    "object_userFull_param_profile_photo_type_flags.2?Photo": "Profile photo",
    "object_userFull_param_fallback_photo_type_flags.22?Photo": "Fallback profile photo, displayed if no photo is present in `profile_photo` or `personal_photo`, due to privacy settings.",
    "object_userFull_param_notify_settings_type_PeerNotifySettings": "Notification settings",
    "object_userFull_param_bot_info_type_flags.3?BotInfo": "For bots, info about the bot (bot commands, etc)",
    "object_userFull_param_pinned_msg_id_type_flags.6?int": "Message ID of the last [pinned message](https:\/\/core.telegram.org\/api\/pin)",
    "object_userFull_param_common_chats_count_type_int": "Chats in common with this user",
    "object_userFull_param_folder_id_type_flags.11?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_userFull_param_ttl_period_type_flags.14?int": "Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted.",
    "object_userFull_param_theme_emoticon_type_flags.15?string": "Emoji associated with chat theme",
    "object_userFull_param_private_forward_name_type_flags.16?string": "Anonymized text to be shown instead of the user's name on forwarded messages",
    "object_userFull_param_bot_group_admin_rights_type_flags.17?ChatAdminRights": "A [suggested set of administrator rights](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a group, see [here for more info on how to handle them \u00bb](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights).",
    "object_userFull_param_bot_broadcast_admin_rights_type_flags.18?ChatAdminRights": "A [suggested set of administrator rights](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a channel, see [here for more info on how to handle them \u00bb](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights).",
    "object_userFull_param_premium_gifts_type_flags.19?Vector<PremiumGiftOption>": "Telegram Premium subscriptions gift options",
    "object_userFull_param_wallpaper_type_flags.24?WallPaper": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) to use in the private chat with the user.",
    "object_phoneCallDiscardReasonBusy": "The phone call was discarded because the user is busy in another call",
    "object_channelLocation": "Geographical location of supergroup (geogroups)",
    "object_channelLocation_param_geo_point_type_GeoPoint": "Geographical location of supergroup",
    "object_channelLocation_param_address_type_string": "Textual description of the address",
    "object_inputStickerSetEmpty": "Empty constructor",
    "object_messageEntityCode": "Message entity representing a `codeblock`.",
    "object_messageEntityCode_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityCode_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_secureValueTypePassport": "Passport",
    "object_langPackLanguage": "Identifies a localization pack",
    "object_langPackLanguage_param_official_type_flags.0?true": "Whether the language pack is official",
    "object_langPackLanguage_param_rtl_type_flags.2?true": "Is this a localization pack for an RTL language",
    "object_langPackLanguage_param_beta_type_flags.3?true": "Is this a beta localization pack?",
    "object_langPackLanguage_param_name_type_string": "Language name",
    "object_langPackLanguage_param_native_name_type_string": "Language name in the language itself",
    "object_langPackLanguage_param_lang_code_type_string": "Language code (pack identifier)",
    "object_langPackLanguage_param_base_lang_code_type_flags.1?string": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs",
    "object_langPackLanguage_param_plural_code_type_string": "A language code to be used to apply plural forms. See [https:\/\/www.unicode.org\/cldr\/charts\/latest\/supplemental\/language\\_plural\\_rules.html](https:\/\/www.unicode.org\/cldr\/charts\/latest\/supplemental\/language_plural_rules.html) for more info",
    "object_langPackLanguage_param_strings_count_type_int": "Total number of non-deleted strings from the language pack",
    "object_langPackLanguage_param_translated_count_type_int": "Total number of translated strings from the language pack",
    "object_langPackLanguage_param_translations_url_type_string": "Link to language translation interface; empty for custom local language packs",
    "object_updatePeerBlocked": "A peer was blocked",
    "object_updatePeerBlocked_param_peer_id_type_Peer": "The blocked peer",
    "object_updatePeerBlocked_param_blocked_type_Bool": "Whether the peer was blocked or unblocked",
    "object_updateServiceNotification": "A service message for the user.\n\nThe app must show the message to the user upon receiving this update. In case the **popup** parameter was passed, the text message must be displayed in a popup alert immediately upon receipt. It is recommended to handle the text as you would an ordinary message in terms of highlighting links, etc. The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).",
    "object_updateServiceNotification_param_popup_type_flags.0?true": "If set, the message must be displayed in a popup.",
    "object_updateServiceNotification_param_inbox_date_type_flags.1?int": "When was the notification received<br>The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications).",
    "object_updateServiceNotification_param_type_type_string": "String, identical in format and contents to the [**type**](https:\/\/core.telegram.org\/api\/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes).",
    "object_updateServiceNotification_param_message_type_string": "Message text",
    "object_updateServiceNotification_param_media_type_MessageMedia": "Media content (optional)",
    "object_updateServiceNotification_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_updateChannel": "A new channel is available",
    "object_updateChannel_param_channel_id_type_long": "Channel ID",
    "object_requestPeerTypeBroadcast": "Choose a channel",
    "object_requestPeerTypeBroadcast_param_creator_type_flags.0?true": "Whether to allow only choosing channels that were created by the current user.",
    "object_requestPeerTypeBroadcast_param_has_username_type_flags.3?Bool": "If specified, allows only choosing channels with or without a username, according to the value of [Bool](..\/types\/Bool.md).",
    "object_requestPeerTypeBroadcast_param_user_admin_rights_type_flags.1?ChatAdminRights": "If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights.",
    "object_requestPeerTypeBroadcast_param_bot_admin_rights_type_flags.2?ChatAdminRights": "If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights.",
    "object_textImage": "Inline image",
    "object_textImage_param_document_id_type_long": "Document ID",
    "object_textImage_param_w_type_int": "Width",
    "object_textImage_param_h_type_int": "Height",
    "object_decryptedMessageActionRequestKey": "Request rekeying, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_decryptedMessageActionRequestKey_param_exchange_id_type_long": "Exchange ID",
    "object_decryptedMessageActionRequestKey_param_g_a_type_bytes": "g\\_a, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_updateEditChannelMessage": "A message was edited in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_updateEditChannelMessage_param_message_type_Message": "The new message",
    "object_updateEditChannelMessage_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateEditChannelMessage_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_account.autoSaveSettings": "Contains media autosave settings",
    "object_account.autoSaveSettings_param_users_settings_type_AutoSaveSettings": "Default media autosave settings for private chats",
    "object_account.autoSaveSettings_param_chats_settings_type_AutoSaveSettings": "Default media autosave settings for [groups and supergroups](https:\/\/core.telegram.org\/api\/channel)",
    "object_account.autoSaveSettings_param_broadcasts_settings_type_AutoSaveSettings": "Default media autosave settings for [channels](https:\/\/core.telegram.org\/api\/channel)",
    "object_account.autoSaveSettings_param_exceptions_type_Vector<AutoSaveException>": "Peer-specific granular autosave settings",
    "object_account.autoSaveSettings_param_chats_type_Vector<Chat>": "Chats mentioned in the peer-specific granular autosave settings",
    "object_account.autoSaveSettings_param_users_type_Vector<User>": "Users mentioned in the peer-specific granular autosave settings",
    "object_secureValueErrorFile": "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.",
    "object_secureValueErrorFile_param_type_type_SecureValueType": "One of [secureValueTypeUtilityBill](..\/constructors\/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](..\/constructors\/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](..\/constructors\/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](..\/constructors\/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](..\/constructors\/secureValueTypeTemporaryRegistration.md)",
    "object_secureValueErrorFile_param_file_hash_type_bytes": "File hash",
    "object_secureValueErrorFile_param_text_type_string": "Error message",
    "object_pageListOrderedItemBlocks": "Ordered list of [IV](https:\/\/instantview.telegram.org) blocks",
    "object_pageListOrderedItemBlocks_param_num_type_string": "Number of element within ordered list",
    "object_pageListOrderedItemBlocks_param_blocks_type_Vector<PageBlock>": "Item contents",
    "object_inputMediaPhoto": "Forwarded photo",
    "object_inputMediaPhoto_param_spoiler_type_flags.1?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaPhoto_param_id_type_InputPhoto": "Photo to be forwarded",
    "object_inputMediaPhoto_param_ttl_seconds_type_flags.0?int": "Time to live in seconds of self-destructing photo",
    "object_accountDaysTTL": "Time to live in days of the current account",
    "object_accountDaysTTL_param_days_type_int": "This account will self-destruct in the specified number of days",
    "object_botInlineResult": "Generic result",
    "object_botInlineResult_param_id_type_string": "Result ID",
    "object_botInlineResult_param_type_type_string": "Result type (see [bot API docs](https:\/\/core.telegram.org\/bots\/api#inlinequeryresult))",
    "object_botInlineResult_param_title_type_flags.1?string": "Result title",
    "object_botInlineResult_param_description_type_flags.2?string": "Result description",
    "object_botInlineResult_param_url_type_flags.3?string": "URL of article or webpage",
    "object_botInlineResult_param_thumb_type_flags.4?WebDocument": "Thumbnail for the result",
    "object_botInlineResult_param_content_type_flags.5?WebDocument": "Content of the result",
    "object_botInlineResult_param_send_message_type_BotInlineMessage": "Message to send",
    "object_messageEntityPre": "Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock.",
    "object_messageEntityPre_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityPre_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityPre_param_language_type_string": "Programming language of the code",
    "object_inputEncryptedChat": "Creates an encrypted chat.",
    "object_inputEncryptedChat_param_chat_id_type_int": "Chat ID",
    "object_inputEncryptedChat_param_access_hash_type_long": "Checking sum from constructor [encryptedChat](..\/constructors\/encryptedChat.md), [encryptedChatWaiting](..\/constructors\/encryptedChatWaiting.md) or [encryptedChatRequested](..\/constructors\/encryptedChatRequested.md)",
    "object_emojiStatusEmpty": "No emoji status is set",
    "object_botInlineMessageText": "Send a simple text message",
    "object_botInlineMessageText_param_no_webpage_type_flags.0?true": "Disable webpage preview",
    "object_botInlineMessageText_param_message_type_string": "The message",
    "object_botInlineMessageText_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_botInlineMessageText_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_updateMessageReactions": "New [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions) are available",
    "object_updateMessageReactions_param_peer_type_Peer": "Peer",
    "object_updateMessageReactions_param_msg_id_type_int": "Message ID",
    "object_updateMessageReactions_param_top_msg_id_type_flags.0?int": "[Forum topic ID](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_updateMessageReactions_param_reactions_type_MessageReactions": "Reactions",
    "object_messages.foundGifs": "Found GIFs",
    "object_messages.foundGifs_param_next_offset_type_int": "Next offset to use when trying to [load more results](..\/methods\/messages.searchGifs.md)",
    "object_messages.foundGifs_param_results_type_Vector<FoundGif>": "Found GIFs",
    "object_channelAdminLogEventActionParticipantJoinByInvite": "A user joined the [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel) using a specific invite link",
    "object_channelAdminLogEventActionParticipantJoinByInvite_param_via_chatlist_type_flags.0?true": "The participant joined by importing a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_channelAdminLogEventActionParticipantJoinByInvite_param_invite_type_ExportedChatInvite": "The invite link used to join the [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_autoSaveException": "Peer-specific media autosave settings",
    "object_autoSaveException_param_peer_type_Peer": "The peer",
    "object_autoSaveException_param_settings_type_AutoSaveSettings": "Media autosave settings",
    "object_privacyValueAllowUsers": "Allow only certain users",
    "object_privacyValueAllowUsers_param_users_type_Vector<long>": "Allowed users",
    "object_inputEncryptedFileBigUploaded": "Assigns a new big encrypted file (over 10 MB in size), saved in parts using the method [upload.saveBigFilePart](..\/methods\/upload.saveBigFilePart.md).",
    "object_inputEncryptedFileBigUploaded_param_id_type_long": "Random file id, created by the client",
    "object_inputEncryptedFileBigUploaded_param_parts_type_int": "Number of saved parts",
    "object_inputEncryptedFileBigUploaded_param_key_fingerprint_type_int": "32-bit imprint of the key used to encrypt the file",
    "object_emojiListNotModified": "The list of [custom emojis](https:\/\/core.telegram.org\/api\/custom-emoji) hasn't changed.",
    "object_messages.favedStickersNotModified": "No new favorited stickers were found",
    "object_decryptedMessageMediaAudio": "Audio file attached to a secret chat message.",
    "object_decryptedMessageMediaAudio_param_duration_type_int": "Audio duration in seconds",
    "object_decryptedMessageMediaAudio_param_mime_type_type_string": "MIME-type of the audio file<br>Parameter added in Layer 13.",
    "object_decryptedMessageMediaAudio_param_size_type_int": "File size",
    "object_decryptedMessageMediaAudio_param_key_type_bytes": "Key to decrypt the attached media file",
    "object_decryptedMessageMediaAudio_param_iv_type_bytes": "Initialization vector",
    "object_messageExtendedMediaPreview": "Extended media preview",
    "object_messageExtendedMediaPreview_param_w_type_flags.0?int": "Width",
    "object_messageExtendedMediaPreview_param_h_type_flags.0?int": "Height",
    "object_messageExtendedMediaPreview_param_thumb_type_flags.1?PhotoSize": "Thumbnail",
    "object_messageExtendedMediaPreview_param_video_duration_type_flags.2?int": "Video duration",
    "object_messages.searchResultsCalendar": "Information about found messages sent on a specific day",
    "object_messages.searchResultsCalendar_param_inexact_type_flags.0?true": "If set, indicates that the results may be inexact",
    "object_messages.searchResultsCalendar_param_count_type_int": "Total number of results matching query",
    "object_messages.searchResultsCalendar_param_min_date_type_int": "Starting timestamp of attached messages",
    "object_messages.searchResultsCalendar_param_min_msg_id_type_int": "Ending timestamp of attached messages",
    "object_messages.searchResultsCalendar_param_offset_id_offset_type_flags.1?int": "Indicates the absolute position of `messages[0]` within the total result set with count `count`. <br>This is useful, for example, if we need to display a `progress\/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`.",
    "object_messages.searchResultsCalendar_param_periods_type_Vector<SearchResultsCalendarPeriod>": "Used to split the `messages` by days: multiple [SearchResultsCalendarPeriod](..\/types\/SearchResultsCalendarPeriod.md) constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.  <br>This information can be easily used to split the returned `messages` by day.",
    "object_messages.searchResultsCalendar_param_messages_type_Vector<Message>": "Messages",
    "object_messages.searchResultsCalendar_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_messages.searchResultsCalendar_param_users_type_Vector<User>": "Mentioned users",
    "object_foundGif": "Found GIF",
    "object_foundGif_param_url_type_string": "GIF URL",
    "object_foundGif_param_thumb_url_type_string": "Thumbnail URL",
    "object_foundGif_param_content_url_type_string": "Actual URL of the content to send",
    "object_foundGif_param_content_type_type_string": "Content-type of media",
    "object_foundGif_param_w_type_int": "Width of GIF",
    "object_foundGif_param_h_type_int": "Height of GIF",
    "object_account.tmpPassword": "Temporary payment password",
    "object_account.tmpPassword_param_tmp_password_type_bytes": "Temporary password",
    "object_account.tmpPassword_param_valid_until_type_int": "Validity period",
    "object_messages.stickerSet": "Stickerset and stickers inside it",
    "object_messages.stickerSet_param_set_type_StickerSet": "The stickerset",
    "object_messages.stickerSet_param_packs_type_Vector<StickerPack>": "Emoji info for stickers",
    "object_messages.stickerSet_param_keywords_type_Vector<StickerKeyword>": "Keywords for some or every sticker in the stickerset.",
    "object_messages.stickerSet_param_documents_type_Vector<Document>": "Stickers in stickerset",
    "object_stickerSetFullCovered": "Stickerset preview with all stickers of the stickerset included.  \nCurrently used only for [custom emoji stickersets](https:\/\/core.telegram.org\/api\/custom-emoji), to avoid a further call to [messages.getStickerSet](..\/methods\/messages.getStickerSet.md).",
    "object_stickerSetFullCovered_param_set_type_StickerSet": "Stickerset",
    "object_stickerSetFullCovered_param_packs_type_Vector<StickerPack>": "Emoji information about every sticker in the stickerset",
    "object_stickerSetFullCovered_param_keywords_type_Vector<StickerKeyword>": "Keywords for some or every sticker in the stickerset.",
    "object_stickerSetFullCovered_param_documents_type_Vector<Document>": "Stickers",
    "object_pageBlockFooter": "Page footer",
    "object_pageBlockFooter_param_text_type_RichText": "Contents",
    "object_replyKeyboardHide": "Hide sent bot keyboard",
    "object_replyKeyboardHide_param_selective_type_flags.2?true": "Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet",
    "object_phone.groupCall": "Contains info about a group call, and partial info about its participants.",
    "object_phone.groupCall_param_call_type_GroupCall": "Info about the group call",
    "object_phone.groupCall_param_participants_type_Vector<GroupCallParticipant>": "A partial list of participants.",
    "object_phone.groupCall_param_participants_next_offset_type_string": "Next offset to use when fetching the remaining participants using [phone.getGroupParticipants](..\/methods\/phone.getGroupParticipants.md)",
    "object_phone.groupCall_param_chats_type_Vector<Chat>": "Chats mentioned in the participants vector",
    "object_phone.groupCall_param_users_type_Vector<User>": "Users mentioned in the participants vector",
    "object_inputPeerChat": "Defines a chat for further interaction.",
    "object_inputPeerChat_param_chat_id_type_long": "Chat identifier",
    "object_textPhone": "Rich text linked to a phone number",
    "object_textPhone_param_text_type_RichText": "Text",
    "object_textPhone_param_phone_type_string": "Phone number",
    "object_account.emailVerified": "The email was verified correctly.",
    "object_account.emailVerified_param_email_type_string": "The verified email address.",
    "object_inputGameShortName": "Game by short name",
    "object_inputGameShortName_param_bot_id_type_InputUser": "The bot that provides the game",
    "object_inputGameShortName_param_short_name_type_string": "The game's short name, usually obtained from a [game link \u00bb](https:\/\/core.telegram.org\/api\/links#game-links)",
    "object_messages.botCallbackAnswer": "Callback answer sent by the bot in response to a button press",
    "object_messages.botCallbackAnswer_param_alert_type_flags.1?true": "Whether an alert should be shown to the user instead of a toast notification",
    "object_messages.botCallbackAnswer_param_has_url_type_flags.3?true": "Whether an URL is present",
    "object_messages.botCallbackAnswer_param_native_ui_type_flags.4?true": "Whether to show games in WebView or in native UI.",
    "object_messages.botCallbackAnswer_param_message_type_flags.0?string": "Alert to show",
    "object_messages.botCallbackAnswer_param_url_type_flags.2?string": "URL to open",
    "object_messages.botCallbackAnswer_param_cache_time_type_int": "For how long should this answer be cached",
    "object_emojiKeywordDeleted": "Deleted emoji keyword",
    "object_emojiKeywordDeleted_param_keyword_type_string": "Keyword",
    "object_emojiKeywordDeleted_param_emoticons_type_Vector<string>": "Emojis that were associated to keyword",
    "object_messageMediaGame": "Telegram game",
    "object_messageMediaGame_param_game_type_Game": "Game",
    "object_inputBotInlineMessageMediaContact": "A contact",
    "object_inputBotInlineMessageMediaContact_param_phone_number_type_string": "Phone number",
    "object_inputBotInlineMessageMediaContact_param_first_name_type_string": "First name",
    "object_inputBotInlineMessageMediaContact_param_last_name_type_string": "Last name",
    "object_inputBotInlineMessageMediaContact_param_vcard_type_string": "VCard info",
    "object_inputBotInlineMessageMediaContact_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_inputStickeredMediaPhoto": "A photo with stickers attached",
    "object_inputStickeredMediaPhoto_param_id_type_InputPhoto": "The photo",
    "object_pageListOrderedItemText": "Ordered list of text items",
    "object_pageListOrderedItemText_param_num_type_string": "Number of element within ordered list",
    "object_pageListOrderedItemText_param_text_type_RichText": "Text",
    "object_pageBlockMap": "A map",
    "object_pageBlockMap_param_geo_type_GeoPoint": "Location of the map center",
    "object_pageBlockMap_param_zoom_type_int": "Map zoom level; 13-20",
    "object_pageBlockMap_param_w_type_int": "Map width in pixels before applying scale; 16-102",
    "object_pageBlockMap_param_h_type_int": "Map height in pixels before applying scale; 16-1024",
    "object_pageBlockMap_param_caption_type_PageCaption": "Caption",
    "object_updatesCombined": "Constructor for a group of updates.",
    "object_updatesCombined_param_updates_type_Vector<Update>": "List of updates",
    "object_updatesCombined_param_users_type_Vector<User>": "List of users mentioned in updates",
    "object_updatesCombined_param_chats_type_Vector<Chat>": "List of chats mentioned in updates",
    "object_updatesCombined_param_date_type_int": "Current date",
    "object_updatesCombined_param_seq_start_type_int": "Value **seq** for the earliest update in a group",
    "object_updatesCombined_param_seq_type_int": "Value **seq** for the latest update in a group",
    "object_updateNewChannelMessage": "A new message was sent in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_updateNewChannelMessage_param_message_type_Message": "New message",
    "object_updateNewChannelMessage_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateNewChannelMessage_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_inputPaymentCredentialsApplePay": "Apple pay payment credentials",
    "object_inputPaymentCredentialsApplePay_param_payment_data_type_DataJSON": "Payment data",
    "object_pageBlockPullquote": "Pullquote",
    "object_pageBlockPullquote_param_text_type_RichText": "Text",
    "object_pageBlockPullquote_param_caption_type_RichText": "Caption",
    "object_messageActionChatEditPhoto": "Group profile changed",
    "object_messageActionChatEditPhoto_param_photo_type_Photo": "New group profile photo",
    "object_inputBotInlineMessageID": "Represents a sent inline message from the perspective of a bot (legacy constructor)",
    "object_inputBotInlineMessageID_param_dc_id_type_int": "DC ID to use when working with this inline message",
    "object_inputBotInlineMessageID_param_id_type_long": "ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID.",
    "object_inputBotInlineMessageID_param_access_hash_type_long": "Access hash of message",
    "object_photoSizeProgressive": "Progressively encoded photosize",
    "object_photoSizeProgressive_param_type_type_string": "[Photosize type \u00bb](https:\/\/core.telegram.org\/api\/files#image-thumbnail-types)",
    "object_photoSizeProgressive_param_w_type_int": "Photo width",
    "object_photoSizeProgressive_param_h_type_int": "Photo height",
    "object_photoSizeProgressive_param_sizes_type_Vector<int>": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image.",
    "object_botInlineMessageMediaContact": "Send a contact",
    "object_botInlineMessageMediaContact_param_phone_number_type_string": "Phone number",
    "object_botInlineMessageMediaContact_param_first_name_type_string": "First name",
    "object_botInlineMessageMediaContact_param_last_name_type_string": "Last name",
    "object_botInlineMessageMediaContact_param_vcard_type_string": "VCard info",
    "object_botInlineMessageMediaContact_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_messages.chats": "List of chats with auxiliary data.",
    "object_messages.chats_param_chats_type_Vector<Chat>": "List of chats",
    "object_chatParticipants": "Group members.",
    "object_chatParticipants_param_chat_id_type_long": "Group identifier",
    "object_chatParticipants_param_participants_type_Vector<ChatParticipant>": "List of group members",
    "object_chatParticipants_param_version_type_int": "Group version number",
    "object_channelAdminLogEventActionDiscardGroupCall": "A group call was terminated",
    "object_channelAdminLogEventActionDiscardGroupCall_param_call_type_InputGroupCall": "The group call that was terminated",
    "object_decryptedMessageMediaDocument": "Document attached to a message in a secret chat.",
    "object_decryptedMessageMediaDocument_param_thumb_type_bytes": "Thumbnail-file contents (JPEG-file, quality 55, set in a 90x90 square)",
    "object_decryptedMessageMediaDocument_param_thumb_w_type_int": "Thumbnail width",
    "object_decryptedMessageMediaDocument_param_thumb_h_type_int": "Thumbnail height",
    "object_decryptedMessageMediaDocument_param_mime_type_type_string": "File MIME-type",
    "object_decryptedMessageMediaDocument_param_size_type_long": "Document size ([int](..\/types\/int.md) on layer &lt;143, [long](..\/types\/long.md) on layer &gt;=143)",
    "object_decryptedMessageMediaDocument_param_key_type_bytes": "Key to decrypt the attached document file",
    "object_decryptedMessageMediaDocument_param_iv_type_bytes": "Initialization",
    "object_decryptedMessageMediaDocument_param_attributes_type_Vector<DocumentAttribute>": "Document attributes for media types",
    "object_decryptedMessageMediaDocument_param_caption_type_string": "Caption",
    "object_channelAdminLogEventActionParticipantJoinByRequest": "A new member was accepted to the chat by an admin",
    "object_channelAdminLogEventActionParticipantJoinByRequest_param_invite_type_ExportedChatInvite": "The invite link that was used to join the chat",
    "object_channelAdminLogEventActionParticipantJoinByRequest_param_approved_by_type_long": "ID of the admin that approved the invite",
    "object_decryptedMessageActionTyping": "User is preparing a message: typing, recording, uploading, etc.",
    "object_decryptedMessageActionTyping_param_action_type_SendMessageAction": "Type of action",
    "object_channelAdminLogEventActionParticipantInvite": "A user was invited to the group",
    "object_channelAdminLogEventActionParticipantInvite_param_participant_type_ChannelParticipant": "The user that was invited",
    "object_page": "[Instant view](https:\/\/instantview.telegram.org) page",
    "object_page_param_part_type_flags.0?true": "Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](..\/methods\/messages.getWebPagePreview.md).",
    "object_page_param_rtl_type_flags.1?true": "Whether the page contains RTL text",
    "object_page_param_v2_type_flags.2?true": "Whether this is an [IV v2](https:\/\/instantview.telegram.org\/docs#what-39s-new-in-2-0) page",
    "object_page_param_url_type_string": "Original page HTTP URL",
    "object_page_param_blocks_type_Vector<PageBlock>": "Page elements (like with HTML elements, only as TL constructors)",
    "object_page_param_photos_type_Vector<Photo>": "Photos in page",
    "object_page_param_documents_type_Vector<Document>": "Media in page",
    "object_page_param_views_type_flags.3?int": "View count",
    "object_updateChannelMessageForwards": "The forward counter of a message in a channel has changed",
    "object_updateChannelMessageForwards_param_channel_id_type_long": "Channel ID",
    "object_updateChannelMessageForwards_param_id_type_int": "ID of the message",
    "object_updateChannelMessageForwards_param_forwards_type_int": "New forward counter",
    "object_channelAdminLogEventActionExportedInviteRevoke": "A specific invite link was revoked",
    "object_channelAdminLogEventActionExportedInviteRevoke_param_invite_type_ExportedChatInvite": "The invite link that was revoked",
    "object_inputStickerSetAnimatedEmojiAnimations": "Animated emoji reaction stickerset (contains animations to play when a user clicks on a given animated emoji)",
    "object_inputMessagesFilterUrl": "Return only messages containing URLs",
    "object_privacyValueDisallowChatParticipants": "Disallow only participants of certain chats",
    "object_privacyValueDisallowChatParticipants_param_chats_type_Vector<long>": "Disallowed chats",
    "object_inputReportReasonSpam": "Report for spam",
    "object_inputMediaDice": "Send a [dice-based animated sticker](https:\/\/core.telegram.org\/api\/dice)",
    "object_inputMediaDice_param_emoticon_type_string": "The emoji, for now \ud83c\udfc0, \ud83c\udfb2 and \ud83c\udfaf are supported",
    "object_videoSizeStickerMarkup": "An [animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) based on a [sticker](https:\/\/core.telegram.org\/api\/stickers).",
    "object_videoSizeStickerMarkup_param_stickerset_type_InputStickerSet": "Stickerset",
    "object_videoSizeStickerMarkup_param_sticker_id_type_long": "Sticker ID",
    "object_videoSizeStickerMarkup_param_background_colors_type_Vector<int>": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https:\/\/core.telegram.org\/api\/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0.",
    "object_updates.channelDifferenceEmpty": "There are no new updates",
    "object_updates.channelDifferenceEmpty_param_final_type_flags.0?true": "Whether there are more updates that must be fetched (always false)",
    "object_updates.channelDifferenceEmpty_param_pts_type_int": "The latest [PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_updates.channelDifferenceEmpty_param_timeout_type_flags.1?int": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
    "object_userStatusRecently": "Online status: last seen recently",
    "object_secureValueTypePhone": "Phone",
    "object_attachMenuPeerTypeChat": "The bot attachment menu entry is available in [groups and supergroups](https:\/\/core.telegram.org\/api\/channel)",
    "object_messageEntityItalic": "Message entity representing *italic text*.",
    "object_messageEntityItalic_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityItalic_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_decryptedMessageActionResend": "Request for the other party in a Secret Chat to automatically resend a contiguous range of previously sent messages, as explained in [Sequence number is Secret Chats](https:\/\/core.telegram.org\/api\/end-to-end\/seq_no).",
    "object_decryptedMessageActionResend_param_start_seq_no_type_int": "`out_seq_no` of the first message to be resent, with correct parity",
    "object_decryptedMessageActionResend_param_end_seq_no_type_int": "`out_seq_no` of the last message to be resent, with same parity.",
    "object_inputPrivacyKeyChatInvite": "Whether people will be able to invite you to chats",
    "object_inputMediaGeoLive": "[Live geolocation](https:\/\/core.telegram.org\/api\/live-location)",
    "object_inputMediaGeoLive_param_stopped_type_flags.0?true": "Whether sending of the geolocation was stopped",
    "object_inputMediaGeoLive_param_geo_point_type_InputGeoPoint": "Current geolocation",
    "object_inputMediaGeoLive_param_heading_type_flags.2?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a direction in which the location moves, in degrees; 1-360.",
    "object_inputMediaGeoLive_param_period_type_flags.1?int": "Validity period of the current location",
    "object_inputMediaGeoLive_param_proximity_notification_radius_type_flags.3?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
    "object_emojiLanguage": "Emoji language",
    "object_emojiLanguage_param_lang_code_type_string": "Language code",
    "object_chatFull": "Full info about a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups).",
    "object_chatFull_param_can_set_username_type_flags.7?true": "Can we change the username of this chat",
    "object_chatFull_param_has_scheduled_type_flags.8?true": "Whether [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages) are available",
    "object_chatFull_param_translations_disabled_type_flags.19?true": "Whether the [real-time chat translation popup](https:\/\/core.telegram.org\/api\/translation) should be hidden.",
    "object_chatFull_param_id_type_long": "ID of the chat",
    "object_chatFull_param_about_type_string": "About string for this chat",
    "object_chatFull_param_participants_type_ChatParticipants": "Participant list",
    "object_chatFull_param_chat_photo_type_flags.2?Photo": "Chat photo",
    "object_chatFull_param_notify_settings_type_PeerNotifySettings": "Notification settings",
    "object_chatFull_param_exported_invite_type_flags.13?ExportedChatInvite": "Chat invite",
    "object_chatFull_param_bot_info_type_flags.3?Vector<BotInfo>": "Info about bots that are in this chat",
    "object_chatFull_param_pinned_msg_id_type_flags.6?int": "Message ID of the last [pinned message](https:\/\/core.telegram.org\/api\/pin)",
    "object_chatFull_param_folder_id_type_flags.11?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_chatFull_param_call_type_flags.12?InputGroupCall": "Group call information",
    "object_chatFull_param_ttl_period_type_flags.14?int": "Time-To-Live of messages sent by the current user to this chat",
    "object_chatFull_param_groupcall_default_join_as_type_flags.15?Peer": "When using [phone.getGroupCallJoinAs](..\/methods\/phone.getGroupCallJoinAs.md) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default.",
    "object_chatFull_param_theme_emoticon_type_flags.16?string": "Emoji representing a specific chat theme",
    "object_chatFull_param_requests_pending_type_flags.17?int": "Pending [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "object_chatFull_param_recent_requesters_type_flags.17?Vector<long>": "IDs of users who requested to join recently",
    "object_chatFull_param_available_reactions_type_flags.18?ChatReactions": "Allowed [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_channelAdminLogEventActionParticipantJoin": "A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)",
    "object_updateLangPack": "Language pack updated",
    "object_updateLangPack_param_difference_type_LangPackDifference": "Changed strings",
    "object_channelAdminLogEventActionToggleAntiSpam": "[Native antispam](https:\/\/core.telegram.org\/api\/antispam) functionality was enabled or disabled.",
    "object_channelAdminLogEventActionToggleAntiSpam_param_new_value_type_Bool": "Whether antispam functionality was enabled or disabled.",
    "object_config": "Current configuration",
    "object_config_param_default_p2p_contacts_type_flags.3?true": "Whether the client should use P2P by default for phone calls with contacts",
    "object_config_param_preload_featured_stickers_type_flags.4?true": "Whether the client should preload featured stickers",
    "object_config_param_revoke_pm_inbox_type_flags.6?true": "Whether incoming private messages can be deleted for both participants",
    "object_config_param_blocked_mode_type_flags.8?true": "Indicates that telegram is *probably* censored by governments\/ISPs in the current region",
    "object_config_param_force_try_ipv6_type_flags.14?true": "Whether to forcefully connect using IPv6 [dcOptions](..\/types\/DcOption.md), even if the client knows that IPv4 is available.",
    "object_config_param_date_type_int": "Current date at the server",
    "object_config_param_expires_type_int": "Expiration date of this config: when it expires it'll have to be refetched using [help.getConfig](..\/methods\/help.getConfig.md)",
    "object_config_param_test_mode_type_Bool": "Whether we're connected to the test DCs",
    "object_config_param_this_dc_type_int": "ID of the DC that returned the reply",
    "object_config_param_dc_options_type_Vector<DcOption>": "DC IP list",
    "object_config_param_dc_txt_domain_name_type_string": "Domain name for fetching encrypted DC list from DNS TXT record",
    "object_config_param_chat_size_max_type_int": "Maximum member count for normal [groups](https:\/\/core.telegram.org\/api\/channel)",
    "object_config_param_megagroup_size_max_type_int": "Maximum member count for [supergroups](https:\/\/core.telegram.org\/api\/channel)",
    "object_config_param_forwarded_count_max_type_int": "Maximum number of messages that can be forwarded at once using [messages.forwardMessages](..\/methods\/messages.forwardMessages.md).",
    "object_config_param_online_update_period_ms_type_int": "The client should [update its online status](..\/methods\/account.updateStatus.md) every N milliseconds",
    "object_config_param_offline_blur_timeout_ms_type_int": "Delay before offline status needs to be sent to the server",
    "object_config_param_offline_idle_timeout_ms_type_int": "Time without any user activity after which it should be treated offline",
    "object_config_param_online_cloud_timeout_ms_type_int": "If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds.",
    "object_config_param_notify_cloud_delay_ms_type_int": "If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds.",
    "object_config_param_notify_default_delay_ms_type_int": "If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds",
    "object_config_param_push_chat_period_ms_type_int": "Not for client use",
    "object_config_param_push_chat_limit_type_int": "Not for client use",
    "object_config_param_edit_time_limit_type_int": "Only messages with age smaller than the one specified can be edited",
    "object_config_param_revoke_time_limit_type_int": "Only channel\/supergroup messages with age smaller than the specified can be deleted",
    "object_config_param_revoke_pm_time_limit_type_int": "Only private messages with age smaller than the specified can be deleted",
    "object_config_param_rating_e_decay_type_int": "Exponential decay rate for computing [top peer rating](https:\/\/core.telegram.org\/api\/top-rating)",
    "object_config_param_stickers_recent_limit_type_int": "Maximum number of recent stickers",
    "object_config_param_channels_read_media_period_type_int": "Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read",
    "object_config_param_tmp_sessions_type_flags.0?int": "Temporary [passport](https:\/\/core.telegram.org\/passport) sessions",
    "object_config_param_call_receive_timeout_ms_type_int": "Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call",
    "object_config_param_call_ring_timeout_ms_type_int": "Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused",
    "object_config_param_call_connect_timeout_ms_type_int": "VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted",
    "object_config_param_call_packet_timeout_ms_type_int": "If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted",
    "object_config_param_me_url_prefix_type_string": "The domain to use to parse [deep links \u00bb](https:\/\/core.telegram.org\/api\/links).",
    "object_config_param_autoupdate_url_prefix_type_flags.7?string": "URL to use to auto-update the current app",
    "object_config_param_gif_search_username_type_flags.9?string": "Username of the bot to use to search for GIFs",
    "object_config_param_venue_search_username_type_flags.10?string": "Username of the bot to use to search for venues",
    "object_config_param_img_search_username_type_flags.11?string": "Username of the bot to use for image search",
    "object_config_param_static_maps_provider_type_flags.12?string": "ID of the map provider to use for venues",
    "object_config_param_caption_length_max_type_int": "Maximum length of caption (length in utf8 codepoints)",
    "object_config_param_message_length_max_type_int": "Maximum length of messages (length in utf8 codepoints)",
    "object_config_param_webfile_dc_id_type_int": "DC ID to use to download [webfiles](https:\/\/core.telegram.org\/api\/files#downloading-webfiles)",
    "object_config_param_suggested_lang_code_type_flags.2?string": "Suggested language code",
    "object_config_param_lang_pack_version_type_flags.2?int": "Language pack version",
    "object_config_param_base_lang_pack_version_type_flags.2?int": "Basic language pack version",
    "object_config_param_reactions_default_type_flags.15?Reaction": "Default [message reaction](https:\/\/core.telegram.org\/api\/reactions)",
    "object_config_param_autologin_token_type_flags.16?string": "Autologin token, [click here for more info on URL authorization \u00bb](https:\/\/core.telegram.org\/api\/url-authorization#link-url-authorization).",
    "object_inputSecureFile": "Pre-uploaded [passport](https:\/\/core.telegram.org\/passport) file, for more info [see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#inputsecurefile)",
    "object_inputSecureFile_param_id_type_long": "Secure file ID",
    "object_inputSecureFile_param_access_hash_type_long": "Secure file access hash",
    "object_documentAttributeHasStickers": "Whether the current document has stickers attached",
    "object_topPeerCategoryBotsInline": "Most used inline bots",
    "object_chatParticipant": "Group member.",
    "object_chatParticipant_param_user_id_type_long": "Member user ID",
    "object_chatParticipant_param_inviter_id_type_long": "ID of the user that added the member to the group",
    "object_chatParticipant_param_date_type_int": "Date added to the group",
    "object_attachMenuBotsBot": "Represents a [bot web app that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBotsBot_param_bot_type_AttachMenuBot": "Represents a [bot web app that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)<br>",
    "object_attachMenuBotsBot_param_users_type_Vector<User>": "Info about related users and bots",
    "object_messageActionPaymentSentMe": "A user just sent a payment to me (a bot)",
    "object_messageActionPaymentSentMe_param_recurring_init_type_flags.2?true": "Whether this is the first payment of a recurring payment we just subscribed to",
    "object_messageActionPaymentSentMe_param_recurring_used_type_flags.3?true": "Whether this payment is part of a recurring payment",
    "object_messageActionPaymentSentMe_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_messageActionPaymentSentMe_param_total_amount_type_long": "Price of the product in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_messageActionPaymentSentMe_param_payload_type_bytes": "Bot specified invoice payload",
    "object_messageActionPaymentSentMe_param_info_type_flags.0?PaymentRequestedInfo": "Order info provided by the user",
    "object_messageActionPaymentSentMe_param_shipping_option_id_type_flags.1?string": "Identifier of the shipping option chosen by the user",
    "object_messageActionPaymentSentMe_param_charge_type_PaymentCharge": "Provider payment identifier",
    "object_privacyValueDisallowUsers": "Disallow only certain users",
    "object_privacyValueDisallowUsers_param_users_type_Vector<long>": "Disallowed users",
    "object_searchResultsCalendarPeriod": "Information about found messages sent on a specific day, used to split the `messages` in [messages.searchResultsCalendar](..\/constructors\/messages.searchResultsCalendar.md) constructors by days.\n\nMultiple searchResultsCalendarPeriod constructors are returned in [messages.searchResultsCalendar](..\/constructors\/messages.searchResultsCalendar.md), each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.",
    "object_searchResultsCalendarPeriod_param_date_type_int": "The day this object is referring to.",
    "object_searchResultsCalendarPeriod_param_min_msg_id_type_int": "First message ID that was sent on this day.",
    "object_searchResultsCalendarPeriod_param_max_msg_id_type_int": "Last message ID that was sent on this day.",
    "object_searchResultsCalendarPeriod_param_count_type_int": "All messages that were sent on this day.",
    "object_cdnPublicKey": "Public key to use **only** during handshakes to [CDN](https:\/\/core.telegram.org\/cdn) DCs.",
    "object_cdnPublicKey_param_dc_id_type_int": "[CDN DC](https:\/\/core.telegram.org\/cdn) ID",
    "object_cdnPublicKey_param_public_key_type_string": "RSA public key",
    "object_chatInvitePeek": "A chat invitation that also allows peeking into the group to read messages without joining it.",
    "object_chatInvitePeek_param_chat_type_Chat": "Chat information",
    "object_chatInvitePeek_param_expires_type_int": "Read-only anonymous access to this group will be revoked at this date",
    "object_help.promoData": "MTProxy\/Public Service Announcement information",
    "object_help.promoData_param_proxy_type_flags.0?true": "MTProxy-related channel",
    "object_help.promoData_param_expires_type_int": "Expiry of PSA\/MTProxy info",
    "object_help.promoData_param_peer_type_Peer": "MTProxy\/PSA peer",
    "object_help.promoData_param_chats_type_Vector<Chat>": "Chat info",
    "object_help.promoData_param_users_type_Vector<User>": "User info",
    "object_help.promoData_param_psa_type_type_flags.1?string": "PSA type",
    "object_help.promoData_param_psa_message_type_flags.2?string": "PSA message",
    "object_inputCheckPasswordSRP": "Constructor for checking the validity of a 2FA SRP password (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "object_inputCheckPasswordSRP_param_srp_id_type_long": "[SRP ID](https:\/\/core.telegram.org\/api\/srp)",
    "object_inputCheckPasswordSRP_param_A_type_bytes": "`A` parameter (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "object_inputCheckPasswordSRP_param_M1_type_bytes": "`M1` parameter (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "object_auth.sentCodeTypeFlashCall": "The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern.",
    "object_auth.sentCodeTypeFlashCall_param_pattern_type_string": "[pattern](https:\/\/core.telegram.org\/api\/pattern) to match",
    "object_inputPeerChannelFromMessage": "Defines a [min](https:\/\/core.telegram.org\/api\/min) channel that was seen in a certain message of a certain chat.",
    "object_inputPeerChannelFromMessage_param_peer_type_InputPeer": "The chat where the channel's message was seen",
    "object_inputPeerChannelFromMessage_param_msg_id_type_int": "The message ID",
    "object_inputPeerChannelFromMessage_param_channel_id_type_long": "The identifier of the channel that was seen",
    "object_phoneCallDiscardReasonMissed": "The phone call was missed",
    "object_webDocument": "Remote document",
    "object_webDocument_param_url_type_string": "Document URL",
    "object_webDocument_param_access_hash_type_long": "Access hash",
    "object_webDocument_param_size_type_int": "File size",
    "object_webDocument_param_mime_type_type_string": "MIME type",
    "object_webDocument_param_attributes_type_Vector<DocumentAttribute>": "Attributes for media types",
    "object_messageUserReaction": "Message reaction",
    "object_messageUserReaction_param_user_id_type_int": "ID of user that reacted this way",
    "object_messageUserReaction_param_reaction_type_string": "Reaction (UTF8 emoji)",
    "object_notificationSoundNone": "No notification sound should be used",
    "object_inputReportReasonIllegalDrugs": "Report for illegal drugs",
    "object_channelAdminLogEventActionUpdatePinned": "A message was pinned",
    "object_channelAdminLogEventActionUpdatePinned_param_message_type_Message": "The message that was pinned",
    "object_channels.channelParticipantsNotModified": "No new participant info could be found",
    "object_inputMediaPhotoExternal": "New photo that will be uploaded by the server using the specified URL",
    "object_inputMediaPhotoExternal_param_spoiler_type_flags.1?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaPhotoExternal_param_url_type_string": "URL of the photo",
    "object_inputMediaPhotoExternal_param_ttl_seconds_type_flags.0?int": "Self-destruct time to live of photo",
    "object_user": "Indicates info about a certain user",
    "object_user_param_self_type_flags.10?true": "Whether this user indicates the currently logged in user",
    "object_user_param_contact_type_flags.11?true": "Whether this user is a contact",
    "object_user_param_mutual_contact_type_flags.12?true": "Whether this user is a mutual contact",
    "object_user_param_deleted_type_flags.13?true": "Whether the account of this user was deleted",
    "object_user_param_bot_type_flags.14?true": "Is this user a bot?",
    "object_user_param_bot_chat_history_type_flags.15?true": "Can the bot see all messages in groups?",
    "object_user_param_bot_nochats_type_flags.16?true": "Can the bot be added to groups?",
    "object_user_param_verified_type_flags.17?true": "Whether this user is verified",
    "object_user_param_restricted_type_flags.18?true": "Access to this user must be restricted for the reason specified in `restriction_reason`",
    "object_user_param_min_type_flags.20?true": "See [min](https:\/\/core.telegram.org\/api\/min)",
    "object_user_param_bot_inline_geo_type_flags.21?true": "Whether the bot can request our geolocation in inline mode",
    "object_user_param_support_type_flags.23?true": "Whether this is an official support user",
    "object_user_param_scam_type_flags.24?true": "This may be a scam user",
    "object_user_param_apply_min_photo_type_flags.25?true": "If set, the profile picture for this user should be refetched",
    "object_user_param_fake_type_flags.26?true": "If set, this user was reported by many users as a fake or scam user: be careful when interacting with them.",
    "object_user_param_bot_attach_menu_type_flags.27?true": "Whether this bot offers an [attachment menu web app](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_user_param_premium_type_flags.28?true": "Whether this user is a Telegram Premium user",
    "object_user_param_attach_menu_enabled_type_flags.29?true": "Whether we installed the [attachment menu web app](https:\/\/core.telegram.org\/api\/bots\/attach) offered by this bot",
    "object_user_param_flags2_type_#": "Flags, see [TL conditional fields](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields)",
    "object_user_param_bot_can_edit_type_flags2.1?true": "Whether we can edit the profile picture, name, about text and description of this bot because we own it.",
    "object_user_param_id_type_long": "ID of the user",
    "object_user_param_access_hash_type_flags.0?long": "Access hash of the user",
    "object_user_param_first_name_type_flags.1?string": "First name",
    "object_user_param_last_name_type_flags.2?string": "Last name",
    "object_user_param_username_type_flags.3?string": "Username",
    "object_user_param_phone_type_flags.4?string": "Phone number",
    "object_user_param_photo_type_flags.5?UserProfilePhoto": "Profile picture of user",
    "object_user_param_status_type_flags.6?UserStatus": "Online status of user",
    "object_user_param_bot_info_version_type_flags.14?int": "Version of the [bot\\_info field in userFull](..\/constructors\/userFull.md), incremented every time it changes",
    "object_user_param_restriction_reason_type_flags.18?Vector<RestrictionReason>": "Contains the reason why access to this user must be restricted.",
    "object_user_param_bot_inline_placeholder_type_flags.19?string": "Inline placeholder for this inline bot",
    "object_user_param_lang_code_type_flags.22?string": "Language code of the user",
    "object_user_param_emoji_status_type_flags.30?EmojiStatus": "[Emoji status](https:\/\/core.telegram.org\/api\/emoji-status)",
    "object_user_param_usernames_type_flags2.0?Vector<Username>": "Additional usernames",
    "object_auth.loginTokenMigrateTo": "Repeat the query to the specified DC",
    "object_auth.loginTokenMigrateTo_param_dc_id_type_int": "DC ID",
    "object_auth.loginTokenMigrateTo_param_token_type_bytes": "Token to use for login",
    "object_inputStorePaymentGiftPremium": "Info about a gifted Telegram Premium purchase",
    "object_inputStorePaymentGiftPremium_param_user_id_type_InputUser": "The user to which the Telegram Premium subscription was gifted",
    "object_inputStorePaymentGiftPremium_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_inputStorePaymentGiftPremium_param_amount_type_long": "Price of the product in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_inputWebFileLocation": "Location of a remote HTTP(s) file",
    "object_inputWebFileLocation_param_url_type_string": "HTTP URL of file",
    "object_inputWebFileLocation_param_access_hash_type_long": "Access hash",
    "object_updateNewEncryptedMessage": "New encrypted message.",
    "object_updateNewEncryptedMessage_param_message_type_EncryptedMessage": "Message",
    "object_updateNewEncryptedMessage_param_qts_type_int": "New **qts** value, see [updates \u00bb](https:\/\/core.telegram.org\/api\/updates) for more info.",
    "object_secureSecretSettings": "Secure settings",
    "object_secureSecretSettings_param_secure_algo_type_SecurePasswordKdfAlgo": "Secure KDF algo",
    "object_secureSecretSettings_param_secure_secret_type_bytes": "Secure secret",
    "object_secureSecretSettings_param_secure_secret_id_type_long": "Secret ID",
    "object_updateNewStickerSet": "A new stickerset was installed",
    "object_updateNewStickerSet_param_stickerset_type_messages.StickerSet": "The installed stickerset",
    "object_messages.reactions": "List of [message reactions](https:\/\/core.telegram.org\/api\/reactions)",
    "object_messages.reactions_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.reactions_param_reactions_type_Vector<Reaction>": "Reactions",
    "object_inputMessagesFilterEmpty": "Filter is absent.",
    "object_pageBlockVideo": "Video",
    "object_pageBlockVideo_param_autoplay_type_flags.0?true": "Whether the video is set to autoplay",
    "object_pageBlockVideo_param_loop_type_flags.1?true": "Whether the video is set to loop",
    "object_pageBlockVideo_param_video_id_type_long": "Video ID",
    "object_pageBlockVideo_param_caption_type_PageCaption": "Caption",
    "object_updateUserTyping": "The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing",
    "object_updateUserTyping_param_user_id_type_long": "User id",
    "object_updateUserTyping_param_action_type_SendMessageAction": "Action type",
    "object_photoCachedSize": "Description of an image and its content.",
    "object_photoCachedSize_param_type_type_string": "Thumbnail type",
    "object_photoCachedSize_param_w_type_int": "Image width",
    "object_photoCachedSize_param_h_type_int": "Image height",
    "object_photoCachedSize_param_bytes_type_bytes": "Binary data, file content",
    "object_messages.dhConfigNotModified": "Configuring parameters did not change.",
    "object_messages.dhConfigNotModified_param_random_type_bytes": "Random sequence of bytes of assigned length",
    "object_help.recentMeUrls": "Recent t.me URLs",
    "object_help.recentMeUrls_param_urls_type_Vector<RecentMeUrl>": "URLs",
    "object_help.recentMeUrls_param_chats_type_Vector<Chat>": "Chats",
    "object_help.recentMeUrls_param_users_type_Vector<User>": "Users",
    "object_messageEntityStrike": "Message entity representing <del>strikethrough<\/del> text.",
    "object_messageEntityStrike_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityStrike_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_secureRequiredType": "Required type",
    "object_secureRequiredType_param_native_names_type_flags.0?true": "Native names",
    "object_secureRequiredType_param_selfie_required_type_flags.1?true": "Is a selfie required",
    "object_secureRequiredType_param_translation_required_type_flags.2?true": "Is a translation required",
    "object_secureRequiredType_param_type_type_SecureValueType": "Secure value type",
    "object_codeSettings": "Settings used by telegram servers for sending the confirm code.\n\nExample implementations: [telegram for android](https:\/\/github.com\/DrKLO\/Telegram\/blob\/master\/TMessagesProj\/src\/main\/java\/org\/telegram\/ui\/LoginActivity.java), [tdlib](https:\/\/github.com\/tdlib\/td\/tree\/master\/td\/telegram\/SendCodeHelper.cpp).",
    "object_codeSettings_param_allow_flashcall_type_flags.0?true": "Whether to allow phone verification via [phone calls](https:\/\/core.telegram.org\/api\/auth).",
    "object_codeSettings_param_current_number_type_flags.1?true": "Pass true if the phone number is used on the current device. Ignored if allow\\_flashcall is not set.",
    "object_codeSettings_param_allow_app_hash_type_flags.4?true": "If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https:\/\/developers.google.com\/identity\/sms-retriever\/overview)",
    "object_codeSettings_param_allow_missed_call_type_flags.5?true": "Whether this device supports receiving the code using the [auth.codeTypeMissedCall](..\/constructors\/auth.codeTypeMissedCall.md) method",
    "object_codeSettings_param_allow_firebase_type_flags.7?true": "Whether Firebase auth is supported",
    "object_codeSettings_param_logout_tokens_type_flags.6?Vector<bytes>": "Previously stored future auth tokens, see [the documentation for more info \u00bb](https:\/\/core.telegram.org\/api\/auth#future-auth-tokens)",
    "object_codeSettings_param_token_type_flags.8?string": "Used only by official iOS apps for Firebase auth: device token for apple push.",
    "object_codeSettings_param_app_sandbox_type_flags.8?Bool": "Used only by official iOS apps for firebase auth: whether a sandbox-certificate will be used during transmission of the push notification.",
    "object_emailVerificationGoogle": "Google ID email verification token",
    "object_emailVerificationGoogle_param_token_type_string": "Token",
    "object_pageBlockSubheader": "Subheader",
    "object_pageBlockSubheader_param_text_type_RichText": "Subheader",
    "object_messageMediaEmpty": "Empty constructor.",
    "object_keyboardButtonSwitchInline": "Button to force a user to switch to inline mode: pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.",
    "object_keyboardButtonSwitchInline_param_same_peer_type_flags.0?true": "If set, pressing the button will insert the bot's username and the specified inline `query` in the current chat's input field.",
    "object_keyboardButtonSwitchInline_param_text_type_string": "Button label",
    "object_keyboardButtonSwitchInline_param_query_type_string": "The inline query to use",
    "object_keyboardButtonSwitchInline_param_peer_types_type_flags.1?Vector<InlineQueryPeerType>": "Filter to use when selecting chats.",
    "object_userProfilePhotoEmpty": "Profile photo has not been set, or was hidden.",
    "object_wallPaperSettings": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) rendering information.",
    "object_wallPaperSettings_param_blur_type_flags.1?true": "For [image wallpapers \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#image-wallpapers): if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12.",
    "object_wallPaperSettings_param_motion_type_flags.2?true": "If set, the background needs to be slightly moved when the device is rotated.",
    "object_wallPaperSettings_param_background_color_type_flags.0?int": "Used for [solid \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#solid-fill), [gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#gradient-fill) and [freeform gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#freeform-gradient-fill) fills.",
    "object_wallPaperSettings_param_second_background_color_type_flags.4?int": "Used for [gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#gradient-fill) and [freeform gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#freeform-gradient-fill) fills.",
    "object_wallPaperSettings_param_third_background_color_type_flags.5?int": "Used for [freeform gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#freeform-gradient-fill) fills.",
    "object_wallPaperSettings_param_fourth_background_color_type_flags.6?int": "Used for [freeform gradient \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#freeform-gradient-fill) fills.",
    "object_wallPaperSettings_param_intensity_type_flags.3?int": "Used for [pattern wallpapers \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#pattern-wallpapers).",
    "object_wallPaperSettings_param_rotation_type_flags.4?int": "Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45.",
    "object_inputReportReasonPornography": "Report for pornography",
    "object_maskCoords": "Position on a photo where a mask should be placed when [attaching stickers to media \u00bb](https:\/\/core.telegram.org\/api\/stickers#attached-stickers)\n\nThe `n` position indicates where the mask should be placed:\n\n- 0 =&gt; Relative to the forehead\n- 1 =&gt; Relative to the eyes\n- 2 =&gt; Relative to the mouth\n- 3 =&gt; Relative to the chin",
    "object_maskCoords_param_n_type_int": "Part of the face, relative to which the mask should be placed",
    "object_maskCoords_param_x_type_double": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)",
    "object_maskCoords_param_y_type_double": "Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just below the default mask position)",
    "object_maskCoords_param_zoom_type_double": "Mask scaling coefficient. (For example, 2.0 means a doubled size)",
    "object_payments.savedInfo": "Saved server-side order information",
    "object_payments.savedInfo_param_has_saved_credentials_type_flags.1?true": "Whether the user has some saved payment credentials",
    "object_payments.savedInfo_param_saved_info_type_flags.0?PaymentRequestedInfo": "Saved server-side order information",
    "object_messages.votesList": "How users voted in a poll",
    "object_messages.votesList_param_count_type_int": "Total number of votes for all options (or only for the chosen `option`, if provided to [messages.getPollVotes](..\/methods\/messages.getPollVotes.md))",
    "object_messages.votesList_param_votes_type_Vector<MessageUserVote>": "Vote info for each user",
    "object_messages.votesList_param_users_type_Vector<User>": "Info about users that voted in the poll",
    "object_messages.votesList_param_next_offset_type_flags.0?string": "Offset to use with the next [messages.getPollVotes](..\/methods\/messages.getPollVotes.md) request, empty string if no more results are available.",
    "object_channelAdminLogEventActionChangeAbout": "The description was changed",
    "object_channelAdminLogEventActionChangeAbout_param_prev_value_type_string": "Previous description",
    "object_channelAdminLogEventActionChangeAbout_param_new_value_type_string": "New description",
    "object_storage.fileWebp": "WEBP image. MIME type: `image\/webp`.",
    "object_dcOption": "Data center",
    "object_dcOption_param_ipv6_type_flags.0?true": "Whether the specified IP is an IPv6 address",
    "object_dcOption_param_media_only_type_flags.1?true": "Whether this DC should only be used to [download or upload files](https:\/\/core.telegram.org\/api\/files)",
    "object_dcOption_param_tcpo_only_type_flags.2?true": "Whether this DC only supports connection with [transport obfuscation](https:\/\/core.telegram.org\/mtproto\/mtproto-transports#transport-obfuscation)",
    "object_dcOption_param_cdn_type_flags.3?true": "Whether this is a [CDN DC](https:\/\/core.telegram.org\/cdn).",
    "object_dcOption_param_static_type_flags.4?true": "If set, this IP should be used when connecting through a proxy",
    "object_dcOption_param_this_port_only_type_flags.5?true": "If set, clients must connect using only the specified port, without trying any other port.",
    "object_dcOption_param_id_type_int": "DC ID",
    "object_dcOption_param_ip_address_type_string": "IP address of DC",
    "object_dcOption_param_port_type_int": "Port",
    "object_dcOption_param_secret_type_flags.10?bytes": "If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https:\/\/core.telegram.org\/mtproto\/mtproto-transports#transport-obfuscation)",
    "object_updateChatParticipant": "A user has joined or left a specific chat",
    "object_updateChatParticipant_param_chat_id_type_long": "[Chat](https:\/\/core.telegram.org\/api\/channel) ID",
    "object_updateChatParticipant_param_date_type_int": "When did this event occur",
    "object_updateChatParticipant_param_actor_id_type_long": "User that triggered the change (inviter, admin that kicked the user, or the even the **user\\_id** itself)",
    "object_updateChatParticipant_param_user_id_type_long": "User that was affected by the change",
    "object_updateChatParticipant_param_prev_participant_type_flags.0?ChatParticipant": "Previous participant info (empty if this participant just joined)",
    "object_updateChatParticipant_param_new_participant_type_flags.1?ChatParticipant": "New participant info (empty if this participant just left)",
    "object_updateChatParticipant_param_invite_type_flags.2?ExportedChatInvite": "The invite that was used to join the group",
    "object_updateChatParticipant_param_qts_type_int": "New **qts** value, see [updates \u00bb](https:\/\/core.telegram.org\/api\/updates) for more info.",
    "object_channelMessagesFilter": "Filter for getting only certain types of channel messages",
    "object_channelMessagesFilter_param_exclude_new_messages_type_flags.1?true": "Whether to exclude new messages from the search",
    "object_channelMessagesFilter_param_ranges_type_Vector<MessageRange>": "A range of messages to fetch",
    "object_chatInvitePublicJoinRequests": "Used in updates and in the channel log to indicate when a user is requesting to join or has joined a [discussion group](https:\/\/core.telegram.org\/api\/discussion#requiring-users-to-join-the-group)",
    "object_help.noAppUpdate": "No updates are available for the application.",
    "object_messageActionTopicEdit": "[Forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) information was edited.",
    "object_messageActionTopicEdit_param_title_type_flags.0?string": "Topic title.",
    "object_messageActionTopicEdit_param_icon_emoji_id_type_flags.1?long": "ID of the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) used as topic icon.",
    "object_messageActionTopicEdit_param_closed_type_flags.2?Bool": "Whether the topic was closed.",
    "object_messageActionTopicEdit_param_hidden_type_flags.3?Bool": "Whether the topic was hidden (only valid for the \"General\" topic, `id=1`).",
    "object_inputClientProxy": "Info about an [MTProxy](https:\/\/core.telegram.org\/mtproto\/mtproto-transports#transport-obfuscation) used to connect.",
    "object_inputClientProxy_param_address_type_string": "Proxy address",
    "object_inputClientProxy_param_port_type_int": "Proxy port",
    "object_account.autoDownloadSettings": "Media autodownload settings",
    "object_account.autoDownloadSettings_param_low_type_AutoDownloadSettings": "Low data usage preset",
    "object_account.autoDownloadSettings_param_medium_type_AutoDownloadSettings": "Medium data usage preset",
    "object_account.autoDownloadSettings_param_high_type_AutoDownloadSettings": "High data usage preset",
    "object_messageReactionsList": "List of [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_messageReactionsList_param_count_type_int": "Total number of reactions",
    "object_messageReactionsList_param_reactions_type_Vector<MessageUserReaction>": "Reactions",
    "object_messageReactionsList_param_users_type_Vector<User>": "Users that reacted like this",
    "object_messageReactionsList_param_next_offset_type_flags.0?string": "Next offset to use when fetching reactions using [messages.getMessageReactionsList](..\/methods\/messages.getMessageReactionsList.md)",
    "object_urlAuthResultDefault": "Details about an accepted authorization request, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/url-authorization)",
    "object_chatReactionsAll": "All reactions or all non-custom reactions are allowed",
    "object_chatReactionsAll_param_allow_custom_type_flags.0?true": "Whether to allow custom reactions",
    "object_inputReportReasonCopyright": "Report for copyrighted content",
    "object_updateGroupCallConnection": "New WebRTC parameters",
    "object_updateGroupCallConnection_param_presentation_type_flags.0?true": "Are these parameters related to the screen capture session currently in progress?",
    "object_updateGroupCallConnection_param_params_type_DataJSON": "WebRTC parameters",
    "object_decryptedMessageMediaContact": "Contact attached to an encrypted message.",
    "object_decryptedMessageMediaContact_param_phone_number_type_string": "Phone number",
    "object_decryptedMessageMediaContact_param_first_name_type_string": "Contact's first name",
    "object_decryptedMessageMediaContact_param_last_name_type_string": "Contact's last name",
    "object_decryptedMessageMediaContact_param_user_id_type_int": "Telegram User ID of signed-up contact",
    "object_topPeerCategoryGroups": "Often-opened groups and supergroups",
    "object_messages.translateNoResult": "No translation is available",
    "object_stickerPack": "A stickerpack is a group of stickers associated to the same emoji.  \nIt is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](..\/types\/StickerSet.md).",
    "object_stickerPack_param_emoticon_type_string": "Emoji",
    "object_stickerPack_param_documents_type_Vector<long>": "Stickers",
    "object_messages.historyImport": "ID of a specific [chat import session, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "object_messages.historyImport_param_id_type_long": "[History import ID](https:\/\/core.telegram.org\/api\/import)",
    "object_channelAdminLogEventActionParticipantUnmute": "A group call participant was unmuted",
    "object_channelAdminLogEventActionParticipantUnmute_param_participant_type_GroupCallParticipant": "The participant that was unmuted",
    "object_inputGameID": "Indicates an already sent game",
    "object_inputGameID_param_id_type_long": "game ID from [Game](..\/types\/Game.md) constructor",
    "object_inputGameID_param_access_hash_type_long": "access hash from [Game](..\/types\/Game.md) constructor",
    "object_inputGroupCall": "Points to a specific group call",
    "object_inputGroupCall_param_id_type_long": "Group call ID",
    "object_inputGroupCall_param_access_hash_type_long": "Group call access hash",
    "object_secureValueTypeUtilityBill": "Utility bill",
    "object_exportedMessageLink": "Link to a message in a supergroup\/channel",
    "object_exportedMessageLink_param_link_type_string": "URL",
    "object_exportedMessageLink_param_html_type_string": "Embed code",
    "object_autoSaveSettings": "Media autosave settings",
    "object_autoSaveSettings_param_photos_type_flags.0?true": "Whether photos should be autosaved to the gallery.",
    "object_autoSaveSettings_param_videos_type_flags.1?true": "Whether videos should be autosaved to the gallery.",
    "object_autoSaveSettings_param_video_max_size_type_flags.2?long": "If set, specifies a size limit for autosavable videos",
    "object_messages.emojiGroupsNotModified": "The list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories) hasn't changed.",
    "object_inputMessagesFilterGif": "Return only messages containing gifs",
    "object_account.wallPapers": "Installed [wallpapers](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_account.wallPapers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_account.wallPapers_param_wallpapers_type_Vector<WallPaper>": "[Wallpapers](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_messageActionSetChatWallPaper": "The [wallpaper \u00bb](https:\/\/core.telegram.org\/api\/wallpapers) of the current chat was changed.",
    "object_messageActionSetChatWallPaper_param_wallpaper_type_WallPaper": "New [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_inputMessagesFilterContacts": "Return only messages containing contacts",
    "object_chatInvite": "Chat invite info",
    "object_chatInvite_param_channel_type_flags.0?true": "Whether this is a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) or a [normal group](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatInvite_param_broadcast_type_flags.1?true": "Whether this is a [channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatInvite_param_public_type_flags.2?true": "Whether this is a public [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatInvite_param_megagroup_type_flags.3?true": "Whether this is a [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatInvite_param_request_needed_type_flags.6?true": "Whether the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) must be first approved by an administrator",
    "object_chatInvite_param_title_type_string": "Chat\/supergroup\/channel title",
    "object_chatInvite_param_about_type_flags.5?string": "Description of the group of channel",
    "object_chatInvite_param_photo_type_Photo": "Chat\/supergroup\/channel photo",
    "object_chatInvite_param_participants_count_type_int": "Participant count",
    "object_chatInvite_param_participants_type_flags.4?Vector<User>": "A few of the participants that are in the group",
    "object_botMenuButton": "[Bot menu button](https:\/\/core.telegram.org\/api\/bots\/menu) that opens a [web app](https:\/\/core.telegram.org\/api\/bots\/webapps) when clicked.",
    "object_botMenuButton_param_text_type_string": "Title to be displayed on the menu button instead of 'Menu'",
    "object_botMenuButton_param_url_type_string": "URL of a [web app](https:\/\/core.telegram.org\/api\/bots\/webapps) to open when the user clicks on the button",
    "object_inputPrivacyKeyStatusTimestamp": "Whether people will be able to see your exact last online timestamp",
    "object_dialogFilterChatlist": "A folder imported using a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_dialogFilterChatlist_param_has_my_invites_type_flags.26?true": "Whether the current user has created some [chat folder deep links \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links) to share the folder as well.",
    "object_dialogFilterChatlist_param_id_type_int": "ID of the folder",
    "object_dialogFilterChatlist_param_title_type_string": "Name of the folder",
    "object_dialogFilterChatlist_param_emoticon_type_flags.25?string": "Emoji to use as icon for the folder.",
    "object_dialogFilterChatlist_param_pinned_peers_type_Vector<InputPeer>": "Pinned chats, [folders](https:\/\/core.telegram.org\/api\/folders) can have unlimited pinned chats",
    "object_dialogFilterChatlist_param_include_peers_type_Vector<InputPeer>": "Chats to include in the folder",
    "object_botCommandScopeDefault": "The commands will be valid in all dialogs",
    "object_inputPrivacyValueDisallowContacts": "Disallow only contacts",
    "object_stats.megagroupStats": "Supergroup [statistics](https:\/\/core.telegram.org\/api\/stats)",
    "object_stats.megagroupStats_param_period_type_StatsDateRangeDays": "Period in consideration",
    "object_stats.megagroupStats_param_members_type_StatsAbsValueAndPrev": "Member count change for period in consideration",
    "object_stats.megagroupStats_param_messages_type_StatsAbsValueAndPrev": "Message number change for period in consideration",
    "object_stats.megagroupStats_param_viewers_type_StatsAbsValueAndPrev": "Number of users that viewed messages, for range in consideration",
    "object_stats.megagroupStats_param_posters_type_StatsAbsValueAndPrev": "Number of users that posted messages, for range in consideration",
    "object_stats.megagroupStats_param_growth_graph_type_StatsGraph": "Supergroup growth graph (absolute subscriber count)",
    "object_stats.megagroupStats_param_members_graph_type_StatsGraph": "Members growth (relative subscriber count)",
    "object_stats.megagroupStats_param_new_members_by_source_graph_type_StatsGraph": "New members by source graph",
    "object_stats.megagroupStats_param_languages_graph_type_StatsGraph": "Subscriber language graph (pie chart)",
    "object_stats.megagroupStats_param_messages_graph_type_StatsGraph": "Message activity graph (stacked bar graph, message type)",
    "object_stats.megagroupStats_param_actions_graph_type_StatsGraph": "Group activity graph (deleted, modified messages, blocked users)",
    "object_stats.megagroupStats_param_top_hours_graph_type_StatsGraph": "Activity per hour graph (absolute)",
    "object_stats.megagroupStats_param_weekdays_graph_type_StatsGraph": "Activity per day of week graph (absolute)",
    "object_stats.megagroupStats_param_top_posters_type_Vector<StatsGroupTopPoster>": "Info about most active group members",
    "object_stats.megagroupStats_param_top_admins_type_Vector<StatsGroupTopAdmin>": "Info about most active group admins",
    "object_stats.megagroupStats_param_top_inviters_type_Vector<StatsGroupTopInviter>": "Info about most active group inviters",
    "object_stats.megagroupStats_param_users_type_Vector<User>": "Info about users mentioned in statistics",
    "object_pageCaption": "Page caption",
    "object_pageCaption_param_text_type_RichText": "Caption",
    "object_pageCaption_param_credit_type_RichText": "Credits",
    "object_inlineBotWebView": "Specifies a [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#simple-web-apps) button, shown on top of the inline query results list.",
    "object_inlineBotWebView_param_text_type_string": "Text of the button",
    "object_inlineBotWebView_param_url_type_string": "Webapp URL",
    "object_recentMeUrlUser": "Recent t.me link to a user",
    "object_recentMeUrlUser_param_url_type_string": "URL",
    "object_recentMeUrlUser_param_user_id_type_long": "User ID",
    "object_contactStatus": "Contact status: online \/ offline.",
    "object_contactStatus_param_user_id_type_long": "User identifier",
    "object_contactStatus_param_status_type_UserStatus": "Online status",
    "object_pageBlockKicker": "Kicker",
    "object_pageBlockKicker_param_text_type_RichText": "Contents",
    "object_updateEncryption": "Change of state in an encrypted chat.",
    "object_updateEncryption_param_chat_type_EncryptedChat": "Encrypted chat",
    "object_updateEncryption_param_date_type_int": "Date of change",
    "object_messageMediaGeoLive": "Indicates a [live geolocation](https:\/\/core.telegram.org\/api\/live-location)",
    "object_messageMediaGeoLive_param_geo_type_GeoPoint": "Geolocation",
    "object_messageMediaGeoLive_param_heading_type_flags.0?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a direction in which the location moves, in degrees; 1-360",
    "object_messageMediaGeoLive_param_period_type_int": "Validity period of provided geolocation",
    "object_messageMediaGeoLive_param_proximity_notification_radius_type_flags.1?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000).",
    "object_authorization": "Logged-in session",
    "object_authorization_param_current_type_flags.0?true": "Whether this is the current session",
    "object_authorization_param_official_app_type_flags.1?true": "Whether the session is from an official app",
    "object_authorization_param_password_pending_type_flags.2?true": "Whether the session is still waiting for a 2FA password",
    "object_authorization_param_encrypted_requests_disabled_type_flags.3?true": "Whether this session will accept encrypted chats",
    "object_authorization_param_call_requests_disabled_type_flags.4?true": "Whether this session will accept phone calls",
    "object_authorization_param_hash_type_long": "Identifier",
    "object_authorization_param_device_model_type_string": "Device model",
    "object_authorization_param_platform_type_string": "Platform",
    "object_authorization_param_system_version_type_string": "System version",
    "object_authorization_param_api_id_type_int": "[API ID](https:\/\/core.telegram.org\/api\/obtaining_api_id)",
    "object_authorization_param_app_name_type_string": "App name",
    "object_authorization_param_app_version_type_string": "App version",
    "object_authorization_param_date_created_type_int": "When was the session created",
    "object_authorization_param_date_active_type_int": "When was the session last active",
    "object_authorization_param_ip_type_string": "Last known IP",
    "object_authorization_param_country_type_string": "Country determined from IP",
    "object_authorization_param_region_type_string": "Region determined from IP",
    "object_langPackString": "Translated localization string",
    "object_langPackString_param_key_type_string": "Language key",
    "object_langPackString_param_value_type_string": "Value",
    "object_updateNewMessage": "New message in a private chat or in a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups).",
    "object_updateNewMessage_param_message_type_Message": "Message",
    "object_updateNewMessage_param_pts_type_int": "New quantity of actions in a message box",
    "object_updateNewMessage_param_pts_count_type_int": "Number of generated events",
    "object_encryptedChatDiscarded": "Discarded or deleted chat.",
    "object_encryptedChatDiscarded_param_history_deleted_type_flags.0?true": "Whether both users of this secret chat should also remove all of its messages",
    "object_encryptedChatDiscarded_param_id_type_int": "Chat ID",
    "object_bots.botInfo": "Localized information about a bot.",
    "object_bots.botInfo_param_name_type_string": "Bot name",
    "object_bots.botInfo_param_about_type_string": "Bot about text",
    "object_bots.botInfo_param_description_type_string": "Bot description",
    "object_decryptedMessageActionFlushHistory": "The entire message history has been deleted.",
    "object_messages.chatFull": "Full info about a [channel](https:\/\/core.telegram.org\/api\/channel#channels), [supergroup](https:\/\/core.telegram.org\/api\/channel#supergroups), [gigagroup](https:\/\/core.telegram.org\/api\/channel#gigagroups) or [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups).",
    "object_messages.chatFull_param_full_chat_type_ChatFull": "Full info",
    "object_messages.chatFull_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_messages.chatFull_param_users_type_Vector<User>": "Mentioned users",
    "object_poll": "Poll",
    "object_poll_param_id_type_long": "ID of the poll",
    "object_poll_param_closed_type_flags.0?true": "Whether the poll is closed and doesn't accept any more answers",
    "object_poll_param_public_voters_type_flags.1?true": "Whether cast votes are publicly visible to all users (non-anonymous poll)",
    "object_poll_param_multiple_choice_type_flags.2?true": "Whether multiple options can be chosen as answer",
    "object_poll_param_quiz_type_flags.3?true": "Whether this is a quiz (with wrong and correct answers, results shown in the return type)",
    "object_poll_param_question_type_string": "The question of the poll",
    "object_poll_param_answers_type_Vector<PollAnswer>": "The possible answers, vote using [messages.sendVote](..\/methods\/messages.sendVote.md).",
    "object_poll_param_close_period_type_flags.4?int": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close\\_date.",
    "object_poll_param_close_date_type_flags.5?int": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close\\_period.",
    "object_updateGroupCall": "A new groupcall was started",
    "object_updateGroupCall_param_chat_id_type_long": "The [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) where this group call or livestream takes place",
    "object_updateGroupCall_param_call_type_GroupCall": "Info about the group call or livestream",
    "object_messageEmpty": "Empty constructor, non-existent message.",
    "object_messageEmpty_param_id_type_int": "Message identifier",
    "object_messageEmpty_param_peer_id_type_flags.0?Peer": "Peer ID, the chat where this message was sent",
    "object_pageBlockTitle": "Title",
    "object_pageBlockTitle_param_text_type_RichText": "Title",
    "object_channels.adminLogResults": "Admin log events",
    "object_channels.adminLogResults_param_events_type_Vector<ChannelAdminLogEvent>": "Admin log events",
    "object_channels.adminLogResults_param_chats_type_Vector<Chat>": "Chats mentioned in events",
    "object_channels.adminLogResults_param_users_type_Vector<User>": "Users mentioned in events",
    "object_inputPaymentCredentials": "Payment credentials",
    "object_inputPaymentCredentials_param_save_type_flags.0?true": "Save payment credential for future use",
    "object_inputPaymentCredentials_param_data_type_DataJSON": "Payment credentials",
    "object_updatePtsChanged": "[Common message box sequence PTS](https:\/\/core.telegram.org\/api\/updates) has changed, [state has to be refetched using updates.getState](https:\/\/core.telegram.org\/api\/updates#fetching-state)",
    "object_chatParticipantAdmin": "Chat admin",
    "object_chatParticipantAdmin_param_user_id_type_long": "ID of a group member that is admin",
    "object_chatParticipantAdmin_param_inviter_id_type_long": "ID of the user that added the member to the group",
    "object_chatParticipantAdmin_param_date_type_int": "Date when the user was added",
    "object_updateGroupCallParticipants": "The participant list of a certain group call has changed",
    "object_updateGroupCallParticipants_param_call_type_InputGroupCall": "Group call",
    "object_updateGroupCallParticipants_param_participants_type_Vector<GroupCallParticipant>": "New participant list",
    "object_updateGroupCallParticipants_param_version_type_int": "Version",
    "object_jsonArray": "JSON array",
    "object_jsonArray_param_value_type_Vector<JSONValue>": "JSON values",
    "object_updateChatParticipants": "Composition of chat participants changed.",
    "object_updateChatParticipants_param_participants_type_ChatParticipants": "Updated chat participants",
    "object_secureValueErrorFiles": "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.",
    "object_secureValueErrorFiles_param_type_type_SecureValueType": "One of [secureValueTypeUtilityBill](..\/constructors\/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](..\/constructors\/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](..\/constructors\/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](..\/constructors\/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](..\/constructors\/secureValueTypeTemporaryRegistration.md)",
    "object_secureValueErrorFiles_param_file_hash_type_Vector<bytes>": "File hash",
    "object_secureValueErrorFiles_param_text_type_string": "Error message",
    "object_messages.messages": "Full list of messages with auxiliary data.",
    "object_messages.messages_param_messages_type_Vector<Message>": "List of messages",
    "object_messages.messages_param_chats_type_Vector<Chat>": "List of chats mentioned in dialogs",
    "object_messages.messages_param_users_type_Vector<User>": "List of users mentioned in messages and chats",
    "object_updateDeleteChannelMessages": "Some messages in a [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel) were deleted",
    "object_updateDeleteChannelMessages_param_channel_id_type_long": "Channel ID",
    "object_updateDeleteChannelMessages_param_messages_type_Vector<int>": "IDs of messages that were deleted",
    "object_updateDeleteChannelMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateDeleteChannelMessages_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_channelParticipantsContacts": "Fetch only participants that are also contacts",
    "object_channelParticipantsContacts_param_q_type_string": "Optional search query for searching contact participants by name",
    "object_payments.bankCardData": "Credit card info, provided by the card's bank(s)",
    "object_payments.bankCardData_param_title_type_string": "Credit card title",
    "object_payments.bankCardData_param_open_urls_type_Vector<BankCardOpenUrl>": "Info URL(s) provided by the card's bank(s)",
    "object_securePasswordKdfAlgoUnknown": "Unknown KDF algo (most likely the client has to be updated)",
    "object_notificationSoundLocal": "Indicates a specific local notification sound should be used",
    "object_notificationSoundLocal_param_title_type_string": "Notification sound title",
    "object_notificationSoundLocal_param_data_type_string": "Notification sound identifier (arbitrary data used by the client to identify a specific local notification sound)",
    "object_botCommandScopeChats": "The specified bot commands will be valid in all [groups and supergroups](https:\/\/core.telegram.org\/api\/channel).",
    "object_messages.savedGifs": "Saved gifs",
    "object_messages.savedGifs_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.savedGifs_param_gifs_type_Vector<Document>": "List of saved gifs",
    "object_updateChatParticipantDelete": "A member has left the group.",
    "object_updateChatParticipantDelete_param_chat_id_type_long": "Group ID",
    "object_updateChatParticipantDelete_param_user_id_type_long": "ID of the user",
    "object_updateChatParticipantDelete_param_version_type_int": "Used in basic groups to reorder updates and make sure that all of them was received.",
    "object_messageActionSetChatTheme": "The chat theme was changed",
    "object_messageActionSetChatTheme_param_emoticon_type_string": "The emoji that identifies a chat theme",
    "object_fileHash": "SHA256 Hash of an uploaded file, to be checked for validity after download",
    "object_fileHash_param_offset_type_long": "Offset from where to start computing SHA-256 hash",
    "object_fileHash_param_limit_type_int": "Length",
    "object_fileHash_param_hash_type_bytes": "SHA-256 Hash of file chunk, to be checked for validity after download",
    "object_pageBlockDetails": "A collapsible details block",
    "object_pageBlockDetails_param_open_type_flags.0?true": "Whether the block is open by default",
    "object_pageBlockDetails_param_blocks_type_Vector<PageBlock>": "Block contents",
    "object_pageBlockDetails_param_title_type_RichText": "Always visible heading for the block",
    "object_requestPeerTypeChat": "Choose a chat or supergroup",
    "object_requestPeerTypeChat_param_creator_type_flags.0?true": "Whether to allow only choosing chats or supergroups that were created by the current user.",
    "object_requestPeerTypeChat_param_bot_participant_type_flags.5?true": "Whether to allow only choosing chats or supergroups where the bot is a participant.",
    "object_requestPeerTypeChat_param_has_username_type_flags.3?Bool": "If specified, allows only choosing channels with or without a username, according to the value of [Bool](..\/types\/Bool.md).",
    "object_requestPeerTypeChat_param_forum_type_flags.4?Bool": "If specified, allows only choosing chats or supergroups that are or aren't [forums](https:\/\/core.telegram.org\/api\/forum), according to the value of [Bool](..\/types\/Bool.md).",
    "object_requestPeerTypeChat_param_user_admin_rights_type_flags.1?ChatAdminRights": "If specified, allows only choosing chats or supergroups where the current user is an admin with at least the specified admin rights.",
    "object_requestPeerTypeChat_param_bot_admin_rights_type_flags.2?ChatAdminRights": "If specified, allows only choosing chats or supergroups where the bot is an admin with at least the specified admin rights.",
    "object_sendMessageRecordRoundAction": "User is recording a round video to share",
    "object_channelAdminLogEventActionParticipantToggleAdmin": "The admin [rights](https:\/\/core.telegram.org\/api\/rights) of a user were changed",
    "object_channelAdminLogEventActionParticipantToggleAdmin_param_prev_participant_type_ChannelParticipant": "Previous admin rights",
    "object_channelAdminLogEventActionParticipantToggleAdmin_param_new_participant_type_ChannelParticipant": "New admin rights",
    "object_inputMessagesFilterGeo": "Return only messages containing geolocations",
    "object_sendMessageGeoLocationAction": "User is selecting a location to share.",
    "object_messageActionTopicCreate": "A [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) was created.",
    "object_messageActionTopicCreate_param_title_type_string": "Topic name.",
    "object_messageActionTopicCreate_param_icon_color_type_int": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`.",
    "object_messageActionTopicCreate_param_icon_emoji_id_type_flags.0?long": "ID of the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) used as topic icon.",
    "object_topPeerCategoryPeers": "Top peer category",
    "object_topPeerCategoryPeers_param_category_type_TopPeerCategory": "Top peer category of peers",
    "object_topPeerCategoryPeers_param_count_type_int": "Count of peers",
    "object_topPeerCategoryPeers_param_peers_type_Vector<TopPeer>": "Peers",
    "object_inputEncryptedFileEmpty": "Empty constructor.",
    "object_updates.difference": "Full list of occurred events.",
    "object_updates.difference_param_new_messages_type_Vector<Message>": "List of new messages",
    "object_updates.difference_param_new_encrypted_messages_type_Vector<EncryptedMessage>": "List of new encrypted secret chat messages",
    "object_updates.difference_param_other_updates_type_Vector<Update>": "List of updates",
    "object_updates.difference_param_chats_type_Vector<Chat>": "List of chats mentioned in events",
    "object_updates.difference_param_users_type_Vector<User>": "List of users mentioned in events",
    "object_updates.difference_param_state_type_updates.State": "Current state",
    "object_inputDialogPeer": "A peer",
    "object_inputDialogPeer_param_peer_type_InputPeer": "Peer",
    "object_inlineQueryPeerTypeChat": "Peer type: [chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_attachMenuBotsNotModified": "The list of bot web apps hasn't changed",
    "object_reactionEmoji": "Normal emoji message reaction",
    "object_reactionEmoji_param_emoticon_type_string": "Emoji",
    "object_secureValueTypeBankStatement": "Bank statement",
    "object_attachMenuPeerTypeSameBotPM": "The bot attachment menu entry is available in the chat with the bot that offers it",
    "object_inputPeerUser": "Defines a user for further interaction.",
    "object_inputPeerUser_param_user_id_type_long": "User identifier",
    "object_inputPeerUser_param_access_hash_type_long": "**access\\_hash** value from the [user](..\/constructors\/user.md) constructor",
    "object_inputGeoPoint": "Defines a GeoPoint by its coordinates.",
    "object_inputGeoPoint_param_lat_type_double": "Latitude",
    "object_inputGeoPoint_param_long_type_double": "Longitude",
    "object_inputGeoPoint_param_accuracy_radius_type_flags.0?int": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
    "object_channelAdminLogEventActionExportedInviteDelete": "A chat invite was deleted",
    "object_channelAdminLogEventActionExportedInviteDelete_param_invite_type_ExportedChatInvite": "The deleted chat invite",
    "object_payments.validatedRequestedInfo": "Validated user-provided info",
    "object_payments.validatedRequestedInfo_param_id_type_flags.0?string": "ID",
    "object_payments.validatedRequestedInfo_param_shipping_options_type_flags.1?Vector<ShippingOption>": "Shipping options",
    "object_pageBlockChannel": "Reference to a telegram channel",
    "object_pageBlockChannel_param_channel_type_Chat": "The channel\/supergroup\/chat",
    "object_updateDialogFilter": "A new [folder](https:\/\/core.telegram.org\/api\/folders) was added",
    "object_updateDialogFilter_param_id_type_int": "[Folder](https:\/\/core.telegram.org\/api\/folders) ID",
    "object_updateDialogFilter_param_filter_type_flags.0?DialogFilter": "[Folder](https:\/\/core.telegram.org\/api\/folders) info",
    "object_textAnchor": "Text linking to another section of the page",
    "object_textAnchor_param_text_type_RichText": "Text",
    "object_textAnchor_param_name_type_string": "Section name",
    "object_channelAdminLogEventActionStartGroupCall": "A group call was started",
    "object_channelAdminLogEventActionStartGroupCall_param_call_type_InputGroupCall": "Group call",
    "object_textWithEntities": "Styled text with [message entities](https:\/\/core.telegram.org\/api\/entities)",
    "object_textWithEntities_param_text_type_string": "Text",
    "object_textWithEntities_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_inputTakeoutFileLocation": "Empty constructor for takeout",
    "object_documentAttributeFilename": "A simple document with a file name",
    "object_documentAttributeFilename_param_file_name_type_string": "The file name",
    "object_keyboardButtonGame": "Button to start a game",
    "object_keyboardButtonGame_param_text_type_string": "Button text",
    "object_groupCallParticipantVideoSourceGroup": "Describes a group of video synchronization source identifiers",
    "object_groupCallParticipantVideoSourceGroup_param_semantics_type_string": "SDP semantics",
    "object_groupCallParticipantVideoSourceGroup_param_sources_type_Vector<int>": "Source IDs",
    "object_channelAdminLogEventActionChangeLinkedChat": "The linked chat was changed",
    "object_channelAdminLogEventActionChangeLinkedChat_param_prev_value_type_long": "Previous linked chat",
    "object_channelAdminLogEventActionChangeLinkedChat_param_new_value_type_long": "New linked chat",
    "object_inputReportReasonFake": "Report for impersonation",
    "object_updateFavedStickers": "The list of favorited stickers was changed, the client should call [messages.getFavedStickers](..\/methods\/messages.getFavedStickers.md) to refetch the new list",
    "object_popularContact": "Popular contact",
    "object_popularContact_param_client_id_type_long": "Contact identifier",
    "object_popularContact_param_importers_type_int": "How many people imported this contact",
    "object_inputPrivacyValueDisallowAll": "Disallow all",
    "object_messageActionEmpty": "Empty constructor.",
    "object_messageEntityBold": "Message entity representing **bold text**.",
    "object_messageEntityBold_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityBold_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_updateBotWebhookJSONQuery": "A new incoming query; for bots only",
    "object_updateBotWebhookJSONQuery_param_query_id_type_long": "Query identifier",
    "object_updateBotWebhookJSONQuery_param_data_type_DataJSON": "Query data",
    "object_updateBotWebhookJSONQuery_param_timeout_type_int": "Query timeout",
    "object_messages.availableReactions": "Animations and metadata associated with [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_messages.availableReactions_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.availableReactions_param_reactions_type_Vector<AvailableReaction>": "Animations and metadata associated with [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_keyboardButtonRequestPoll": "A button that allows the user to create and send a poll when pressed; available only in private",
    "object_keyboardButtonRequestPoll_param_quiz_type_flags.0?Bool": "If set, only quiz polls can be sent",
    "object_keyboardButtonRequestPoll_param_text_type_string": "Button text",
    "object_notifyBroadcasts": "Channel notification settings",
    "object_updateUserPinnedMessage": "A message was pinned in a private chat with a user",
    "object_updateUserPinnedMessage_param_user_id_type_int": "User that pinned the message",
    "object_updateUserPinnedMessage_param_id_type_int": "Message ID that was pinned",
    "object_forumTopic": "Represents a [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics).",
    "object_forumTopic_param_my_type_flags.1?true": "Whether the topic was created by the current user",
    "object_forumTopic_param_closed_type_flags.2?true": "Whether the topic is closed (no messages can be sent to it)",
    "object_forumTopic_param_pinned_type_flags.3?true": "Whether the topic is pinned",
    "object_forumTopic_param_short_type_flags.5?true": "Whether this constructor is a reduced version of the full topic information. <br>If set, only the `my`, `closed`, `id`, `date`, `title`, `icon_color`, `icon_emoji_id` and `from_id` parameters will contain valid information. <br>Reduced info is usually only returned in topic-related [admin log events \u00bb](https:\/\/core.telegram.org\/api\/recent-actions) and in the [messages.channelMessages](..\/constructors\/messages.channelMessages.md) constructor: if needed, full information can be fetched using [channels.getForumTopicsByID](..\/methods\/channels.getForumTopicsByID.md).",
    "object_forumTopic_param_hidden_type_flags.6?true": "Whether the topic is hidden (only valid for the \"General\" topic, `id=1`)",
    "object_forumTopic_param_id_type_int": "[Topic ID](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_forumTopic_param_date_type_int": "Topic creation date",
    "object_forumTopic_param_title_type_string": "Topic title",
    "object_forumTopic_param_icon_color_type_int": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`.",
    "object_forumTopic_param_icon_emoji_id_type_flags.0?long": "ID of the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) used as topic icon.",
    "object_forumTopic_param_top_message_type_int": "ID of the last message that was sent to this topic",
    "object_forumTopic_param_read_inbox_max_id_type_int": "Position up to which all incoming messages are read.",
    "object_forumTopic_param_read_outbox_max_id_type_int": "Position up to which all outgoing messages are read.",
    "object_forumTopic_param_unread_count_type_int": "Number of unread messages",
    "object_forumTopic_param_unread_mentions_count_type_int": "Number of [unread mentions](https:\/\/core.telegram.org\/api\/mentions)",
    "object_forumTopic_param_unread_reactions_count_type_int": "Number of unread reactions to messages you sent",
    "object_forumTopic_param_from_id_type_Peer": "ID of the peer that created the topic",
    "object_forumTopic_param_notify_settings_type_PeerNotifySettings": "Notification settings",
    "object_forumTopic_param_draft_type_flags.4?DraftMessage": "Message [draft](https:\/\/core.telegram.org\/api\/drafts)",
    "object_messageEntityMentionName": "Message entity representing a [user mention](https:\/\/core.telegram.org\/api\/mentions): for *creating* a mention use [inputMessageEntityMentionName](..\/constructors\/inputMessageEntityMentionName.md).",
    "object_messageEntityMentionName_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityMentionName_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityMentionName_param_user_id_type_long": "Identifier of the user that was mentioned",
    "object_phoneCallWaiting": "Incoming phone call",
    "object_phoneCallWaiting_param_video_type_flags.6?true": "Is this a video call",
    "object_phoneCallWaiting_param_id_type_long": "Call ID",
    "object_phoneCallWaiting_param_access_hash_type_long": "Access hash",
    "object_phoneCallWaiting_param_date_type_int": "Date",
    "object_phoneCallWaiting_param_admin_id_type_long": "Admin ID",
    "object_phoneCallWaiting_param_participant_id_type_long": "Participant ID",
    "object_phoneCallWaiting_param_protocol_type_PhoneCallProtocol": "Phone call protocol info",
    "object_phoneCallWaiting_param_receive_date_type_flags.0?int": "When was the phone call received",
    "object_textConcat": "Concatenation of rich texts",
    "object_textConcat_param_texts_type_Vector<RichText>": "Concatenated rich texts",
    "object_messages.forumTopics": "Contains information about multiple [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_messages.forumTopics_param_order_by_create_date_type_flags.0?true": "Whether the returned topics are ordered by creation date; if set, pagination by `next_offset` should use [forumTopic](..\/constructors\/forumTopic.md).`date`; otherwise topics are ordered by the last message date, so paginate by the `date` of the [message](..\/types\/Message.md) referenced by [forumTopic](..\/constructors\/forumTopic.md).`top_message`.",
    "object_messages.forumTopics_param_count_type_int": "Total number of topics matching query; may be less than the topics contained in `topics`, in which case [pagination](https:\/\/core.telegram.org\/api\/offsets) is required.",
    "object_messages.forumTopics_param_topics_type_Vector<ForumTopic>": "Forum topics",
    "object_messages.forumTopics_param_messages_type_Vector<Message>": "Related messages (contains the messages mentioned by [forumTopic](..\/constructors\/forumTopic.md).`top_message`).",
    "object_messages.forumTopics_param_chats_type_Vector<Chat>": "Related chats",
    "object_messages.forumTopics_param_users_type_Vector<User>": "Related users",
    "object_messages.forumTopics_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_chatBannedRights": "Represents the rights of a normal user in a [supergroup\/channel\/chat](https:\/\/core.telegram.org\/api\/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X.",
    "object_chatBannedRights_param_view_messages_type_flags.0?true": "If set, does not allow a user to view messages in a [supergroup\/channel\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_messages_type_flags.1?true": "If set, does not allow a user to send messages in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_media_type_flags.2?true": "If set, does not allow a user to send any media in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_stickers_type_flags.3?true": "If set, does not allow a user to send stickers in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_gifs_type_flags.4?true": "If set, does not allow a user to send gifs in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_games_type_flags.5?true": "If set, does not allow a user to send games in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_inline_type_flags.6?true": "If set, does not allow a user to use inline bots in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_embed_links_type_flags.7?true": "If set, does not allow a user to embed links in the messages of a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_send_polls_type_flags.8?true": "If set, does not allow a user to send polls in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_change_info_type_flags.10?true": "If set, does not allow any user to change the description of a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_invite_users_type_flags.15?true": "If set, does not allow any user to invite users in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_pin_messages_type_flags.17?true": "If set, does not allow any user to pin messages in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatBannedRights_param_manage_topics_type_flags.18?true": "If set, does not allow any user to create, delete or modify [forum topics \u00bb](https:\/\/core.telegram.org\/api\/forum#forum-topics).",
    "object_chatBannedRights_param_send_photos_type_flags.19?true": "If set, does not allow a user to send photos in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_videos_type_flags.20?true": "If set, does not allow a user to send videos in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_roundvideos_type_flags.21?true": "If set, does not allow a user to send round videos in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_audios_type_flags.22?true": "If set, does not allow a user to send audio files in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_voices_type_flags.23?true": "If set, does not allow a user to send voice messages in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_docs_type_flags.24?true": "If set, does not allow a user to send documents in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_send_plain_type_flags.25?true": "If set, does not allow a user to send text messages in a [supergroup\/chat](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatBannedRights_param_until_date_type_int": "Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days).",
    "object_messageEntityEmail": "Message entity representing an <email@example.com>.",
    "object_messageEntityEmail_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityEmail_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_updateMessageExtendedMedia": "Extended media update",
    "object_updateMessageExtendedMedia_param_peer_type_Peer": "Peer",
    "object_updateMessageExtendedMedia_param_msg_id_type_int": "Message ID",
    "object_updateMessageExtendedMedia_param_extended_media_type_MessageExtendedMedia": "Extended media",
    "object_messageActionChannelMigrateFrom": "Indicates the channel was [migrated](https:\/\/core.telegram.org\/api\/channel) from the specified chat",
    "object_messageActionChannelMigrateFrom_param_title_type_string": "The old chat title",
    "object_messageActionChannelMigrateFrom_param_chat_id_type_long": "The old chat ID",
    "object_messages.chatInviteImporters": "Info about the users that joined the chat using a specific chat invite",
    "object_messages.chatInviteImporters_param_count_type_int": "Number of users that joined",
    "object_messages.chatInviteImporters_param_importers_type_Vector<ChatInviteImporter>": "The users that joined",
    "object_messages.chatInviteImporters_param_users_type_Vector<User>": "The users that joined",
    "object_phoneCallProtocol": "Protocol info for libtgvoip",
    "object_phoneCallProtocol_param_udp_p2p_type_flags.0?true": "Whether to allow P2P connection to the other participant",
    "object_phoneCallProtocol_param_udp_reflector_type_flags.1?true": "Whether to allow connection to the other participants through the reflector servers",
    "object_phoneCallProtocol_param_min_layer_type_int": "Minimum layer for remote libtgvoip",
    "object_phoneCallProtocol_param_max_layer_type_int": "Maximum layer for remote libtgvoip",
    "object_phoneCallProtocol_param_library_versions_type_Vector<string>": "When using [phone.requestCall](..\/methods\/phone.requestCall.md) and [phone.acceptCall](..\/methods\/phone.acceptCall.md), specify all library versions supported by the client. <br>The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's [phone.acceptCall](..\/methods\/phone.acceptCall.md) and in the [phoneCallAccepted](..\/constructors\/phoneCallAccepted.md) update received by the caller.",
    "object_inputStickerSetDice": "Used for fetching [animated dice stickers](https:\/\/core.telegram.org\/api\/dice)",
    "object_inputStickerSetDice_param_emoticon_type_string": "The emoji, for now \ud83c\udfc0, \ud83c\udfb2 and \ud83c\udfaf are supported",
    "object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": "This key derivation algorithm defines that [SRP 2FA login](https:\/\/core.telegram.org\/api\/srp) must be used",
    "object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt1_type_bytes": "One of two salts used by the derivation function (see [SRP 2FA login](https:\/\/core.telegram.org\/api\/srp))",
    "object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_salt2_type_bytes": "One of two salts used by the derivation function (see [SRP 2FA login](https:\/\/core.telegram.org\/api\/srp))",
    "object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_g_type_int": "Base (see [SRP 2FA login](https:\/\/core.telegram.org\/api\/srp))",
    "object_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_param_p_type_bytes": "2048-bit modulus (see [SRP 2FA login](https:\/\/core.telegram.org\/api\/srp))",
    "object_sendMessageUploadPhotoAction": "User is uploading a photo.",
    "object_sendMessageUploadPhotoAction_param_progress_type_int": "Progress percentage",
    "object_botInfo": "Info about bots (available bot commands, etc)",
    "object_botInfo_param_user_id_type_flags.0?long": "ID of the bot",
    "object_botInfo_param_description_type_flags.1?string": "Description of the bot",
    "object_botInfo_param_description_photo_type_flags.4?Photo": "Description photo",
    "object_botInfo_param_description_document_type_flags.5?Document": "Description animation in MPEG4 format",
    "object_botInfo_param_commands_type_flags.2?Vector<BotCommand>": "Bot commands that can be used in the chat",
    "object_botInfo_param_menu_button_type_flags.3?BotMenuButton": "Indicates the action to execute when pressing the in-UI menu button for bots",
    "object_inputWallPaper": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_inputWallPaper_param_id_type_long": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) ID",
    "object_inputWallPaper_param_access_hash_type_long": "Access hash",
    "object_updateReadChannelDiscussionInbox": "Incoming comments in a [discussion thread](https:\/\/core.telegram.org\/api\/threads) were marked as read",
    "object_updateReadChannelDiscussionInbox_param_channel_id_type_long": "[Discussion group ID](https:\/\/core.telegram.org\/api\/channel)",
    "object_updateReadChannelDiscussionInbox_param_top_msg_id_type_int": "ID of the group message that started the [thread](https:\/\/core.telegram.org\/api\/threads) (message in linked discussion group)",
    "object_updateReadChannelDiscussionInbox_param_read_max_id_type_int": "Message ID of latest read incoming message for this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_updateReadChannelDiscussionInbox_param_broadcast_id_type_flags.0?long": "If set, contains the ID of the [channel](https:\/\/core.telegram.org\/api\/channel) that contains the post that started the [comment thread](https:\/\/core.telegram.org\/api\/threads) in the discussion group (`channel_id`)",
    "object_updateReadChannelDiscussionInbox_param_broadcast_post_type_flags.0?int": "If set, contains the ID of the channel post that started the [comment thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_groupCallDiscarded": "An ended group call",
    "object_groupCallDiscarded_param_id_type_long": "Group call ID",
    "object_groupCallDiscarded_param_access_hash_type_long": "Group call access hash",
    "object_groupCallDiscarded_param_duration_type_int": "Group call duration",
    "object_pageTableCell": "Table cell",
    "object_pageTableCell_param_header_type_flags.0?true": "Is this element part of the column header",
    "object_pageTableCell_param_align_center_type_flags.3?true": "Horizontally centered block",
    "object_pageTableCell_param_align_right_type_flags.4?true": "Right-aligned block",
    "object_pageTableCell_param_valign_middle_type_flags.5?true": "Vertically centered block",
    "object_pageTableCell_param_valign_bottom_type_flags.6?true": "Block vertically-aligned to the bottom",
    "object_pageTableCell_param_text_type_flags.7?RichText": "Content",
    "object_pageTableCell_param_colspan_type_flags.1?int": "For how many columns should this cell extend",
    "object_pageTableCell_param_rowspan_type_flags.2?int": "For how many rows should this cell extend",
    "object_messageEntityCustomEmoji": "Represents a custom emoji.  \nNote that this entity must wrap exactly one regular emoji (the one contained in [documentAttributeCustomEmoji](..\/constructors\/documentAttributeCustomEmoji.md).`alt`) in the related text, otherwise the server will ignore it.",
    "object_messageEntityCustomEmoji_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityCustomEmoji_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityCustomEmoji_param_document_id_type_long": "Document ID of the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji), use [messages.getCustomEmojiDocuments](..\/methods\/messages.getCustomEmojiDocuments.md) to fetch the emoji animation and the actual emoji it represents.",
    "object_pageBlockPreformatted": "Preformatted (`<pre>` text)",
    "object_pageBlockPreformatted_param_text_type_RichText": "Text",
    "object_pageBlockPreformatted_param_language_type_string": "Programming language of preformatted text",
    "object_inputPeerPhotoFileLocation": "Location of profile photo of channel\/group\/supergroup\/user",
    "object_inputPeerPhotoFileLocation_param_big_type_flags.0?true": "Whether to download the high-quality version of the picture",
    "object_inputPeerPhotoFileLocation_param_peer_type_InputPeer": "The peer whose profile picture should be downloaded",
    "object_inputPeerPhotoFileLocation_param_photo_id_type_long": "Photo ID",
    "object_inputPrivacyValueAllowChatParticipants": "Allow only participants of certain chats",
    "object_inputPrivacyValueAllowChatParticipants_param_chats_type_Vector<long>": "Allowed chat IDs",
    "object_updateSavedGifs": "The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https:\/\/core.telegram.org\/method\/messages.getSavedGifs)",
    "object_updateGroupInvitePrivacyForbidden": "0-N updates of this type may be returned only when invoking [messages.addChatUser](..\/methods\/messages.addChatUser.md), [channels.inviteToChannel](..\/methods\/channels.inviteToChannel.md) or [messages.createChat](..\/methods\/messages.createChat.md): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https:\/\/core.telegram.org\/api\/invites) can be shared with the user, instead.",
    "object_updateGroupInvitePrivacyForbidden_param_user_id_type_long": "ID of the user we couldn't add.",
    "object_inputBotInlineMessageMediaInvoice": "An invoice",
    "object_inputBotInlineMessageMediaInvoice_param_title_type_string": "Product name, 1-32 characters",
    "object_inputBotInlineMessageMediaInvoice_param_description_type_string": "Product description, 1-255 characters",
    "object_inputBotInlineMessageMediaInvoice_param_photo_type_flags.0?InputWebDocument": "Invoice photo",
    "object_inputBotInlineMessageMediaInvoice_param_invoice_type_Invoice": "The invoice",
    "object_inputBotInlineMessageMediaInvoice_param_payload_type_bytes": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.",
    "object_inputBotInlineMessageMediaInvoice_param_provider_type_string": "Payments provider token, obtained via [Botfather](https:\/\/t.me\/botfather)",
    "object_inputBotInlineMessageMediaInvoice_param_provider_data_type_DataJSON": "A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.",
    "object_inputBotInlineMessageMediaInvoice_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_inputNotifyChats": "Notifications generated by all groups.",
    "object_auth.codeTypeFragmentSms": "The next time, the authentication code will be delivered via [fragment.com](https:\/\/fragment.com)",
    "object_channelAdminLogEventActionEditTopic": "A [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) was edited",
    "object_channelAdminLogEventActionEditTopic_param_prev_topic_type_ForumTopic": "Previous topic information",
    "object_channelAdminLogEventActionEditTopic_param_new_topic_type_ForumTopic": "New topic information",
    "object_groupCall": "Info about a group call or livestream",
    "object_groupCall_param_join_muted_type_flags.1?true": "Whether the user should be muted upon joining the call",
    "object_groupCall_param_can_change_join_muted_type_flags.2?true": "Whether the current user can change the value of the `join_muted` flag using [phone.toggleGroupCallSettings](..\/methods\/phone.toggleGroupCallSettings.md)",
    "object_groupCall_param_join_date_asc_type_flags.6?true": "Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants.",
    "object_groupCall_param_schedule_start_subscribed_type_flags.8?true": "Whether we subscribed to the scheduled call",
    "object_groupCall_param_can_start_video_type_flags.9?true": "Whether you can start streaming video into the call",
    "object_groupCall_param_record_video_active_type_flags.11?true": "Whether the group call is currently being recorded",
    "object_groupCall_param_rtmp_stream_type_flags.12?true": "Whether RTMP streams are allowed",
    "object_groupCall_param_listeners_hidden_type_flags.13?true": "Whether the listeners list is hidden and cannot be fetched using [phone.getGroupParticipants](..\/methods\/phone.getGroupParticipants.md). The `phone.groupParticipants.count` and `groupCall.participants_count` counters will still include listeners.",
    "object_groupCall_param_id_type_long": "Group call ID",
    "object_groupCall_param_access_hash_type_long": "Group call access hash",
    "object_groupCall_param_participants_count_type_int": "Participant count",
    "object_groupCall_param_title_type_flags.3?string": "Group call title",
    "object_groupCall_param_stream_dc_id_type_flags.4?int": "DC ID to be used for livestream chunks",
    "object_groupCall_param_record_start_date_type_flags.5?int": "When was the recording started",
    "object_groupCall_param_schedule_date_type_flags.7?int": "When is the call scheduled to start",
    "object_groupCall_param_unmuted_video_count_type_flags.10?int": "Number of people currently streaming video into the call",
    "object_groupCall_param_unmuted_video_limit_type_int": "Maximum number of people allowed to stream video into the call",
    "object_groupCall_param_version_type_int": "Version",
    "object_folderPeer": "Peer in a folder",
    "object_folderPeer_param_peer_type_Peer": "Folder peer info",
    "object_folderPeer_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_botCommand": "Describes a bot command that can be used in a chat",
    "object_botCommand_param_command_type_string": "`\/command` name",
    "object_botCommand_param_description_type_string": "Description of the command",
    "object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000": "PBKDF2 with SHA512 and 100000 iterations KDF algo",
    "object_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000_param_salt_type_bytes": "Salt",
    "object_textUnderline": "Underlined text",
    "object_textUnderline_param_text_type_RichText": "Text",
    "object_inputSecureFileLocation": "Location of encrypted telegram [passport](https:\/\/core.telegram.org\/passport) file.",
    "object_inputSecureFileLocation_param_id_type_long": "File ID, **id** parameter value from [secureFile](..\/constructors\/secureFile.md)",
    "object_inputSecureFileLocation_param_access_hash_type_long": "Checksum, **access\\_hash** parameter value from [secureFile](..\/constructors\/secureFile.md)",
    "object_messageActionContactSignUp": "A contact just signed up to telegram",
    "object_updateChannelPinnedTopic": "A [forum topic \u00bb](https:\/\/core.telegram.org\/api\/forum#forum-topics) was pinned or unpinned.",
    "object_updateChannelPinnedTopic_param_pinned_type_flags.0?true": "Whether the topic was pinned or unpinned",
    "object_updateChannelPinnedTopic_param_channel_id_type_long": "The forum ID",
    "object_updateChannelPinnedTopic_param_topic_id_type_int": "The topic ID",
    "object_auth.sentCodeTypeMissedCall": "The code will be sent via a flash phone call, that will be closed immediately. The last digits of the phone number that calls are the code that must be entered manually by the user.",
    "object_auth.sentCodeTypeMissedCall_param_prefix_type_string": "Prefix of the phone number from which the call will be made",
    "object_auth.sentCodeTypeMissedCall_param_length_type_int": "Length of the verification code",
    "object_inputPrivacyKeyPhoneNumber": "Whether people will be able to see your phone number",
    "object_dialogFilterSuggested": "Suggested [folders](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilterSuggested_param_filter_type_DialogFilter": "[Folder info](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilterSuggested_param_description_type_string": "[Folder](https:\/\/core.telegram.org\/api\/folders) description",
    "object_phoneCallRequested": "Requested phone call",
    "object_phoneCallRequested_param_video_type_flags.6?true": "Whether this is a video call",
    "object_phoneCallRequested_param_id_type_long": "Phone call ID",
    "object_phoneCallRequested_param_access_hash_type_long": "Access hash",
    "object_phoneCallRequested_param_date_type_int": "When was the phone call created",
    "object_phoneCallRequested_param_admin_id_type_long": "ID of the creator of the phone call",
    "object_phoneCallRequested_param_participant_id_type_long": "ID of the other participant of the phone call",
    "object_phoneCallRequested_param_g_a_hash_type_bytes": "[Parameter for key exchange](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "object_phoneCallRequested_param_protocol_type_PhoneCallProtocol": "Call protocol info to be passed to libtgvoip",
    "object_decryptedMessageMediaWebPage": "Webpage preview",
    "object_decryptedMessageMediaWebPage_param_url_type_string": "URL of webpage",
    "object_messageExtendedMedia": "Extended media",
    "object_messageExtendedMedia_param_media_type_MessageMedia": "Media",
    "object_reactionCount": "Reactions",
    "object_reactionCount_param_chosen_order_type_flags.0?int": "If set, indicates that the current user also sent this reaction. <br>The integer value indicates when was the reaction added: the bigger the value, the newer the reaction.",
    "object_reactionCount_param_reaction_type_Reaction": "Reaction (a UTF8 emoji)",
    "object_reactionCount_param_count_type_int": "NUmber of users that reacted with this emoji",
    "object_channelForbidden": "Indicates a channel\/supergroup we can't access because we were banned, or for some other reason.",
    "object_channelForbidden_param_broadcast_type_flags.5?true": "Is this a channel",
    "object_channelForbidden_param_megagroup_type_flags.8?true": "Is this a supergroup",
    "object_channelForbidden_param_id_type_long": "Channel ID",
    "object_channelForbidden_param_access_hash_type_long": "Access hash",
    "object_channelForbidden_param_title_type_string": "Title",
    "object_channelForbidden_param_until_date_type_flags.16?int": "The ban is valid until the specified date",
    "object_updateBotChatInviteRequester": "Someone has requested to join a chat or channel (bots only, users will receive an [updatePendingJoinRequests](..\/constructors\/updatePendingJoinRequests.md), instead)",
    "object_updateBotChatInviteRequester_param_peer_type_Peer": "The chat or channel in question",
    "object_updateBotChatInviteRequester_param_date_type_int": "When was the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) made",
    "object_updateBotChatInviteRequester_param_user_id_type_long": "The user ID that is asking to join the chat or channel",
    "object_updateBotChatInviteRequester_param_about_type_string": "Bio of the user",
    "object_updateBotChatInviteRequester_param_invite_type_ExportedChatInvite": "Chat invite link that was used by the user to send the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "object_updateBotChatInviteRequester_param_qts_type_int": "[QTS](https:\/\/core.telegram.org\/api\/updates) event sequence identifier",
    "object_updateDraftMessage": "Notifies a change of a message [draft](https:\/\/core.telegram.org\/api\/drafts).",
    "object_updateDraftMessage_param_peer_type_Peer": "The peer to which the draft is associated",
    "object_updateDraftMessage_param_top_msg_id_type_flags.0?int": "ID of the [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) to which the draft is associated",
    "object_updateDraftMessage_param_draft_type_DraftMessage": "The draft",
    "object_inputMessageCallbackQuery": "Used by bots for fetching information about the message that originated a callback query",
    "object_inputMessageCallbackQuery_param_id_type_int": "Message ID",
    "object_inputMessageCallbackQuery_param_query_id_type_long": "Callback query ID",
    "object_chatForbidden": "A group to which the user has no access. E.g., because the user was kicked from the group.",
    "object_chatForbidden_param_id_type_long": "User identifier",
    "object_chatForbidden_param_title_type_string": "Group name",
    "object_channelAdminLogEventActionDeleteTopic": "A [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) was deleted",
    "object_channelAdminLogEventActionDeleteTopic_param_topic_type_ForumTopic": "The [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) that was deleted",
    "object_account.chatThemes": "Available chat themes",
    "object_account.chatThemes_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_account.chatThemes_param_themes_type_Vector<ChatTheme>": "Available chat themes",
    "object_contacts.found": "Users found by name substring and auxiliary data.",
    "object_contacts.found_param_my_results_type_Vector<Peer>": "Personalized results",
    "object_contacts.found_param_results_type_Vector<Peer>": "List of found user identifiers",
    "object_contacts.found_param_chats_type_Vector<Chat>": "Found chats",
    "object_contacts.found_param_users_type_Vector<User>": "List of users",
    "object_emojiURL": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
    "object_emojiURL_param_url_type_string": "An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
    "object_inlineQueryPeerTypeSameBotPM": "Peer type: private chat with the bot itself",
    "object_inputMediaDocumentExternal": "Document that will be downloaded by the telegram servers",
    "object_inputMediaDocumentExternal_param_spoiler_type_flags.1?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaDocumentExternal_param_url_type_string": "URL of the document",
    "object_inputMediaDocumentExternal_param_ttl_seconds_type_flags.0?int": "Self-destruct time to live of document",
    "object_messageActionGroupCall": "The group call has ended",
    "object_messageActionGroupCall_param_call_type_InputGroupCall": "Group call",
    "object_messageActionGroupCall_param_duration_type_flags.0?int": "Group call duration",
    "object_defaultHistoryTTL": "Contains info about the default value of the Time-To-Live setting, applied to all new chats.",
    "object_defaultHistoryTTL_param_period_type_int": "Time-To-Live setting applied to all new chats.",
    "object_inputMessagesFilterMusic": "Return only messages containing audio files",
    "object_recentMeUrlStickerSet": "Recent t.me stickerset installation URL",
    "object_recentMeUrlStickerSet_param_url_type_string": "t.me URL",
    "object_recentMeUrlStickerSet_param_set_type_StickerSetCovered": "Stickerset",
    "object_updateUserEmojiStatus": "The [emoji status](https:\/\/core.telegram.org\/api\/emoji-status) of a certain user has changed",
    "object_updateUserEmojiStatus_param_user_id_type_long": "User ID",
    "object_updateUserEmojiStatus_param_emoji_status_type_EmojiStatus": "New [emoji status](https:\/\/core.telegram.org\/api\/emoji-status)",
    "object_messages.foundStickerSetsNotModified": "No further results were found",
    "object_photos.photo": "Photo with auxiliary data.",
    "object_photos.photo_param_photo_type_Photo": "Photo",
    "object_photos.photo_param_users_type_Vector<User>": "Users",
    "object_userStatusEmpty": "User status has not been set yet.",
    "object_contacts.contacts": "The current user's contact list and info on users.",
    "object_contacts.contacts_param_contacts_type_Vector<Contact>": "Contact list",
    "object_contacts.contacts_param_saved_count_type_int": "Number of contacts that were saved successfully",
    "object_contacts.contacts_param_users_type_Vector<User>": "User list",
    "object_attachMenuBots": "Represents a list of [bot web apps that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBots_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_attachMenuBots_param_bots_type_Vector<AttachMenuBot>": "List of [bot web apps that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBots_param_users_type_Vector<User>": "Info about related users\/bots",
    "object_chatPhoto": "Group profile photo.",
    "object_chatPhoto_param_has_video_type_flags.0?true": "Whether the user has an animated profile picture",
    "object_chatPhoto_param_photo_id_type_long": "Photo ID",
    "object_chatPhoto_param_stripped_thumb_type_flags.1?bytes": "[Stripped thumbnail](https:\/\/core.telegram.org\/api\/files#stripped-thumbnails)",
    "object_chatPhoto_param_dc_id_type_int": "DC where this photo is stored",
    "object_inputPeerEmpty": "An empty constructor, no user or chat is defined.",
    "object_folder": "Folder",
    "object_folder_param_autofill_new_broadcasts_type_flags.0?true": "Automatically add new channels to this folder",
    "object_folder_param_autofill_public_groups_type_flags.1?true": "Automatically add joined new public supergroups to this folder",
    "object_folder_param_autofill_new_correspondents_type_flags.2?true": "Automatically add new private chats to this folder",
    "object_folder_param_id_type_int": "Folder ID",
    "object_folder_param_title_type_string": "Folder title",
    "object_folder_param_photo_type_flags.3?ChatPhoto": "Folder picture",
    "object_updateRecentReactions": "The list of recent [message reactions](https:\/\/core.telegram.org\/api\/reactions) has changed",
    "object_messageActionWebViewDataSentMe": "Data from an opened [reply keyboard bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps) was relayed to the bot that owns it (bot side service message).",
    "object_messageActionWebViewDataSentMe_param_text_type_string": "Text of the [keyboardButtonSimpleWebView](..\/constructors\/keyboardButtonSimpleWebView.md) that was pressed to open the web app.",
    "object_messageActionWebViewDataSentMe_param_data_type_string": "Relayed data.",
    "object_textFixed": "`fixed-width` rich text",
    "object_textFixed_param_text_type_RichText": "Text",
    "object_updateDeleteScheduledMessages": "Some [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages) were deleted from the schedule queue of a chat",
    "object_updateDeleteScheduledMessages_param_peer_type_Peer": "Peer",
    "object_updateDeleteScheduledMessages_param_messages_type_Vector<int>": "Deleted scheduled messages",
    "object_chatInviteExported": "Exported chat invite",
    "object_chatInviteExported_param_revoked_type_flags.0?true": "Whether this chat invite was revoked",
    "object_chatInviteExported_param_permanent_type_flags.5?true": "Whether this chat invite has no expiration",
    "object_chatInviteExported_param_request_needed_type_flags.6?true": "Whether users importing this invite link will have to be approved to join the channel or group",
    "object_chatInviteExported_param_link_type_string": "Chat invitation link",
    "object_chatInviteExported_param_admin_id_type_long": "ID of the admin that created this chat invite",
    "object_chatInviteExported_param_date_type_int": "When was this chat invite created",
    "object_chatInviteExported_param_start_date_type_flags.4?int": "When was this chat invite last modified",
    "object_chatInviteExported_param_expire_date_type_flags.1?int": "When does this chat invite expire",
    "object_chatInviteExported_param_usage_limit_type_flags.2?int": "Maximum number of users that can join using this link",
    "object_chatInviteExported_param_usage_type_flags.3?int": "How many users joined using this link",
    "object_chatInviteExported_param_requested_type_flags.7?int": "Number of users that have already used this link to join",
    "object_chatInviteExported_param_title_type_flags.8?string": "Custom description for the invite link, visible only to admins",
    "object_messageMediaPhoto": "Attached photo.",
    "object_messageMediaPhoto_param_spoiler_type_flags.3?true": "Whether this media should be hidden behind a spoiler warning",
    "object_messageMediaPhoto_param_photo_type_flags.0?Photo": "Photo",
    "object_messageMediaPhoto_param_ttl_seconds_type_flags.2?int": "Time to live in seconds of self-destructing photo",
    "object_storage.fileJpeg": "JPEG image. MIME type: `image\/jpeg`.",
    "object_inputReportReasonPersonalDetails": "Report for divulgation of personal details",
    "object_updateBotCallbackQuery": "A callback button was pressed, and the button data was sent to the bot that created the button",
    "object_updateBotCallbackQuery_param_query_id_type_long": "Query ID",
    "object_updateBotCallbackQuery_param_user_id_type_long": "ID of the user that pressed the button",
    "object_updateBotCallbackQuery_param_peer_type_Peer": "Chat where the inline keyboard was sent",
    "object_updateBotCallbackQuery_param_msg_id_type_int": "Message ID",
    "object_updateBotCallbackQuery_param_chat_instance_type_long": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
    "object_updateBotCallbackQuery_param_data_type_flags.0?bytes": "Callback data",
    "object_updateBotCallbackQuery_param_game_short_name_type_flags.1?string": "Short name of a Game to be returned, serves as the unique identifier for the game",
    "object_inputPhotoFileLocation": "Use this object to download a photo with [upload.getFile](..\/methods\/upload.getFile.md) method",
    "object_inputPhotoFileLocation_param_id_type_long": "Photo ID, obtained from the [photo](..\/constructors\/photo.md) object",
    "object_inputPhotoFileLocation_param_access_hash_type_long": "Photo's access hash, obtained from the [photo](..\/constructors\/photo.md) object",
    "object_inputPhotoFileLocation_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_inputPhotoFileLocation_param_thumb_size_type_string": "The [PhotoSize](..\/types\/PhotoSize.md) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](..\/constructors\/photo.md)",
    "object_updateUserName": "Changes the user's first name, last name and username.",
    "object_updateUserName_param_user_id_type_long": "User identifier",
    "object_updateUserName_param_first_name_type_string": "New first name. Corresponds to the new value of **real\\_first\\_name** field of the [userFull](..\/constructors\/userFull.md) constructor.",
    "object_updateUserName_param_last_name_type_string": "New last name. Corresponds to the new value of **real\\_last\\_name** field of the [userFull](..\/constructors\/userFull.md) constructor.",
    "object_updateUserName_param_usernames_type_Vector<Username>": "Usernames.",
    "object_updateRecentEmojiStatuses": "The list of recent [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status) has changed",
    "object_storage.fileGif": "GIF image. MIME type: `image\/gif`.",
    "object_messages.emojiGroups": "Represents a list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories).",
    "object_messages.emojiGroups_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.emojiGroups_param_groups_type_Vector<EmojiGroup>": "A list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories).",
    "object_messageActionGiftPremium": "Info about a gifted Telegram Premium subscription",
    "object_messageActionGiftPremium_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_messageActionGiftPremium_param_amount_type_long": "Price of the gift in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_messageActionGiftPremium_param_months_type_int": "Duration of the gifted Telegram Premium subscription",
    "object_messageActionGiftPremium_param_crypto_currency_type_flags.0?string": "If the gift was bought using a cryptocurrency, the cryptocurrency name.",
    "object_messageActionGiftPremium_param_crypto_amount_type_flags.0?long": "If the gift was bought using a cryptocurrency, price of the gift in the smallest units of a cryptocurrency.",
    "object_messages.botApp": "Contains information about a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps)",
    "object_messages.botApp_param_inactive_type_flags.0?true": "Whether the web app was never used by the user, and confirmation must be asked from the user before opening it.",
    "object_messages.botApp_param_request_write_access_type_flags.1?true": "The bot is asking permission to send messages to the user: if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](..\/methods\/messages.requestAppWebView.md).",
    "object_messages.botApp_param_app_type_BotApp": "Bot app information",
    "object_inputMessagesFilterDocument": "Filter for messages containing documents.",
    "object_inputMessagesFilterChatPhotos": "Return only chat photo changes",
    "object_updateDialogUnreadMark": "The manual unread mark of a chat was changed",
    "object_updateDialogUnreadMark_param_unread_type_flags.0?true": "Was the chat marked or unmarked as read",
    "object_updateDialogUnreadMark_param_peer_type_DialogPeer": "The dialog",
    "object_inputChatPhotoEmpty": "Empty constructor, remove group photo.",
    "object_secureValueTypeTemporaryRegistration": "Temporary registration",
    "object_keyboardButtonCallback": "Callback button",
    "object_keyboardButtonCallback_param_requires_password_type_flags.0?true": "Whether the user should verify his identity by entering his [2FA SRP parameters](https:\/\/core.telegram.org\/api\/srp) to the [messages.getBotCallbackAnswer](..\/methods\/messages.getBotCallbackAnswer.md) method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to [SRP](https:\/\/core.telegram.org\/api\/srp). This button is mainly used by the official [@botfather](https:\/\/t.me\/botfather) bot, for verifying the user's identity before transferring ownership of a bot to another user.",
    "object_keyboardButtonCallback_param_text_type_string": "Button text",
    "object_keyboardButtonCallback_param_data_type_bytes": "Callback data",
    "object_sendMessageHistoryImportAction": "Chat history is being imported",
    "object_sendMessageHistoryImportAction_param_progress_type_int": "Progress percentage",
    "object_updatePhoneCall": "An incoming phone call",
    "object_updatePhoneCall_param_phone_call_type_PhoneCall": "Phone call",
    "object_channelAdminLogEventActionParticipantVolume": "channelAdminLogEvent.user\\_id has set the volume of participant.peer to participant.volume",
    "object_channelAdminLogEventActionParticipantVolume_param_participant_type_GroupCallParticipant": "The participant whose volume was changed",
    "object_game": "Indicates an already sent game",
    "object_game_param_id_type_long": "ID of the game",
    "object_game_param_access_hash_type_long": "Access hash of the game",
    "object_game_param_short_name_type_string": "Short name for the game",
    "object_game_param_title_type_string": "Title of the game",
    "object_game_param_description_type_string": "Game description",
    "object_game_param_photo_type_Photo": "Game preview",
    "object_game_param_document_type_flags.0?Document": "Optional attached document",
    "object_updateChannelUserTyping": "A user is typing in a [supergroup, channel](https:\/\/core.telegram.org\/api\/channel) or [message thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_updateChannelUserTyping_param_channel_id_type_long": "Channel ID",
    "object_updateChannelUserTyping_param_top_msg_id_type_flags.0?int": "[Thread ID](https:\/\/core.telegram.org\/api\/threads)",
    "object_updateChannelUserTyping_param_from_id_type_Peer": "The peer that is typing",
    "object_updateChannelUserTyping_param_action_type_SendMessageAction": "Whether the user is typing, sending a media or doing something else",
    "object_secureValueErrorTranslationFile": "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.",
    "object_secureValueErrorTranslationFile_param_type_type_SecureValueType": "One of [secureValueTypePersonalDetails](..\/constructors\/secureValueTypePersonalDetails.md), [secureValueTypePassport](..\/constructors\/secureValueTypePassport.md), [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](..\/constructors\/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](..\/constructors\/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](..\/constructors\/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](..\/constructors\/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](..\/constructors\/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](..\/constructors\/secureValueTypeTemporaryRegistration.md)",
    "object_secureValueErrorTranslationFile_param_file_hash_type_bytes": "File hash",
    "object_secureValueErrorTranslationFile_param_text_type_string": "Error message",
    "object_emojiStatusUntil": "An [emoji status](https:\/\/core.telegram.org\/api\/emoji-status) valid until the specified date",
    "object_emojiStatusUntil_param_document_id_type_long": "[Custom emoji document ID](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "object_emojiStatusUntil_param_until_type_int": "This status is valid until this date",
    "object_updateLangPackTooLong": "A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](..\/methods\/langpack.getDifference.md)",
    "object_updateLangPackTooLong_param_lang_code_type_string": "Language code",
    "object_decryptedMessageMediaGeoPoint": "GeoPoint attached to an encrypted message.",
    "object_decryptedMessageMediaGeoPoint_param_lat_type_double": "Latitude of point",
    "object_decryptedMessageMediaGeoPoint_param_long_type_double": "Longitude of point",
    "object_sendMessageChooseContactAction": "User is selecting a contact to share.",
    "object_keyboardButtonRequestGeoLocation": "Button to request a user's geolocation",
    "object_keyboardButtonRequestGeoLocation_param_text_type_string": "Button text",
    "object_auth.sentCodeTypeSetUpEmailRequired": "The user should add and verify an email address in order to login as described [here \u00bb](https:\/\/core.telegram.org\/api\/auth#email-verification).",
    "object_auth.sentCodeTypeSetUpEmailRequired_param_apple_signin_allowed_type_flags.0?true": "Whether authorization through Apple ID is allowed",
    "object_auth.sentCodeTypeSetUpEmailRequired_param_google_signin_allowed_type_flags.1?true": "Whether authorization through Google ID is allowed",
    "object_updateStickerSetsOrder": "The order of stickersets was changed",
    "object_updateStickerSetsOrder_param_masks_type_flags.0?true": "Whether the updated stickers are mask stickers",
    "object_updateStickerSetsOrder_param_emojis_type_flags.1?true": "Whether the updated stickers are custom emoji stickers",
    "object_updateStickerSetsOrder_param_order_type_Vector<long>": "New sticker order by sticker ID",
    "object_messageActionChatDeleteUser": "User left the group.",
    "object_messageActionChatDeleteUser_param_user_id_type_long": "Leaving user ID",
    "object_labeledPrice": "This object represents a portion of the price for goods or services.",
    "object_labeledPrice_param_label_type_string": "Portion label",
    "object_labeledPrice_param_amount_type_long": "Price of the product in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_inlineQueryPeerTypePM": "Peer type: private chat",
    "object_botApp": "Contains information about a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps).",
    "object_botApp_param_id_type_long": "Bot web app ID",
    "object_botApp_param_access_hash_type_long": "Bot web app access hash",
    "object_botApp_param_short_name_type_string": "Bot web app short name, used to generate [named bot web app deep links](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links).",
    "object_botApp_param_title_type_string": "Bot web app title.",
    "object_botApp_param_description_type_string": "Bot web app description.",
    "object_botApp_param_photo_type_Photo": "Bot web app photo.",
    "object_botApp_param_document_type_flags.0?Document": "Bot web app animation.",
    "object_botApp_param_hash_type_long": "Hash to pass to [messages.getBotApp](..\/methods\/messages.getBotApp.md), to avoid refetching bot app info if it hasn't changed.",
    "object_messageActionWebViewDataSent": "Data from an opened [reply keyboard bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps) was relayed to the bot that owns it (user side service message).\n\nClients should display a service message with the text `Data from the \u00ab$text\u00bb button was transferred to the bot.`",
    "object_messageActionWebViewDataSent_param_text_type_string": "Text of the [keyboardButtonSimpleWebView](..\/constructors\/keyboardButtonSimpleWebView.md) that was pressed to open the web app.",
    "object_inputMessagesFilterVoice": "Return only messages containing voice notes",
    "object_postAddress": "Shipping address",
    "object_postAddress_param_street_line1_type_string": "First line for the address",
    "object_postAddress_param_street_line2_type_string": "Second line for the address",
    "object_postAddress_param_city_type_string": "City",
    "object_postAddress_param_state_type_string": "State, if applicable (empty otherwise)",
    "object_postAddress_param_country_iso2_type_string": "ISO 3166-1 alpha-2 country code",
    "object_postAddress_param_post_code_type_string": "Address post code",
    "object_messageActionSuggestProfilePhoto": "A new profile picture was suggested using [photos.uploadContactProfilePhoto](..\/methods\/photos.uploadContactProfilePhoto.md).",
    "object_messageActionSuggestProfilePhoto_param_photo_type_Photo": "The photo that the user suggested we set as profile picture.",
    "object_channelParticipantsRecent": "Fetch only recent participants",
    "object_messages.reactionsNotModified": "The server-side list of [message reactions](https:\/\/core.telegram.org\/api\/reactions) hasn't changed",
    "object_keyboardButtonSimpleWebView": "Button to open a [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps) using [messages.requestSimpleWebView](..\/methods\/messages.requestSimpleWebView.md), without sending user information to the web app.\n\nCan only be sent or received as part of a reply keyboard, use [keyboardButtonWebView](..\/constructors\/keyboardButtonWebView.md) for inline keyboards.",
    "object_keyboardButtonSimpleWebView_param_text_type_string": "Button text",
    "object_keyboardButtonSimpleWebView_param_url_type_string": "[Web app URL](https:\/\/core.telegram.org\/api\/bots\/webapps)",
    "object_privacyKeyPhoneNumber": "Whether the user allows us to see his phone number",
    "object_updateChat": "A new chat is available",
    "object_updateChat_param_chat_id_type_long": "Chat ID",
    "object_updateReadHistoryOutbox": "Outgoing messages were read",
    "object_updateReadHistoryOutbox_param_peer_type_Peer": "Peer",
    "object_updateReadHistoryOutbox_param_max_id_type_int": "Maximum ID of read outgoing messages",
    "object_updateReadHistoryOutbox_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateReadHistoryOutbox_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateReadFeaturedEmojiStickers": "Some featured [custom emoji stickers](https:\/\/core.telegram.org\/api\/custom-emoji) were marked as read",
    "object_inputPhoneContact": "Phone contact.",
    "object_inputPhoneContact_param_client_id_type_long": "An arbitrary 64-bit integer: it should be set, for example, to an incremental number when using [contacts.importContacts](..\/methods\/contacts.importContacts.md), in order to retry importing only the contacts that weren't imported successfully, according to the client\\_ids returned in [contacts.importedContacts](..\/constructors\/contacts.importedContacts.md).`retry_contacts`.",
    "object_inputPhoneContact_param_phone_type_string": "Phone number",
    "object_inputPhoneContact_param_first_name_type_string": "Contact's first name",
    "object_inputPhoneContact_param_last_name_type_string": "Contact's last name",
    "object_inputPrivacyKeyVoiceMessages": "Whether people can send you voice messages",
    "object_updatePeerLocated": "List of peers near you was updated",
    "object_updatePeerLocated_param_peers_type_Vector<PeerLocated>": "Geolocated peer list update",
    "object_botCommandScopePeerUser": "The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https:\/\/core.telegram.org\/api\/channel).",
    "object_botCommandScopePeerUser_param_peer_type_InputPeer": "The chat",
    "object_botCommandScopePeerUser_param_user_id_type_InputUser": "The user",
    "object_inputPrivacyKeyPhoneCall": "Whether you will accept phone calls",
    "object_inputPhotoEmpty": "Empty constructor.",
    "object_chatlists.exportedChatlistInvite": "Info about an exported [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatlists.exportedChatlistInvite_param_filter_type_DialogFilter": "Folder ID",
    "object_chatlists.exportedChatlistInvite_param_invite_type_ExportedChatlistInvite": "The exported [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_emailVerifyPurposeLoginSetup": "Email verification purpose: setup login email",
    "object_emailVerifyPurposeLoginSetup_param_phone_number_type_string": "Phone number",
    "object_emailVerifyPurposeLoginSetup_param_phone_code_hash_type_string": "Phone code hash as specified by the [documentation](https:\/\/core.telegram.org\/api\/auth#email-verification)",
    "object_attachMenuPeerTypePM": "The bot attachment menu entry is available in private chats with other users (not bots)",
    "object_inputPrivacyKeyProfilePhoto": "Whether people will be able to see your profile picture",
    "object_auth.passwordRecovery": "Recovery info of a [2FA password](https:\/\/core.telegram.org\/api\/srp), only for accounts with a [recovery email configured](https:\/\/core.telegram.org\/api\/srp#email-verification).",
    "object_auth.passwordRecovery_param_email_pattern_type_string": "The email to which the recovery code was sent must match this [pattern](https:\/\/core.telegram.org\/api\/pattern).",
    "object_statsURL": "URL with chat statistics",
    "object_statsURL_param_url_type_string": "Chat statistics",
    "object_secureValueTypeEmail": "Email",
    "object_messages.recentStickersNotModified": "No new recent sticker was found",
    "object_textItalic": "*Italic* text",
    "object_textItalic_param_text_type_RichText": "Text",
    "object_messageEntityPhone": "Message entity representing a phone number.",
    "object_messageEntityPhone_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityPhone_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_sendMessageUploadRoundAction": "User is uploading a round video",
    "object_sendMessageUploadRoundAction_param_progress_type_int": "Progress percentage",
    "object_updateReadFeaturedStickers": "Some featured stickers were marked as read",
    "object_keyboardButtonRow": "Inline keyboard row",
    "object_keyboardButtonRow_param_buttons_type_Vector<KeyboardButton>": "Bot or inline keyboard buttons",
    "object_inputBotAppID": "Used to fetch information about a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps) by its ID",
    "object_inputBotAppID_param_id_type_long": "[named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps) ID.",
    "object_inputBotAppID_param_access_hash_type_long": "Access hash, obtained from the [botApp](..\/constructors\/botApp.md) constructor.",
    "object_updateStickerSets": "Installed stickersets have changed, the client should refetch them as [described in the docs](https:\/\/core.telegram.org\/api\/stickers#installing-stickersets).",
    "object_updateStickerSets_param_masks_type_flags.0?true": "Whether mask stickersets have changed",
    "object_updateStickerSets_param_emojis_type_flags.1?true": "Whether the list of installed [custom emoji stickersets](https:\/\/core.telegram.org\/api\/custom-emoji) has changed",
    "object_channelAdminLogEvent": "Admin log event",
    "object_channelAdminLogEvent_param_id_type_long": "Event ID",
    "object_channelAdminLogEvent_param_date_type_int": "Date",
    "object_channelAdminLogEvent_param_user_id_type_long": "User ID",
    "object_channelAdminLogEvent_param_action_type_ChannelAdminLogEventAction": "Action",
    "object_messageActionGeoProximityReached": "A user of the chat is now in proximity of another user",
    "object_messageActionGeoProximityReached_param_from_id_type_Peer": "The user or chat that is now in proximity of `to_id`",
    "object_messageActionGeoProximityReached_param_to_id_type_Peer": "The user or chat that subscribed to [live geolocation proximity alerts](https:\/\/core.telegram.org\/api\/live-location#proximity-alert)",
    "object_messageActionGeoProximityReached_param_distance_type_int": "Distance, in meters (0-100000)",
    "object_updateEncryptedChatTyping": "Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing.",
    "object_updateEncryptedChatTyping_param_chat_id_type_int": "Chat ID",
    "object_privacyValueDisallowContacts": "Disallow only contacts",
    "object_channelAdminLogEventActionPinTopic": "A [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) was pinned or unpinned",
    "object_channelAdminLogEventActionPinTopic_param_prev_topic_type_flags.0?ForumTopic": "Previous topic information",
    "object_channelAdminLogEventActionPinTopic_param_new_topic_type_flags.1?ForumTopic": "New topic information",
    "object_inputChatlistDialogFilter": "Folder ID",
    "object_inputChatlistDialogFilter_param_filter_id_type_int": "[Folder](https:\/\/core.telegram.org\/api\/folders) ID",
    "object_pageBlockPhoto": "A photo",
    "object_pageBlockPhoto_param_photo_id_type_long": "Photo ID",
    "object_pageBlockPhoto_param_caption_type_PageCaption": "Caption",
    "object_pageBlockPhoto_param_url_type_flags.0?string": "HTTP URL of page the photo leads to when clicked",
    "object_pageBlockPhoto_param_webpage_id_type_flags.0?long": "ID of preview of the page the photo leads to when clicked",
    "object_contacts.topPeersNotModified": "Top peer info hasn't changed",
    "object_messages.allStickersNotModified": "Info about all installed stickers hasn't changed",
    "object_dialog": "Chat",
    "object_dialog_param_pinned_type_flags.2?true": "Is the dialog pinned",
    "object_dialog_param_unread_mark_type_flags.3?true": "Whether the chat was manually marked as unread",
    "object_dialog_param_peer_type_Peer": "The chat",
    "object_dialog_param_top_message_type_int": "The latest message ID",
    "object_dialog_param_read_inbox_max_id_type_int": "Position up to which all incoming messages are read.",
    "object_dialog_param_read_outbox_max_id_type_int": "Position up to which all outgoing messages are read.",
    "object_dialog_param_unread_count_type_int": "Number of unread messages",
    "object_dialog_param_unread_mentions_count_type_int": "Number of [unread mentions](https:\/\/core.telegram.org\/api\/mentions)",
    "object_dialog_param_unread_reactions_count_type_int": "Number of unread reactions to messages you sent",
    "object_dialog_param_notify_settings_type_PeerNotifySettings": "Notification settings",
    "object_dialog_param_pts_type_flags.0?int": "[PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_dialog_param_draft_type_flags.1?DraftMessage": "Message [draft](https:\/\/core.telegram.org\/api\/drafts)",
    "object_dialog_param_folder_id_type_flags.4?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_dialog_param_ttl_period_type_flags.5?int": "Time-to-live of all messages sent in this dialog",
    "object_dialogPeer": "Peer",
    "object_dialogPeer_param_peer_type_Peer": "Peer",
    "object_messageActionChatDeletePhoto": "Group profile photo removed.",
    "object_inputNotifyUsers": "Notifications generated by all users.",
    "object_payments.exportedInvoice": "Exported [invoice deep link](https:\/\/core.telegram.org\/api\/links#invoice-links)",
    "object_payments.exportedInvoice_param_url_type_string": "Exported [invoice deep link](https:\/\/core.telegram.org\/api\/links#invoice-links)",
    "object_phone.groupParticipants": "Info about the participants of a group call or livestream",
    "object_phone.groupParticipants_param_count_type_int": "Number of participants",
    "object_phone.groupParticipants_param_participants_type_Vector<GroupCallParticipant>": "List of participants",
    "object_phone.groupParticipants_param_next_offset_type_string": "If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as `offset` in [phone.getGroupParticipants](..\/methods\/phone.getGroupParticipants.md).",
    "object_phone.groupParticipants_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_phone.groupParticipants_param_users_type_Vector<User>": "Mentioned users",
    "object_phone.groupParticipants_param_version_type_int": "Version info",
    "object_videoSize": "An [animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) in MPEG4 format",
    "object_videoSize_param_type_type_string": "`u` for animated profile pictures, and `v` for trimmed and downscaled video previews",
    "object_videoSize_param_w_type_int": "Video width",
    "object_videoSize_param_h_type_int": "Video height",
    "object_videoSize_param_size_type_int": "File size",
    "object_videoSize_param_video_start_ts_type_flags.0?double": "Timestamp that should be shown as static preview to the user (seconds)",
    "object_forumTopicDeleted": "Represents a deleted forum topic.",
    "object_forumTopicDeleted_param_id_type_int": "The ID of the deleted forum topic.",
    "object_inputStickerSetItem": "Sticker in a stickerset",
    "object_inputStickerSetItem_param_document_type_InputDocument": "The sticker",
    "object_inputStickerSetItem_param_emoji_type_string": "Associated emoji",
    "object_inputStickerSetItem_param_mask_coords_type_flags.0?MaskCoords": "Coordinates for mask sticker",
    "object_inputStickerSetItem_param_keywords_type_flags.1?string": "Set of keywords, separated by commas (can't be provided for mask stickers)",
    "object_phoneConnection": "Identifies an endpoint that can be used to connect to the other user in a phone call",
    "object_phoneConnection_param_tcp_type_flags.0?true": "Whether TCP should be used",
    "object_phoneConnection_param_id_type_long": "Endpoint ID",
    "object_phoneConnection_param_ip_type_string": "IP address of endpoint",
    "object_phoneConnection_param_ipv6_type_string": "IPv6 address of endpoint",
    "object_phoneConnection_param_port_type_int": "Port ID",
    "object_phoneConnection_param_peer_tag_type_bytes": "Our peer tag",
    "object_topPeerCategoryForwardUsers": "Users to which the users often forwards messages to",
    "object_inputPrivacyValueDisallowChatParticipants": "Disallow only participants of certain chats",
    "object_inputPrivacyValueDisallowChatParticipants_param_chats_type_Vector<long>": "Disallowed chat IDs",
    "object_updateMessageID": "Sent message with **random\\_id** client identifier was assigned an identifier.",
    "object_updateMessageID_param_id_type_int": "**id** identifier of a respective [Message](..\/types\/Message.md)",
    "object_updateMessageID_param_random_id_type_long": "Previously transferred client **random\\_id** identifier",
    "object_webDocumentNoProxy": "Remote document that can be downloaded without [proxying through telegram](https:\/\/core.telegram.org\/api\/files)",
    "object_webDocumentNoProxy_param_url_type_string": "Document URL",
    "object_webDocumentNoProxy_param_size_type_int": "File size",
    "object_webDocumentNoProxy_param_mime_type_type_string": "MIME type",
    "object_webDocumentNoProxy_param_attributes_type_Vector<DocumentAttribute>": "Attributes for media types",
    "object_webViewMessageSent": "Info about a sent inline webview message",
    "object_webViewMessageSent_param_msg_id_type_flags.0?InputBotInlineMessageID": "Message ID",
    "object_updatePeerHistoryTTL": "The Time-To-Live for messages sent by the current user in a specific chat has changed",
    "object_updatePeerHistoryTTL_param_peer_type_Peer": "The chat",
    "object_updatePeerHistoryTTL_param_ttl_period_type_flags.0?int": "The new Time-To-Live",
    "object_messageActionGroupCallScheduled": "A group call was scheduled",
    "object_messageActionGroupCallScheduled_param_call_type_InputGroupCall": "The group call",
    "object_messageActionGroupCallScheduled_param_schedule_date_type_int": "When is this group call scheduled to start",
    "object_messages.affectedFoundMessages": "Messages found and affected by changes",
    "object_messages.affectedFoundMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.affectedFoundMessages_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.affectedFoundMessages_param_offset_type_int": "If bigger than zero, the request must be repeated to remove more messages",
    "object_messages.affectedFoundMessages_param_messages_type_Vector<int>": "Affected message IDs",
    "object_updateLoginToken": "A login token (for login via QR code) was accepted.",
    "object_documentEmpty": "Empty constructor, document doesn't exist.",
    "object_documentEmpty_param_id_type_long": "Document ID or `0`",
    "object_updatesTooLong": "Too many updates, it is necessary to execute [updates.getDifference](..\/methods\/updates.getDifference.md).",
    "object_secureValueErrorReverseSide": "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.",
    "object_secureValueErrorReverseSide_param_type_type_SecureValueType": "One of [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md)",
    "object_secureValueErrorReverseSide_param_file_hash_type_bytes": "File hash",
    "object_secureValueErrorReverseSide_param_text_type_string": "Error message",
    "object_encryptedMessage": "Encrypted message.",
    "object_encryptedMessage_param_random_id_type_long": "Random message ID, assigned by the author of message",
    "object_encryptedMessage_param_chat_id_type_int": "ID of encrypted chat",
    "object_encryptedMessage_param_date_type_int": "Date of sending",
    "object_encryptedMessage_param_bytes_type_bytes": "TL-serialization of [DecryptedMessage](..\/types\/DecryptedMessage.md) type, encrypted with the key created at chat initialization",
    "object_encryptedMessage_param_file_type_EncryptedFile": "Attached encrypted file",
    "object_invoice": "Invoice",
    "object_invoice_param_test_type_flags.0?true": "Test invoice",
    "object_invoice_param_name_requested_type_flags.1?true": "Set this flag if you require the user's full name to complete the order",
    "object_invoice_param_phone_requested_type_flags.2?true": "Set this flag if you require the user's phone number to complete the order",
    "object_invoice_param_email_requested_type_flags.3?true": "Set this flag if you require the user's email address to complete the order",
    "object_invoice_param_shipping_address_requested_type_flags.4?true": "Set this flag if you require the user's shipping address to complete the order",
    "object_invoice_param_flexible_type_flags.5?true": "Set this flag if the final price depends on the shipping method",
    "object_invoice_param_phone_to_provider_type_flags.6?true": "Set this flag if user's phone number should be sent to provider",
    "object_invoice_param_email_to_provider_type_flags.7?true": "Set this flag if user's email address should be sent to provider",
    "object_invoice_param_recurring_type_flags.9?true": "Whether this is a recurring payment",
    "object_invoice_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_invoice_param_prices_type_Vector<LabeledPrice>": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
    "object_invoice_param_max_tip_amount_type_flags.8?long": "The maximum accepted amount for tips in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_invoice_param_suggested_tip_amounts_type_flags.8?Vector<long>": "A vector of suggested amounts of tips in the *smallest units* of the currency (integer, not float\/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`.",
    "object_invoice_param_recurring_terms_url_type_flags.9?string": "Terms of service URL for the recurring payment",
    "object_updateReadChannelOutbox": "Outgoing messages in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) were read",
    "object_updateReadChannelOutbox_param_channel_id_type_long": "Channel\/supergroup ID",
    "object_updateReadChannelOutbox_param_max_id_type_int": "Position up to which all outgoing messages are read.",
    "object_channelAdminLogEventActionToggleSignatures": "Channel signatures were enabled\/disabled",
    "object_channelAdminLogEventActionToggleSignatures_param_new_value_type_Bool": "New value",
    "object_stickerSetNoCovered": "Just the stickerset information, with no previews.",
    "object_stickerSetNoCovered_param_set_type_StickerSet": "Stickerset information.",
    "object_botInlineMessageMediaVenue": "Send a venue",
    "object_botInlineMessageMediaVenue_param_geo_type_GeoPoint": "Geolocation of venue",
    "object_botInlineMessageMediaVenue_param_title_type_string": "Venue name",
    "object_botInlineMessageMediaVenue_param_address_type_string": "Address",
    "object_botInlineMessageMediaVenue_param_provider_type_string": "Venue provider: currently only \"foursquare\" needs to be supported",
    "object_botInlineMessageMediaVenue_param_venue_id_type_string": "Venue ID in the provider's database",
    "object_botInlineMessageMediaVenue_param_venue_type_type_string": "Venue type in the provider's database",
    "object_botInlineMessageMediaVenue_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_storage.filePdf": "PDF document image. MIME type: `application\/pdf`.",
    "object_inputMessagesFilterPinned": "Fetch only pinned messages",
    "object_botCommandScopePeer": "The specified bot commands will be valid only in a specific dialog.",
    "object_botCommandScopePeer_param_peer_type_InputPeer": "The dialog",
    "object_inputPaymentCredentialsGooglePay": "Google Pay payment credentials",
    "object_inputPaymentCredentialsGooglePay_param_payment_token_type_DataJSON": "Payment token",
    "object_decryptedMessageActionCommitKey": "Commit new key, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_decryptedMessageActionCommitKey_param_exchange_id_type_long": "Exchange ID, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_decryptedMessageActionCommitKey_param_key_fingerprint_type_long": "Key fingerprint, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_updatePeerSettings": "Settings of a certain peer have changed",
    "object_updatePeerSettings_param_peer_type_Peer": "The peer",
    "object_updatePeerSettings_param_settings_type_PeerSettings": "Associated peer settings",
    "object_channelAdminLogEventActionStopPoll": "A poll was stopped",
    "object_channelAdminLogEventActionStopPoll_param_message_type_Message": "The poll that was stopped",
    "object_inputReportReasonViolence": "Report for violence",
    "object_inputCheckPasswordEmpty": "There is no password",
    "object_updateChannelParticipant": "A participant has left, joined, was banned or admined in a [channel or supergroup](https:\/\/core.telegram.org\/api\/channel).",
    "object_updateChannelParticipant_param_via_chatlist_type_flags.3?true": "Whether the participant joined using a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_updateChannelParticipant_param_channel_id_type_long": "Channel ID",
    "object_updateChannelParticipant_param_date_type_int": "Date of the event",
    "object_updateChannelParticipant_param_actor_id_type_long": "User that triggered the change (inviter, admin that kicked the user, or the even the **user\\_id** itself)",
    "object_updateChannelParticipant_param_user_id_type_long": "User that was affected by the change",
    "object_updateChannelParticipant_param_prev_participant_type_flags.0?ChannelParticipant": "Previous participant status",
    "object_updateChannelParticipant_param_new_participant_type_flags.1?ChannelParticipant": "New participant status",
    "object_updateChannelParticipant_param_invite_type_flags.2?ExportedChatInvite": "Chat invite used to join the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_updateChannelParticipant_param_qts_type_int": "New **qts** value, see [updates \u00bb](https:\/\/core.telegram.org\/api\/updates) for more info.",
    "object_updateWebPage": "An [instant view](https:\/\/instantview.telegram.org) webpage preview was generated",
    "object_updateWebPage_param_webpage_type_WebPage": "Webpage preview",
    "object_updateWebPage_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateWebPage_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_textPlain": "Plain text",
    "object_textPlain_param_text_type_string": "Text",
    "object_messages.savedGifsNotModified": "No new saved gifs were found",
    "object_updates.state": "Updates state.",
    "object_updates.state_param_pts_type_int": "Number of events occurred in a text box",
    "object_updates.state_param_qts_type_int": "Position in a sequence of updates in secret chats. For further details refer to article [secret chats](https:\/\/core.telegram.org\/api\/end-to-end)",
    "object_updates.state_param_date_type_int": "Date of condition",
    "object_updates.state_param_seq_type_int": "Number of sent updates",
    "object_updates.state_param_unread_count_type_int": "Number of unread messages",
    "object_messageEntityHashtag": "**\\#hashtag** message entity",
    "object_messageEntityHashtag_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityHashtag_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_globalPrivacySettings": "Global privacy settings",
    "object_globalPrivacySettings_param_archive_and_mute_new_noncontact_peers_type_flags.0?Bool": "Whether to archive and mute new chats from non-contacts",
    "object_updateBotWebhookJSON": "A new incoming event; for bots only",
    "object_updateBotWebhookJSON_param_data_type_DataJSON": "The event",
    "object_messages.stickers": "Found stickers",
    "object_messages.stickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.stickers_param_stickers_type_Vector<Document>": "Stickers",
    "object_emojiStatus": "An [emoji status](https:\/\/core.telegram.org\/api\/emoji-status)",
    "object_emojiStatus_param_document_id_type_long": "[Custom emoji document ID](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "object_statsGraphError": "An error occurred while generating the [statistics graph](https:\/\/core.telegram.org\/api\/stats)",
    "object_statsGraphError_param_error_type_string": "The error",
    "object_sendMessageEmojiInteractionSeen": "User is watching an animated emoji reaction triggered by another user, [click here for more info \u00bb](https:\/\/core.telegram.org\/api\/animated-emojis#emoji-reactions).",
    "object_sendMessageEmojiInteractionSeen_param_emoticon_type_string": "Emoji",
    "object_simpleWebViewResultUrl": "Contains the webview URL with appropriate theme parameters added",
    "object_simpleWebViewResultUrl_param_url_type_string": "URL",
    "object_cdnConfig": "Configuration for [CDN](https:\/\/core.telegram.org\/cdn) file downloads.",
    "object_cdnConfig_param_public_keys_type_Vector<CdnPublicKey>": "Vector of public keys to use **only** during handshakes to [CDN](https:\/\/core.telegram.org\/cdn) DCs.",
    "object_auth.sentCodeTypeFragmentSms": "The code was delivered via [fragment.com](https:\/\/fragment.com).",
    "object_auth.sentCodeTypeFragmentSms_param_url_type_string": "Open the specified URL to log into [fragment.com](https:\/\/fragment.com) with the wallet that owns the specified phone number and view the code.",
    "object_auth.sentCodeTypeFragmentSms_param_length_type_int": "Length of the delivered code.",
    "object_phoneConnectionWebrtc": "WebRTC connection parameters",
    "object_phoneConnectionWebrtc_param_turn_type_flags.0?true": "Whether this is a TURN endpoint",
    "object_phoneConnectionWebrtc_param_stun_type_flags.1?true": "Whether this is a STUN endpoint",
    "object_phoneConnectionWebrtc_param_id_type_long": "Endpoint ID",
    "object_phoneConnectionWebrtc_param_ip_type_string": "IP address",
    "object_phoneConnectionWebrtc_param_ipv6_type_string": "IPv6 address",
    "object_phoneConnectionWebrtc_param_port_type_int": "Port",
    "object_phoneConnectionWebrtc_param_username_type_string": "Username",
    "object_phoneConnectionWebrtc_param_password_type_string": "Password",
    "object_inputChannelEmpty": "Represents the absence of a channel",
    "object_inputMediaContact": "Phone book contact",
    "object_inputMediaContact_param_phone_number_type_string": "Phone number",
    "object_inputMediaContact_param_first_name_type_string": "Contact's first name",
    "object_inputMediaContact_param_last_name_type_string": "Contact's last name",
    "object_inputMediaContact_param_vcard_type_string": "Contact vcard",
    "object_topPeerCategoryBotsPM": "Most used bots",
    "object_langPackStringDeleted": "Deleted localization string",
    "object_langPackStringDeleted_param_key_type_string": "Localization key",
    "object_replyInlineMarkup": "Bot or inline keyboard",
    "object_replyInlineMarkup_param_rows_type_Vector<KeyboardButtonRow>": "Bot or inline keyboard rows",
    "object_phoneCallDiscardReasonHangup": "The phone call was ended normally",
    "object_inputDocumentEmpty": "Empty constructor.",
    "object_privacyKeyChatInvite": "Whether the user can be invited to chats",
    "object_channelAdminLogEventActionTogglePreHistoryHidden": "The hidden prehistory setting was [changed](..\/methods\/channels.togglePreHistoryHidden.md)",
    "object_channelAdminLogEventActionTogglePreHistoryHidden_param_new_value_type_Bool": "New value",
    "object_dialogFilterDefault": "Used only when reordering folders to indicate the default (all chats) folder.",
    "object_inputPrivacyValueAllowUsers": "Allow only certain users",
    "object_inputPrivacyValueAllowUsers_param_users_type_Vector<InputUser>": "Allowed users",
    "object_account.takeout": "Takeout info",
    "object_account.takeout_param_id_type_long": "Takeout ID",
    "object_contacts.blocked": "Full list of blocked users.",
    "object_contacts.blocked_param_blocked_type_Vector<PeerBlocked>": "List of blocked users",
    "object_contacts.blocked_param_chats_type_Vector<Chat>": "Blocked chats",
    "object_contacts.blocked_param_users_type_Vector<User>": "List of users",
    "object_inputGroupCallStream": "Chunk of a livestream",
    "object_inputGroupCallStream_param_call_type_InputGroupCall": "Livestream info",
    "object_inputGroupCallStream_param_time_ms_type_long": "Timestamp in milliseconds",
    "object_inputGroupCallStream_param_scale_type_int": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`",
    "object_inputGroupCallStream_param_video_channel_type_flags.0?int": "Selected video channel",
    "object_inputGroupCallStream_param_video_quality_type_flags.0?int": "Selected video quality (0 = lowest, 1 = medium, 2 = best)",
    "object_dialogFilter": "Dialog filter AKA [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_contacts_type_flags.0?true": "Whether to include all contacts in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_non_contacts_type_flags.1?true": "Whether to include all non-contacts in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_groups_type_flags.2?true": "Whether to include all groups in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_broadcasts_type_flags.3?true": "Whether to include all channels in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_bots_type_flags.4?true": "Whether to include all bots in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_exclude_muted_type_flags.11?true": "Whether to exclude muted chats from this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_exclude_read_type_flags.12?true": "Whether to exclude read chats from this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_exclude_archived_type_flags.13?true": "Whether to exclude archived chats from this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_id_type_int": "[Folder](https:\/\/core.telegram.org\/api\/folders) ID",
    "object_dialogFilter_param_title_type_string": "[Folder](https:\/\/core.telegram.org\/api\/folders) name",
    "object_dialogFilter_param_emoticon_type_flags.25?string": "Emoji to use as icon for the folder.",
    "object_dialogFilter_param_pinned_peers_type_Vector<InputPeer>": "Pinned chats, [folders](https:\/\/core.telegram.org\/api\/folders) can have unlimited pinned chats",
    "object_dialogFilter_param_include_peers_type_Vector<InputPeer>": "Include the following chats in this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_dialogFilter_param_exclude_peers_type_Vector<InputPeer>": "Exclude the following chats from this [folder](https:\/\/core.telegram.org\/api\/folders)",
    "object_inputPeerNotifySettings": "Notification settings.",
    "object_inputPeerNotifySettings_param_show_previews_type_flags.0?Bool": "If the text of the message shall be displayed in notification",
    "object_inputPeerNotifySettings_param_silent_type_flags.1?Bool": "Peer was muted?",
    "object_inputPeerNotifySettings_param_mute_until_type_flags.2?int": "Date until which all notifications shall be switched off",
    "object_inputPeerNotifySettings_param_sound_type_flags.3?NotificationSound": "Name of an audio file for notification",
    "object_messages.exportedChatInviteReplaced": "The specified chat invite was replaced with another one",
    "object_messages.exportedChatInviteReplaced_param_invite_type_ExportedChatInvite": "The replaced chat invite",
    "object_messages.exportedChatInviteReplaced_param_new_invite_type_ExportedChatInvite": "The invite that replaces the previous invite",
    "object_messages.exportedChatInviteReplaced_param_users_type_Vector<User>": "Mentioned users",
    "object_chatInviteAlready": "The user has already joined this chat",
    "object_chatInviteAlready_param_chat_type_Chat": "The chat connected to the invite",
    "object_notifyPeer": "Notifications generated by a certain user or group.",
    "object_notifyPeer_param_peer_type_Peer": "user or group",
    "object_secureValueError": "Secure value error",
    "object_secureValueError_param_type_type_SecureValueType": "Type of element which has the issue",
    "object_secureValueError_param_hash_type_bytes": "Hash",
    "object_secureValueError_param_text_type_string": "Error message",
    "object_decryptedMessageMediaEmpty": "Empty constructor, no media content.",
    "object_inputStickerSetThumb": "Location of stickerset thumbnail (see [files](https:\/\/core.telegram.org\/api\/files))",
    "object_inputStickerSetThumb_param_stickerset_type_InputStickerSet": "Sticker set",
    "object_inputStickerSetThumb_param_thumb_version_type_int": "Thumbnail version",
    "object_messageEntityBotCommand": "Message entity representing a bot \/command",
    "object_messageEntityBotCommand_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityBotCommand_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_inputFileLocation": "DEPRECATED location of a photo",
    "object_inputFileLocation_param_volume_id_type_long": "Server volume",
    "object_inputFileLocation_param_local_id_type_int": "File identifier",
    "object_inputFileLocation_param_secret_type_long": "Check sum to access the file",
    "object_inputFileLocation_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_help.country": "Name, ISO code, localized name and phone codes\/patterns of a specific country",
    "object_help.country_param_hidden_type_flags.0?true": "Whether this country should not be shown in the list",
    "object_help.country_param_iso2_type_string": "ISO code of country",
    "object_help.country_param_default_name_type_string": "Name of the country in the country's language",
    "object_help.country_param_name_type_flags.1?string": "Name of the country in the user's language, if different from the original name",
    "object_help.country_param_country_codes_type_Vector<help.CountryCode>": "Phone codes\/patterns",
    "object_privacyValueAllowAll": "Allow all users",
    "object_payments.paymentResult": "Payment result",
    "object_payments.paymentResult_param_updates_type_Updates": "Info about the payment",
    "object_messages.translateResultText": "Translated text",
    "object_messages.translateResultText_param_text_type_string": "Translated text",
    "object_privacyKeyPhoneCall": "Whether the user accepts phone calls",
    "object_messageUserVoteMultiple": "How a user voted in a multiple-choice poll",
    "object_messageUserVoteMultiple_param_user_id_type_long": "User ID",
    "object_messageUserVoteMultiple_param_options_type_Vector<bytes>": "Options chosen by the user",
    "object_messageUserVoteMultiple_param_date_type_int": "When did the user cast their votes",
    "object_themeDocumentNotModified": "Theme background hasn't changed",
    "object_updateNotifySettings": "Changes in notification settings.",
    "object_updateNotifySettings_param_peer_type_NotifyPeer": "Notification source",
    "object_updateNotifySettings_param_notify_settings_type_PeerNotifySettings": "New notification settings",
    "object_channelParticipant": "Channel\/supergroup participant",
    "object_channelParticipant_param_user_id_type_long": "Participant user ID",
    "object_channelParticipant_param_date_type_int": "Date joined",
    "object_updateReadChannelDiscussionOutbox": "Outgoing comments in a [discussion thread](https:\/\/core.telegram.org\/api\/threads) were marked as read",
    "object_updateReadChannelDiscussionOutbox_param_channel_id_type_long": "[Supergroup ID](https:\/\/core.telegram.org\/api\/channel)",
    "object_updateReadChannelDiscussionOutbox_param_top_msg_id_type_int": "ID of the group message that started the [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_updateReadChannelDiscussionOutbox_param_read_max_id_type_int": "Message ID of latest read outgoing message for this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_secureValueErrorTranslationFiles": "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes.",
    "object_secureValueErrorTranslationFiles_param_type_type_SecureValueType": "One of [secureValueTypePersonalDetails](..\/constructors\/secureValueTypePersonalDetails.md), [secureValueTypePassport](..\/constructors\/secureValueTypePassport.md), [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](..\/constructors\/secureValueTypeInternalPassport.md), [secureValueTypeUtilityBill](..\/constructors\/secureValueTypeUtilityBill.md), [secureValueTypeBankStatement](..\/constructors\/secureValueTypeBankStatement.md), [secureValueTypeRentalAgreement](..\/constructors\/secureValueTypeRentalAgreement.md), [secureValueTypePassportRegistration](..\/constructors\/secureValueTypePassportRegistration.md), [secureValueTypeTemporaryRegistration](..\/constructors\/secureValueTypeTemporaryRegistration.md)",
    "object_secureValueErrorTranslationFiles_param_file_hash_type_Vector<bytes>": "Hash",
    "object_secureValueErrorTranslationFiles_param_text_type_string": "Error message",
    "object_inputWebDocument": "The document",
    "object_inputWebDocument_param_url_type_string": "Remote document URL to be downloaded using the appropriate [method](https:\/\/core.telegram.org\/api\/files)",
    "object_inputWebDocument_param_size_type_int": "Remote file size",
    "object_inputWebDocument_param_mime_type_type_string": "Mime type",
    "object_inputWebDocument_param_attributes_type_Vector<DocumentAttribute>": "Attributes for media types",
    "object_help.termsOfServiceUpdate": "Info about an update of telegram's terms of service. If the terms of service are declined, then the [account.deleteAccount](..\/methods\/account.deleteAccount.md) method should be called with the reason \"Decline ToS update\"",
    "object_help.termsOfServiceUpdate_param_expires_type_int": "New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](..\/methods\/help.getTermsOfServiceUpdate.md) in `expires` seconds",
    "object_help.termsOfServiceUpdate_param_terms_of_service_type_help.TermsOfService": "New terms of service",
    "object_userStatusLastMonth": "Online status: last seen last month",
    "object_privacyKeyVoiceMessages": "Whether the user accepts voice messages",
    "object_inputDocument": "Defines a document for subsequent interaction.",
    "object_inputDocument_param_id_type_long": "Document ID",
    "object_inputDocument_param_access_hash_type_long": "**access\\_hash** parameter from the [document](..\/constructors\/document.md) constructor",
    "object_inputDocument_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_messages.featuredStickersNotModified": "Featured stickers haven't changed",
    "object_messages.featuredStickersNotModified_param_count_type_int": "Total number of featured stickers",
    "object_messageMediaVenue": "Venue",
    "object_messageMediaVenue_param_geo_type_GeoPoint": "Geolocation of venue",
    "object_messageMediaVenue_param_title_type_string": "Venue name",
    "object_messageMediaVenue_param_address_type_string": "Address",
    "object_messageMediaVenue_param_provider_type_string": "Venue provider: currently only \"foursquare\" needs to be supported",
    "object_messageMediaVenue_param_venue_id_type_string": "Venue ID in the provider's database",
    "object_messageMediaVenue_param_venue_type_type_string": "Venue type in the provider's database",
    "object_messageActionChatJoinedByLink": "A user joined the chat via an invite link",
    "object_messageActionChatJoinedByLink_param_inviter_id_type_long": "ID of the user that created the invite link",
    "object_secureValueTypeAddress": "Address",
    "object_messages.sentEncryptedFile": "Message with a file enclosure sent to a protected chat",
    "object_messages.sentEncryptedFile_param_date_type_int": "Sending date",
    "object_messages.sentEncryptedFile_param_file_type_EncryptedFile": "Attached file",
    "object_inputSingleMedia": "A single media in an [album or grouped media](https:\/\/core.telegram.org\/api\/files#albums-grouped-media) sent with [messages.sendMultiMedia](..\/methods\/messages.sendMultiMedia.md).",
    "object_inputSingleMedia_param_media_type_InputMedia": "The media",
    "object_inputSingleMedia_param_random_id_type_long": "Unique client media ID required to prevent message resending",
    "object_inputSingleMedia_param_message_type_string": "A caption for the media",
    "object_inputSingleMedia_param_entities_type_flags.0?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "object_attachMenuBotIcon": "Represents an attachment menu icon for [bot web apps \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBotIcon_param_name_type_string": "One of the following values: note that animated icons must be played when the user clicks on the button, activating the bot web app. <br><br>`default_static` \\- Default attachment menu icon in SVG format <br>`placeholder_static` \\- Default placeholder for opened Web Apps in SVG format <br>`ios_static` \\- Attachment menu icon in SVG format for the official iOS app <br>`ios_animated` \\- Animated attachment menu icon in TGS format for the official iOS app <br>`android_animated` \\- Animated attachment menu icon in TGS format for the official Android app <br>`macos_animated` \\- Animated attachment menu icon in TGS format for the official native Mac OS app",
    "object_attachMenuBotIcon_param_icon_type_Document": "The actual icon file.",
    "object_attachMenuBotIcon_param_colors_type_flags.0?Vector<AttachMenuBotIconColor>": "Attachment menu icon colors.",
    "object_help.termsOfService": "Info about the latest telegram Terms Of Service",
    "object_help.termsOfService_param_popup_type_flags.0?true": "Whether a prompt must be showed to the user, in order to accept the new terms.",
    "object_help.termsOfService_param_id_type_DataJSON": "ID of the new terms",
    "object_help.termsOfService_param_text_type_string": "Text of the new terms",
    "object_help.termsOfService_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_help.termsOfService_param_min_age_confirm_type_flags.1?int": "Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.",
    "object_textSuperscript": "Superscript text",
    "object_textSuperscript_param_text_type_RichText": "Text",
    "object_updateMessagePollVote": "A specific user has voted in a poll",
    "object_updateMessagePollVote_param_poll_id_type_long": "Poll ID",
    "object_updateMessagePollVote_param_user_id_type_long": "User ID",
    "object_updateMessagePollVote_param_options_type_Vector<bytes>": "Chosen option(s)",
    "object_updateMessagePollVote_param_qts_type_int": "New **qts** value, see [updates \u00bb](https:\/\/core.telegram.org\/api\/updates) for more info.",
    "object_inputMessagesFilterVideo": "Filter for messages containing videos.",
    "object_highScore": "Game highscore",
    "object_highScore_param_pos_type_int": "Position in highscore list",
    "object_highScore_param_user_id_type_long": "User ID",
    "object_highScore_param_score_type_int": "Score",
    "object_auth.authorizationSignUpRequired": "An account with this phone number doesn't exist on telegram: the user has to [enter basic information and sign up](https:\/\/core.telegram.org\/api\/auth)",
    "object_auth.authorizationSignUpRequired_param_terms_of_service_type_flags.0?help.TermsOfService": "Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram",
    "object_inputChatUploadedPhoto": "New photo to be set as group profile photo.\n\nThe `file`, `video` and `video_emoji_markup` flags are mutually exclusive.",
    "object_inputChatUploadedPhoto_param_file_type_flags.0?InputFile": "File saved in parts using the method [upload.saveFilePart](..\/methods\/upload.saveFilePart.md)",
    "object_inputChatUploadedPhoto_param_video_type_flags.1?InputFile": "Square video for animated profile picture",
    "object_inputChatUploadedPhoto_param_video_start_ts_type_flags.2?double": "Floating point UNIX timestamp in seconds, indicating the frame of the video\/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set.",
    "object_inputChatUploadedPhoto_param_video_emoji_markup_type_flags.3?VideoSize": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](..\/constructors\/videoSizeEmojiMarkup.md) or a [videoSizeStickerMarkup](..\/constructors\/videoSizeStickerMarkup.md) constructor.",
    "object_shippingOption": "Shipping option",
    "object_shippingOption_param_id_type_string": "Option ID",
    "object_shippingOption_param_title_type_string": "Title",
    "object_shippingOption_param_prices_type_Vector<LabeledPrice>": "List of price portions",
    "object_account.sentEmailCode": "The sent email code",
    "object_account.sentEmailCode_param_email_pattern_type_string": "The email (to which the code was sent) must match this [pattern](https:\/\/core.telegram.org\/api\/pattern)",
    "object_account.sentEmailCode_param_length_type_int": "The length of the verification code",
    "object_channelAdminLogEventActionDeleteMessage": "A message was deleted",
    "object_channelAdminLogEventActionDeleteMessage_param_message_type_Message": "The message that was deleted",
    "object_recentMeUrlChat": "Recent t.me link to a chat",
    "object_recentMeUrlChat_param_url_type_string": "t.me URL",
    "object_recentMeUrlChat_param_chat_id_type_long": "Chat ID",
    "object_keyboardButtonRequestPhone": "Button to request a user's phone number",
    "object_keyboardButtonRequestPhone_param_text_type_string": "Button text",
    "object_channelAdminLogEventActionExportedInviteEdit": "A chat invite was edited",
    "object_channelAdminLogEventActionExportedInviteEdit_param_prev_invite_type_ExportedChatInvite": "Previous chat invite information",
    "object_channelAdminLogEventActionExportedInviteEdit_param_new_invite_type_ExportedChatInvite": "New chat invite information",
    "object_photos.photosSlice": "Incomplete list of photos with auxiliary data.",
    "object_photos.photosSlice_param_count_type_int": "Total number of photos",
    "object_photos.photosSlice_param_photos_type_Vector<Photo>": "List of photos",
    "object_photos.photosSlice_param_users_type_Vector<User>": "List of mentioned users",
    "object_savedPhoneContact": "Saved contact",
    "object_savedPhoneContact_param_phone_type_string": "Phone number",
    "object_savedPhoneContact_param_first_name_type_string": "First name",
    "object_savedPhoneContact_param_last_name_type_string": "Last name",
    "object_savedPhoneContact_param_date_type_int": "Date added",
    "object_updateUserPhone": "A user's phone number was changed",
    "object_updateUserPhone_param_user_id_type_long": "User ID",
    "object_updateUserPhone_param_phone_type_string": "New phone number",
    "object_privacyKeyProfilePhoto": "Whether the profile picture of the user is visible",
    "object_inputBotInlineMessageText": "Simple text message",
    "object_inputBotInlineMessageText_param_no_webpage_type_flags.0?true": "Disable webpage preview",
    "object_inputBotInlineMessageText_param_message_type_string": "Message",
    "object_inputBotInlineMessageText_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_inputBotInlineMessageText_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_statsGroupTopInviter": "Information about an active supergroup inviter",
    "object_statsGroupTopInviter_param_user_id_type_long": "User ID",
    "object_statsGroupTopInviter_param_invitations_type_int": "Number of invitations for [statistics](https:\/\/core.telegram.org\/api\/stats) period in consideration",
    "object_messages.foundStickerSets": "Found stickersets",
    "object_messages.foundStickerSets_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.foundStickerSets_param_sets_type_Vector<StickerSetCovered>": "Found stickersets",
    "object_contact": "A contact of the current user that is registered in the system.",
    "object_contact_param_user_id_type_long": "User identifier",
    "object_contact_param_mutual_type_Bool": "Current user is in the user's contact list",
    "object_updatePrivacy": "Privacy rules were changed",
    "object_updatePrivacy_param_key_type_PrivacyKey": "Peers to which the privacy rules apply",
    "object_updatePrivacy_param_rules_type_Vector<PrivacyRule>": "New privacy rules",
    "object_inputWebFileAudioAlbumThumbLocation": "Used to download an album cover for any music file using [upload.getWebFile](..\/methods\/upload.getWebFile.md), see the [webfile docs for more info \u00bb](https:\/\/core.telegram.org\/api\/files#downloading-webfiles).",
    "object_inputWebFileAudioAlbumThumbLocation_param_small_type_flags.2?true": "Used to return a thumbnail with `100x100` resolution (instead of the default `600x600`)",
    "object_inputWebFileAudioAlbumThumbLocation_param_document_type_flags.0?InputDocument": "The audio file in question: must NOT be provided in secret chats, provide the `title` and `performer` fields instead.",
    "object_inputWebFileAudioAlbumThumbLocation_param_title_type_flags.1?string": "Song title: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits.",
    "object_inputWebFileAudioAlbumThumbLocation_param_performer_type_flags.1?string": "Song performer: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits.",
    "object_photos.photos": "Full list of photos with auxiliary data.",
    "object_photos.photos_param_photos_type_Vector<Photo>": "List of photos",
    "object_photos.photos_param_users_type_Vector<User>": "List of mentioned users",
    "object_langPackStringPluralized": "A language pack string which has different forms based on the number of some object it mentions. See [https:\/\/www.unicode.org\/cldr\/charts\/latest\/supplemental\/language\\_plural\\_rules.html](https:\/\/www.unicode.org\/cldr\/charts\/latest\/supplemental\/language_plural_rules.html) for more info",
    "object_langPackStringPluralized_param_key_type_string": "Localization key",
    "object_langPackStringPluralized_param_zero_value_type_flags.0?string": "Value for zero objects",
    "object_langPackStringPluralized_param_one_value_type_flags.1?string": "Value for one object",
    "object_langPackStringPluralized_param_two_value_type_flags.2?string": "Value for two objects",
    "object_langPackStringPluralized_param_few_value_type_flags.3?string": "Value for a few objects",
    "object_langPackStringPluralized_param_many_value_type_flags.4?string": "Value for many objects",
    "object_langPackStringPluralized_param_other_value_type_string": "Default value",
    "object_true": "See [predefined identifiers](https:\/\/core.telegram.org\/mtproto\/TL-formal#predefined-identifiers).",
    "object_account.emailVerifiedLogin": "The email was verified correctly, and a login code was just sent to it.",
    "object_account.emailVerifiedLogin_param_email_type_string": "The verified email address.",
    "object_account.emailVerifiedLogin_param_sent_code_type_auth.SentCode": "Info about the sent [login code](https:\/\/core.telegram.org\/api\/auth)",
    "object_account.savedRingtoneConverted": "The notification sound was not in MP3 format and was successfully converted and saved, use the returned [Document](..\/types\/Document.md) to refer to the notification sound from now on",
    "object_account.savedRingtoneConverted_param_document_type_Document": "The converted notification sound",
    "object_photoSize": "Image description.",
    "object_photoSize_param_type_type_string": "[Thumbnail type \u00bb](https:\/\/core.telegram.org\/api\/files#image-thumbnail-types)",
    "object_photoSize_param_w_type_int": "Image width",
    "object_photoSize_param_h_type_int": "Image height",
    "object_photoSize_param_size_type_int": "File size",
    "object_account.password": "Configuration for two-factor authorization",
    "object_account.password_param_has_recovery_type_flags.0?true": "Whether the user has a recovery method configured",
    "object_account.password_param_has_secure_values_type_flags.1?true": "Whether telegram [passport](https:\/\/core.telegram.org\/passport) is enabled",
    "object_account.password_param_has_password_type_flags.2?true": "Whether the user has a password",
    "object_account.password_param_current_algo_type_flags.2?PasswordKdfAlgo": "The [KDF algorithm for SRP two-factor authentication](https:\/\/core.telegram.org\/api\/srp) of the current password",
    "object_account.password_param_srp_B_type_flags.2?bytes": "Srp B param for [SRP authorization](https:\/\/core.telegram.org\/api\/srp)",
    "object_account.password_param_srp_id_type_flags.2?long": "Srp ID param for [SRP authorization](https:\/\/core.telegram.org\/api\/srp)",
    "object_account.password_param_hint_type_flags.3?string": "Text hint for the password",
    "object_account.password_param_email_unconfirmed_pattern_type_flags.4?string": "A [password recovery email](https:\/\/core.telegram.org\/api\/srp#email-verification) with the specified [pattern](https:\/\/core.telegram.org\/api\/pattern) is still awaiting verification",
    "object_account.password_param_new_algo_type_PasswordKdfAlgo": "The [KDF algorithm for SRP two-factor authentication](https:\/\/core.telegram.org\/api\/srp) to use when creating new passwords",
    "object_account.password_param_new_secure_algo_type_SecurePasswordKdfAlgo": "The KDF algorithm for telegram [passport](https:\/\/core.telegram.org\/passport)",
    "object_account.password_param_secure_random_type_bytes": "Secure random string",
    "object_account.password_param_pending_reset_date_type_flags.5?int": "The 2FA password will be automatically removed at this date, unless the user cancels the operation",
    "object_account.password_param_login_email_pattern_type_flags.6?string": "A verified login email with the specified [pattern](https:\/\/core.telegram.org\/api\/pattern) is configured",
    "object_inputMessagesFilterPhoneCalls": "Return only phone calls",
    "object_inputMessagesFilterPhoneCalls_param_missed_type_flags.0?true": "Return only missed phone calls",
    "object_inputPeerChannel": "Defines a channel for further interaction.",
    "object_inputPeerChannel_param_channel_id_type_long": "Channel identifier",
    "object_inputPeerChannel_param_access_hash_type_long": "**access\\_hash** value from the [channel](..\/constructors\/channel.md) constructor",
    "object_jsonObjectValue": "JSON key: value pair",
    "object_jsonObjectValue_param_key_type_string": "Key",
    "object_jsonObjectValue_param_value_type_JSONValue": "Value",
    "object_pageBlockTable": "Table",
    "object_pageBlockTable_param_bordered_type_flags.0?true": "Does the table have a visible border?",
    "object_pageBlockTable_param_striped_type_flags.1?true": "Is the table striped?",
    "object_pageBlockTable_param_title_type_RichText": "Title",
    "object_pageBlockTable_param_rows_type_Vector<PageTableRow>": "Table rows",
    "object_help.countriesListNotModified": "The country list has not changed",
    "object_inputBotInlineMessageID64": "Represents a sent inline message from the perspective of a bot",
    "object_inputBotInlineMessageID64_param_dc_id_type_int": "DC ID to use when working with this inline message",
    "object_inputBotInlineMessageID64_param_owner_id_type_long": "ID of the owner of this message",
    "object_inputBotInlineMessageID64_param_id_type_int": "ID of message",
    "object_inputBotInlineMessageID64_param_access_hash_type_long": "Access hash of message",
    "object_messageActionCustomAction": "Custom action (most likely not supported by the current layer, an upgrade might be needed)",
    "object_messageActionCustomAction_param_message_type_string": "Action message",
    "object_channelAdminLogEventActionChangeTitle": "Channel\/supergroup title was changed",
    "object_channelAdminLogEventActionChangeTitle_param_prev_value_type_string": "Previous title",
    "object_channelAdminLogEventActionChangeTitle_param_new_value_type_string": "New title",
    "object_secureFileEmpty": "Empty constructor",
    "object_messages.allStickers": "Info about all installed stickers",
    "object_messages.allStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.allStickers_param_sets_type_Vector<StickerSet>": "All stickersets",
    "object_langPackDifference": "Changes to the app's localization pack",
    "object_langPackDifference_param_lang_code_type_string": "Language code",
    "object_langPackDifference_param_from_version_type_int": "Previous version number",
    "object_langPackDifference_param_version_type_int": "New version number",
    "object_langPackDifference_param_strings_type_Vector<LangPackString>": "Localized strings",
    "object_inputMediaGame": "A game",
    "object_inputMediaGame_param_id_type_InputGame": "The game to forward",
    "object_channelAdminLogEventActionToggleSlowMode": "[Slow mode setting for supergroups was changed](..\/methods\/channels.toggleSlowMode.md)",
    "object_channelAdminLogEventActionToggleSlowMode_param_prev_value_type_int": "Previous slow mode value",
    "object_channelAdminLogEventActionToggleSlowMode_param_new_value_type_int": "New slow mode value",
    "object_messages.searchCounter": "Indicates how many results would be found by a [messages.search](..\/methods\/messages.search.md) call with the same parameters",
    "object_messages.searchCounter_param_inexact_type_flags.1?true": "If set, the results may be inexact",
    "object_messages.searchCounter_param_filter_type_MessagesFilter": "Provided message filter",
    "object_messages.searchCounter_param_count_type_int": "Number of results that were found server-side",
    "object_channelAdminLogEventActionParticipantToggleBan": "The banned [rights](https:\/\/core.telegram.org\/api\/rights) of a user were changed",
    "object_channelAdminLogEventActionParticipantToggleBan_param_prev_participant_type_ChannelParticipant": "Old banned rights of user",
    "object_channelAdminLogEventActionParticipantToggleBan_param_new_participant_type_ChannelParticipant": "New banned rights of user",
    "object_messages.sponsoredMessagesEmpty": "No sponsored messages are available.",
    "object_documentAttributeSticker": "Defines a sticker",
    "object_documentAttributeSticker_param_mask_type_flags.1?true": "Whether this is a mask sticker",
    "object_documentAttributeSticker_param_alt_type_string": "Alternative emoji representation of sticker",
    "object_documentAttributeSticker_param_stickerset_type_InputStickerSet": "Associated stickerset",
    "object_documentAttributeSticker_param_mask_coords_type_flags.0?MaskCoords": "Mask coordinates (if this is a mask sticker, attached to a photo)",
    "object_help.passportConfigNotModified": "Password configuration not modified",
    "object_inputMediaVenue": "Can be used to send a venue geolocation.",
    "object_inputMediaVenue_param_geo_point_type_InputGeoPoint": "Geolocation",
    "object_inputMediaVenue_param_title_type_string": "Venue name",
    "object_inputMediaVenue_param_address_type_string": "Physical address of the venue",
    "object_inputMediaVenue_param_provider_type_string": "Venue provider: currently only \"foursquare\" needs to be supported",
    "object_inputMediaVenue_param_venue_id_type_string": "Venue ID in the provider's database",
    "object_inputMediaVenue_param_venue_type_type_string": "Venue type in the provider's database",
    "object_account.webAuthorizations": "Web authorizations",
    "object_account.webAuthorizations_param_authorizations_type_Vector<WebAuthorization>": "Web authorization list",
    "object_account.webAuthorizations_param_users_type_Vector<User>": "Users",
    "object_inputKeyboardButtonUrlAuth": "Button to request a user to [authorize](..\/methods\/messages.acceptUrlAuth.md) via URL using [Seamless Telegram Login](https:\/\/telegram.org\/blog\/privacy-discussions-web-bots#meet-seamless-web-bots).",
    "object_inputKeyboardButtonUrlAuth_param_request_write_access_type_flags.0?true": "Set this flag to request the permission for your bot to send messages to the user.",
    "object_inputKeyboardButtonUrlAuth_param_text_type_string": "Button text",
    "object_inputKeyboardButtonUrlAuth_param_fwd_text_type_flags.1?string": "New text of the button in forwarded messages.",
    "object_inputKeyboardButtonUrlAuth_param_url_type_string": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https:\/\/core.telegram.org\/widgets\/login#receiving-authorization-data).<br>NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https:\/\/core.telegram.org\/widgets\/login#checking-authorization).",
    "object_inputKeyboardButtonUrlAuth_param_bot_type_InputUser": "Username of a bot, which will be used for user authorization. See [Setting up a bot](https:\/\/core.telegram.org\/widgets\/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https:\/\/core.telegram.org\/widgets\/login#linking-your-domain-to-the-bot) for more details.",
    "object_account.savedRingtone": "The notification sound was already in MP3 format and was saved without any modification",
    "object_sendMessageChooseStickerAction": "User is choosing a sticker",
    "object_account.authorizations": "Logged-in sessions",
    "object_account.authorizations_param_authorization_ttl_days_type_int": "Time-to-live of session",
    "object_account.authorizations_param_authorizations_type_Vector<Authorization>": "Logged-in sessions",
    "object_updateAutoSaveSettings": "Media autosave settings have changed and must be refetched using [account.getAutoSaveSettings](..\/methods\/account.getAutoSaveSettings.md).",
    "object_secureValueTypePassportRegistration": "Internal registration [passport](https:\/\/core.telegram.org\/passport)",
    "object_decryptedMessageActionNoop": "NOOP action",
    "object_messageActionSecureValuesSent": "Request for secure [telegram passport](https:\/\/core.telegram.org\/passport) values was sent",
    "object_messageActionSecureValuesSent_param_types_type_Vector<SecureValueType>": "Secure value types",
    "object_updateContactsReset": "All contacts were deleted",
    "object_peerSettings": "List of actions that are possible when interacting with this user, to be shown as suggested actions in the chat bar",
    "object_peerSettings_param_report_spam_type_flags.0?true": "Whether we can still report the user for spam",
    "object_peerSettings_param_add_contact_type_flags.1?true": "Whether we can add the user as contact",
    "object_peerSettings_param_block_contact_type_flags.2?true": "Whether we can block the user",
    "object_peerSettings_param_share_contact_type_flags.3?true": "Whether we can share the user's contact",
    "object_peerSettings_param_need_contacts_exception_type_flags.4?true": "Whether a special exception for contacts is needed",
    "object_peerSettings_param_report_geo_type_flags.5?true": "Whether we can report a geogroup as irrelevant for this location",
    "object_peerSettings_param_autoarchived_type_flags.7?true": "Whether this peer was automatically archived according to [privacy settings](..\/constructors\/globalPrivacySettings.md) and can be unarchived",
    "object_peerSettings_param_invite_members_type_flags.8?true": "If set, this is a recently created group chat to which new members can be invited",
    "object_peerSettings_param_request_chat_broadcast_type_flags.10?true": "This flag is set if `request_chat_title` and `request_chat_date` fields are set and the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) is related to a channel (otherwise if only the request fields are set, the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) is related to a chat).",
    "object_peerSettings_param_geo_distance_type_flags.6?int": "Distance in meters between us and this peer",
    "object_peerSettings_param_request_chat_title_type_flags.9?string": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat\/channel's title.",
    "object_peerSettings_param_request_chat_date_type_flags.9?int": "If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) was sent.",
    "object_pageBlockParagraph": "A paragraph",
    "object_pageBlockParagraph_param_text_type_RichText": "Text",
    "object_messages.exportedChatInvite": "Info about a chat invite",
    "object_messages.exportedChatInvite_param_invite_type_ExportedChatInvite": "Info about the chat invite",
    "object_messages.exportedChatInvite_param_users_type_Vector<User>": "Mentioned users",
    "object_inputChannelFromMessage": "Defines a [min](https:\/\/core.telegram.org\/api\/min) channel that was seen in a certain message of a certain chat.",
    "object_inputChannelFromMessage_param_peer_type_InputPeer": "The chat where the channel was seen",
    "object_inputChannelFromMessage_param_msg_id_type_int": "The message ID in the chat where the channel was seen",
    "object_inputChannelFromMessage_param_channel_id_type_long": "The channel ID",
    "object_messageEntityUnknown": "Unknown message entity",
    "object_messageEntityUnknown_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityUnknown_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_userEmpty": "Empty constructor, non-existent user.",
    "object_userEmpty_param_id_type_long": "User identifier or `0`",
    "object_updateBotInlineSend": "The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https:\/\/core.telegram.org\/bots\/inline#collecting-feedback) for details on how to enable these updates for your bot.",
    "object_updateBotInlineSend_param_user_id_type_long": "The user that chose the result",
    "object_updateBotInlineSend_param_query_type_string": "The query that was used to obtain the result",
    "object_updateBotInlineSend_param_geo_type_flags.0?GeoPoint": "Optional. Sender location, only for bots that require user location",
    "object_updateBotInlineSend_param_id_type_string": "The unique identifier for the result that was chosen",
    "object_updateBotInlineSend_param_msg_id_type_flags.1?InputBotInlineMessageID": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.",
    "object_stickerSet": "Represents a stickerset (stickerpack)",
    "object_stickerSet_param_archived_type_flags.1?true": "Whether this stickerset was archived (due to too many saved stickers in the current account)",
    "object_stickerSet_param_official_type_flags.2?true": "Is this stickerset official",
    "object_stickerSet_param_masks_type_flags.3?true": "Is this a mask stickerset",
    "object_stickerSet_param_animated_type_flags.5?true": "Is this an animated stickerpack",
    "object_stickerSet_param_videos_type_flags.6?true": "Is this a video stickerpack",
    "object_stickerSet_param_emojis_type_flags.7?true": "This is a custom emoji stickerset",
    "object_stickerSet_param_installed_date_type_flags.0?int": "When was this stickerset installed",
    "object_stickerSet_param_id_type_long": "ID of the stickerset",
    "object_stickerSet_param_access_hash_type_long": "Access hash of stickerset",
    "object_stickerSet_param_title_type_string": "Title of stickerset",
    "object_stickerSet_param_short_name_type_string": "Short name of stickerset, used when sharing stickerset using [stickerset deep links](https:\/\/core.telegram.org\/api\/links#stickerset-links).",
    "object_stickerSet_param_thumbs_type_flags.4?Vector<PhotoSize>": "Stickerset thumbnail",
    "object_stickerSet_param_thumb_dc_id_type_flags.4?int": "DC ID of thumbnail",
    "object_stickerSet_param_thumb_version_type_flags.4?int": "Thumbnail version",
    "object_stickerSet_param_thumb_document_id_type_flags.8?long": "Document ID of custom emoji thumbnail, fetch the document using [messages.getCustomEmojiDocuments](..\/methods\/messages.getCustomEmojiDocuments.md)",
    "object_stickerSet_param_count_type_int": "Number of stickers in pack",
    "object_stickerSet_param_hash_type_int": "Hash",
    "object_messageActionSetMessagesTTL": "The Time-To-Live of messages in this chat was changed.",
    "object_messageActionSetMessagesTTL_param_period_type_int": "New Time-To-Live of all messages sent in this chat; if 0, autodeletion was disabled.",
    "object_messageActionSetMessagesTTL_param_auto_setting_from_type_flags.0?long": "If set, the chat TTL setting was set not due to a manual change by one of participants, but automatically because one of the participants has the [default TTL settings enabled \u00bb](..\/methods\/messages.setDefaultHistoryTTL.md). For example, when a user writes to us for the first time and we have set a default messages TTL of 1 week, this service message (with `auto_setting_from=our_userid`) will be emitted before our first message.",
    "object_updateMessagePoll": "The results of a poll have changed",
    "object_updateMessagePoll_param_poll_id_type_long": "Poll ID",
    "object_updateMessagePoll_param_poll_type_flags.0?Poll": "If the server knows the client hasn't cached this poll yet, the poll itself",
    "object_updateMessagePoll_param_results_type_PollResults": "New poll results",
    "object_channelAdminLogEventActionChangeHistoryTTL": "The Time-To-Live of messages in this chat was changed",
    "object_channelAdminLogEventActionChangeHistoryTTL_param_prev_value_type_int": "Previous value",
    "object_channelAdminLogEventActionChangeHistoryTTL_param_new_value_type_int": "New value",
    "object_messages.affectedMessages": "Events affected by operation",
    "object_messages.affectedMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.affectedMessages_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_sendMessageTypingAction": "User is typing.",
    "object_messageActionChatEditTitle": "Group name changed.",
    "object_messageActionChatEditTitle_param_title_type_string": "New group name",
    "object_channelParticipantsKicked": "Fetch only kicked participants",
    "object_channelParticipantsKicked_param_q_type_string": "Optional filter for searching kicked participants by name (otherwise empty)",
    "object_updatePhoneCallSignalingData": "Incoming phone call signaling payload",
    "object_updatePhoneCallSignalingData_param_phone_call_id_type_long": "Phone call ID",
    "object_updatePhoneCallSignalingData_param_data_type_bytes": "Signaling payload",
    "object_privacyValueDisallowAll": "Disallow all users",
    "object_baseThemeArctic": "Arctic theme",
    "object_theme": "Theme",
    "object_theme_param_creator_type_flags.0?true": "Whether the current user is the creator of this theme",
    "object_theme_param_default_type_flags.1?true": "Whether this is the default theme",
    "object_theme_param_for_chat_type_flags.5?true": "Whether this theme is meant to be used as a [chat theme](https:\/\/telegram.org\/blog\/chat-themes-interactive-emoji-read-receipts)",
    "object_theme_param_id_type_long": "Theme ID",
    "object_theme_param_access_hash_type_long": "Theme access hash",
    "object_theme_param_slug_type_string": "Unique theme ID",
    "object_theme_param_title_type_string": "Theme name",
    "object_theme_param_document_type_flags.2?Document": "Theme",
    "object_theme_param_settings_type_flags.3?Vector<ThemeSettings>": "Theme settings",
    "object_theme_param_emoticon_type_flags.6?string": "Theme emoji",
    "object_theme_param_installs_count_type_flags.4?int": "Installation count",
    "object_auth.sentCodeTypeFirebaseSms": "An authentication code should be delivered via SMS after Firebase attestation, as described in the [auth documentation \u00bb](https:\/\/core.telegram.org\/api\/auth).",
    "object_auth.sentCodeTypeFirebaseSms_param_nonce_type_flags.0?bytes": "On Android, the nonce to be used as described in the [auth documentation \u00bb](https:\/\/core.telegram.org\/api\/auth)",
    "object_auth.sentCodeTypeFirebaseSms_param_receipt_type_flags.1?string": "On iOS, must be compared with the `receipt` extracted from the received push notification.",
    "object_auth.sentCodeTypeFirebaseSms_param_push_timeout_type_flags.1?int": "On iOS: if a push notification with the `ios_push_secret` isn't received within `push_timeout` seconds, the `next_type` authentication method must be used, with [auth.resendCode](..\/methods\/auth.resendCode.md).",
    "object_auth.sentCodeTypeFirebaseSms_param_length_type_int": "Length of the code that will be delivered.",
    "object_messageActionGameScore": "Someone scored in a game",
    "object_messageActionGameScore_param_game_id_type_long": "Game ID",
    "object_messageActionGameScore_param_score_type_int": "Score",
    "object_messages.affectedHistory": "Affected part of communication history with the user or in a chat.",
    "object_messages.affectedHistory_param_pts_type_int": "Number of events occurred in a text box",
    "object_messages.affectedHistory_param_pts_count_type_int": "Number of affected events",
    "object_messages.affectedHistory_param_offset_type_int": "If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease",
    "object_secureValueHash": "Secure value hash",
    "object_secureValueHash_param_type_type_SecureValueType": "Secure value type",
    "object_secureValueHash_param_hash_type_bytes": "Hash",
    "object_inlineBotSwitchPM": "The bot requested the user to message them in private",
    "object_inlineBotSwitchPM_param_text_type_string": "Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty)",
    "object_inlineBotSwitchPM_param_start_param_type_string": "The parameter for the `\/start parameter`",
    "object_messages.chatAdminsWithInvites": "Info about chat invites generated by admins.",
    "object_messages.chatAdminsWithInvites_param_admins_type_Vector<ChatAdminWithInvites>": "Info about chat invites generated by admins.",
    "object_messages.chatAdminsWithInvites_param_users_type_Vector<User>": "Mentioned users",
    "object_chatlists.chatlistInviteAlready": "Updated info about a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links) we already imported.",
    "object_chatlists.chatlistInviteAlready_param_filter_id_type_int": "ID of the imported folder",
    "object_chatlists.chatlistInviteAlready_param_missing_peers_type_Vector<Peer>": "New peers to be imported",
    "object_chatlists.chatlistInviteAlready_param_already_peers_type_Vector<Peer>": "Peers that were already imported",
    "object_chatlists.chatlistInviteAlready_param_chats_type_Vector<Chat>": "Related chat information",
    "object_chatlists.chatlistInviteAlready_param_users_type_Vector<User>": "Related user information",
    "object_inlineQueryPeerTypeBotPM": "Peer type: private chat with a bot.",
    "object_messages.favedStickers": "Favorited stickers",
    "object_messages.favedStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.favedStickers_param_packs_type_Vector<StickerPack>": "Emojis associated to stickers",
    "object_messages.favedStickers_param_stickers_type_Vector<Document>": "Favorited stickers",
    "object_auth.sentCodeTypeEmailCode": "The code was sent via the [previously configured login email \u00bb](https:\/\/core.telegram.org\/api\/auth#email-verification)",
    "object_auth.sentCodeTypeEmailCode_param_apple_signin_allowed_type_flags.0?true": "Whether authorization through Apple ID is allowed",
    "object_auth.sentCodeTypeEmailCode_param_google_signin_allowed_type_flags.1?true": "Whether authorization through Google ID is allowed",
    "object_auth.sentCodeTypeEmailCode_param_email_pattern_type_string": "[Pattern](https:\/\/core.telegram.org\/api\/pattern) of the email",
    "object_auth.sentCodeTypeEmailCode_param_length_type_int": "Length of the sent verification code",
    "object_auth.sentCodeTypeEmailCode_param_reset_available_period_type_flags.3?int": "Clients should wait for the specified amount of seconds before allowing the user to invoke [auth.resetLoginEmail](..\/methods\/auth.resetLoginEmail.md) (will be 0 for [Premium](https:\/\/core.telegram.org\/api\/premium) users).",
    "object_auth.sentCodeTypeEmailCode_param_reset_pending_date_type_flags.4?int": "An email reset was already requested, and will occur at the specified date.",
    "object_pageBlockOrderedList": "Ordered list of IV blocks",
    "object_pageBlockOrderedList_param_items_type_Vector<PageListOrderedItem>": "List items",
    "object_messages.sentEncryptedMessage": "Message without file attachments sent to an encrypted file.",
    "object_messages.sentEncryptedMessage_param_date_type_int": "Date of sending",
    "object_pageBlockHeader": "Page header",
    "object_pageBlockHeader_param_text_type_RichText": "Contents",
    "object_inputReportReasonChildAbuse": "Report for child abuse",
    "object_documentAttributeVideo": "Defines a video",
    "object_documentAttributeVideo_param_round_message_type_flags.0?true": "Whether this is a round video",
    "object_documentAttributeVideo_param_supports_streaming_type_flags.1?true": "Whether the video supports streaming",
    "object_documentAttributeVideo_param_duration_type_int": "Duration in seconds",
    "object_documentAttributeVideo_param_w_type_int": "Video width",
    "object_documentAttributeVideo_param_h_type_int": "Video height",
    "object_messages.archivedStickers": "Archived stickersets",
    "object_messages.archivedStickers_param_count_type_int": "Number of archived stickers",
    "object_messages.archivedStickers_param_sets_type_Vector<StickerSetCovered>": "Archived stickersets",
    "object_updateUserBlocked": "User was added to the blacklist (method [contacts.block](..\/methods\/contacts.block.md)) or removed from the blacklist (method [contacts.unblock](..\/methods\/contacts.unblock.md)).",
    "object_updateUserBlocked_param_user_id_type_int": "User id",
    "object_updateUserBlocked_param_blocked_type_Bool": "([boolTrue](..\/constructors\/boolTrue.md)) if the user is blocked",
    "object_inputMessagesFilterPhotos": "Filter for messages containing photos.",
    "object_securePlainPhone": "Phone number to use in [telegram passport](https:\/\/core.telegram.org\/passport): [it must be verified, first \u00bb](https:\/\/core.telegram.org\/passport\/encryption#secureplaindata).",
    "object_securePlainPhone_param_phone_type_string": "Phone number",
    "object_phone.exportedGroupCallInvite": "An invite to a group call or livestream",
    "object_phone.exportedGroupCallInvite_param_link_type_string": "Invite link",
    "object_updateChatDefaultBannedRights": "Default banned rights in a [normal chat](https:\/\/core.telegram.org\/api\/channel) were updated",
    "object_updateChatDefaultBannedRights_param_peer_type_Peer": "The chat",
    "object_updateChatDefaultBannedRights_param_default_banned_rights_type_ChatBannedRights": "New default banned rights",
    "object_updateChatDefaultBannedRights_param_version_type_int": "Version",
    "object_inputMessagesFilterRoundVideo": "Return only round videos",
    "object_help.appConfig": "Contains various [client configuration parameters](https:\/\/core.telegram.org\/api\/config#client-configuration)",
    "object_help.appConfig_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_help.appConfig_param_config_type_JSONValue": "[Client configuration parameters](https:\/\/core.telegram.org\/api\/config#client-configuration)",
    "object_updateSavedRingtones": "The list of saved notification sounds has changed, use [account.getSavedRingtones](..\/methods\/account.getSavedRingtones.md) to fetch the new list.",
    "object_updateUserPhoto": "Change of contact's profile photo.",
    "object_updateUserPhoto_param_user_id_type_long": "User identifier",
    "object_updateUserPhoto_param_date_type_int": "Date of photo update.",
    "object_updateUserPhoto_param_photo_type_UserProfilePhoto": "New profile photo",
    "object_updateUserPhoto_param_previous_type_Bool": "([boolTrue](..\/constructors\/boolTrue.md)), if one of the previously used photos is set a profile photo.",
    "object_inputReportReasonGeoIrrelevant": "Report an irrelevant geogroup",
    "object_secureData": "Secure [passport](https:\/\/core.telegram.org\/passport) data, for more info [see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#securedata)",
    "object_secureData_param_data_type_bytes": "Data",
    "object_secureData_param_data_hash_type_bytes": "Data hash",
    "object_secureData_param_secret_type_bytes": "Secret",
    "object_inputStickerSetEmojiGenericAnimations": "Generic animation stickerset containing animations to play when [reacting to messages using a normal emoji without a custom animation](https:\/\/core.telegram.org\/api\/reactions)",
    "object_auth.codeTypeCall": "The next time, the authentication code is to be delivered via an outgoing phone call.",
    "object_stickerKeyword": "Keywords for a certain sticker",
    "object_stickerKeyword_param_document_id_type_long": "Sticker ID",
    "object_stickerKeyword_param_keyword_type_Vector<string>": "Keywords",
    "object_reactionCustomEmoji": "[Custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) message reaction",
    "object_reactionCustomEmoji_param_document_id_type_long": "[Custom emoji document ID](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "object_messages.messageEditData": "Message edit data for media",
    "object_messages.messageEditData_param_caption_type_flags.0?true": "Media caption, if the specified media's caption can be edited",
    "object_messageRange": "Indicates a range of chat messages",
    "object_messageRange_param_min_id_type_int": "Start of range (message ID)",
    "object_messageRange_param_max_id_type_int": "End of range (message ID)",
    "object_textEmpty": "Empty rich text element",
    "object_updates.differenceSlice": "Incomplete list of occurred events.",
    "object_updates.differenceSlice_param_new_messages_type_Vector<Message>": "List of new messages",
    "object_updates.differenceSlice_param_new_encrypted_messages_type_Vector<EncryptedMessage>": "New messages from the [encrypted event sequence](https:\/\/core.telegram.org\/api\/updates)",
    "object_updates.differenceSlice_param_other_updates_type_Vector<Update>": "List of updates",
    "object_updates.differenceSlice_param_chats_type_Vector<Chat>": "List of chats mentioned in events",
    "object_updates.differenceSlice_param_users_type_Vector<User>": "List of users mentioned in events",
    "object_updates.differenceSlice_param_intermediate_state_type_updates.State": "Intermediary state",
    "object_messageUserVote": "How a user voted in a poll",
    "object_messageUserVote_param_user_id_type_long": "User ID",
    "object_messageUserVote_param_option_type_bytes": "The option chosen by the user",
    "object_messageUserVote_param_date_type_int": "When did the user cast the vote",
    "object_privacyKeyForwards": "Whether messages forwarded from the user will be [anonymously forwarded](https:\/\/telegram.org\/blog\/unsend-privacy-emoji#anonymous-forwarding)",
    "object_storage.fileMov": "Quicktime video. MIME type: `video\/quicktime`.",
    "object_baseThemeTinted": "Tinted theme",
    "object_inputSecureFileUploaded": "Uploaded secure file, for more info [see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#inputsecurefile)",
    "object_inputSecureFileUploaded_param_id_type_long": "Secure file ID",
    "object_inputSecureFileUploaded_param_parts_type_int": "Secure file part count",
    "object_inputSecureFileUploaded_param_md5_checksum_type_string": "MD5 hash of encrypted uploaded file, to be checked server-side",
    "object_inputSecureFileUploaded_param_file_hash_type_bytes": "File hash",
    "object_inputSecureFileUploaded_param_secret_type_bytes": "Secret",
    "object_recentMeUrlChatInvite": "Recent t.me invite link to a chat",
    "object_recentMeUrlChatInvite_param_url_type_string": "t.me URL",
    "object_recentMeUrlChatInvite_param_chat_invite_type_ChatInvite": "Chat invitation",
    "object_stickers.suggestedShortName": "A suggested short name for a stickerpack",
    "object_stickers.suggestedShortName_param_short_name_type_string": "Suggested short name",
    "object_channelFull": "Full info about a [channel](https:\/\/core.telegram.org\/api\/channel#channels), [supergroup](https:\/\/core.telegram.org\/api\/channel#supergroups) or [gigagroup](https:\/\/core.telegram.org\/api\/channel#gigagroups).",
    "object_channelFull_param_can_view_participants_type_flags.3?true": "Can we view the participant list?",
    "object_channelFull_param_can_set_username_type_flags.6?true": "Can we set the channel's username?",
    "object_channelFull_param_can_set_stickers_type_flags.7?true": "Can we [associate](..\/methods\/channels.setStickers.md) a stickerpack to the supergroup?",
    "object_channelFull_param_hidden_prehistory_type_flags.10?true": "Is the history before we joined hidden to us?",
    "object_channelFull_param_can_set_location_type_flags.16?true": "Can we set the geolocation of this group (for geogroups)",
    "object_channelFull_param_has_scheduled_type_flags.19?true": "Whether scheduled messages are available",
    "object_channelFull_param_can_view_stats_type_flags.20?true": "Can the user view [channel\/supergroup statistics](https:\/\/core.telegram.org\/api\/stats)",
    "object_channelFull_param_blocked_type_flags.22?true": "Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in [discussion replies via @replies](https:\/\/core.telegram.org\/api\/discussion)",
    "object_channelFull_param_flags2_type_#": "Flags, see [TL conditional fields](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields)",
    "object_channelFull_param_can_delete_channel_type_flags2.0?true": "Can we delete this channel?",
    "object_channelFull_param_antispam_type_flags2.1?true": "Whether [native antispam](https:\/\/core.telegram.org\/api\/antispam) functionality is enabled in this supergroup.",
    "object_channelFull_param_participants_hidden_type_flags2.2?true": "Whether the participant list is hidden.",
    "object_channelFull_param_translations_disabled_type_flags2.3?true": "Whether the [real-time chat translation popup](https:\/\/core.telegram.org\/api\/translation) should be hidden.",
    "object_channelFull_param_id_type_long": "ID of the channel",
    "object_channelFull_param_about_type_string": "Info about the channel",
    "object_channelFull_param_participants_count_type_flags.0?int": "Number of participants of the channel",
    "object_channelFull_param_admins_count_type_flags.1?int": "Number of channel admins",
    "object_channelFull_param_kicked_count_type_flags.2?int": "Number of users [kicked](https:\/\/core.telegram.org\/api\/rights) from the channel",
    "object_channelFull_param_banned_count_type_flags.2?int": "Number of users [banned](https:\/\/core.telegram.org\/api\/rights) from the channel",
    "object_channelFull_param_online_count_type_flags.13?int": "Number of users currently online",
    "object_channelFull_param_read_inbox_max_id_type_int": "Position up to which all incoming messages are read.",
    "object_channelFull_param_read_outbox_max_id_type_int": "Position up to which all outgoing messages are read.",
    "object_channelFull_param_unread_count_type_int": "Count of unread messages",
    "object_channelFull_param_chat_photo_type_Photo": "Channel picture",
    "object_channelFull_param_notify_settings_type_PeerNotifySettings": "Notification settings",
    "object_channelFull_param_exported_invite_type_flags.23?ExportedChatInvite": "Invite link",
    "object_channelFull_param_bot_info_type_Vector<BotInfo>": "Info about bots in the channel\/supergroup",
    "object_channelFull_param_migrated_from_chat_id_type_flags.4?long": "The chat ID from which this group was [migrated](https:\/\/core.telegram.org\/api\/channel)",
    "object_channelFull_param_migrated_from_max_id_type_flags.4?int": "The message ID in the original chat at which this group was [migrated](https:\/\/core.telegram.org\/api\/channel)",
    "object_channelFull_param_pinned_msg_id_type_flags.5?int": "Message ID of the last [pinned message](https:\/\/core.telegram.org\/api\/pin)",
    "object_channelFull_param_stickerset_type_flags.8?StickerSet": "Associated stickerset",
    "object_channelFull_param_available_min_id_type_flags.9?int": "Identifier of a maximum unavailable message in a channel due to hidden history.",
    "object_channelFull_param_folder_id_type_flags.11?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_channelFull_param_linked_chat_id_type_flags.14?long": "ID of the linked [discussion chat](https:\/\/core.telegram.org\/api\/discussion) for channels",
    "object_channelFull_param_location_type_flags.15?ChannelLocation": "Location of the geogroup",
    "object_channelFull_param_slowmode_seconds_type_flags.17?int": "If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds",
    "object_channelFull_param_slowmode_next_send_date_type_flags.18?int": "Indicates when the user will be allowed to send another message in the supergroup (unixtime)",
    "object_channelFull_param_stats_dc_type_flags.12?int": "If set, specifies the DC to use for fetching channel statistics",
    "object_channelFull_param_pts_type_int": "Latest [PTS](https:\/\/core.telegram.org\/api\/updates) for this channel",
    "object_channelFull_param_call_type_flags.21?InputGroupCall": "Livestream or group call information",
    "object_channelFull_param_ttl_period_type_flags.24?int": "Time-To-Live of messages in this channel or supergroup",
    "object_channelFull_param_pending_suggestions_type_flags.25?Vector<string>": "A list of [suggested actions](https:\/\/core.telegram.org\/api\/config#suggestions) for the supergroup admin, [see here for more info \u00bb](https:\/\/core.telegram.org\/api\/config#suggestions).",
    "object_channelFull_param_groupcall_default_join_as_type_flags.26?Peer": "When using [phone.getGroupCallJoinAs](..\/methods\/phone.getGroupCallJoinAs.md) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default.",
    "object_channelFull_param_theme_emoticon_type_flags.27?string": "Emoji representing a specific chat theme",
    "object_channelFull_param_requests_pending_type_flags.28?int": "Pending [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "object_channelFull_param_recent_requesters_type_flags.28?Vector<long>": "IDs of users who requested to join recently",
    "object_channelFull_param_default_send_as_type_flags.29?Peer": "Default peer used for sending messages to this channel",
    "object_channelFull_param_available_reactions_type_flags.30?ChatReactions": "Allowed [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_messages.stickerSetNotModified": "The stickerset hasn't changed",
    "object_emojiGroup": "Represents an [emoji category](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories).",
    "object_emojiGroup_param_title_type_string": "Category name, i.e. \"Animals\", \"Flags\", \"Faces\" and so on...",
    "object_emojiGroup_param_icon_emoji_id_type_long": "A single custom emoji used as preview for the category.",
    "object_emojiGroup_param_emoticons_type_Vector<string>": "A list of UTF-8 emojis, matching the category.",
    "object_channelAdminLogEventActionChangeTheme": "The chat theme was changed",
    "object_channelAdminLogEventActionChangeTheme_param_prev_value_type_string": "Previous theme emoji",
    "object_channelAdminLogEventActionChangeTheme_param_new_value_type_string": "New theme emoji",
    "object_help.inviteText": "Text of a text message with an invitation to install Telegram.",
    "object_help.inviteText_param_message_type_string": "Text of the message",
    "object_chatOnlines": "Number of online users in a chat",
    "object_chatOnlines_param_onlines_type_int": "Number of online users",
    "object_topPeerCategoryForwardChats": "Chats to which the users often forwards messages to",
    "object_inputNotifyBroadcasts": "All [channels](https:\/\/core.telegram.org\/api\/channel)",
    "object_pageBlockSlideshow": "Slideshow",
    "object_pageBlockSlideshow_param_items_type_Vector<PageBlock>": "Slideshow items",
    "object_pageBlockSlideshow_param_caption_type_PageCaption": "Caption",
    "object_help.support": "Info on support user.",
    "object_help.support_param_phone_number_type_string": "Phone number",
    "object_help.support_param_user_type_User": "User",
    "object_updatePinnedMessages": "Some messages were pinned in a chat",
    "object_updatePinnedMessages_param_pinned_type_flags.0?true": "Whether the messages were pinned or unpinned",
    "object_updatePinnedMessages_param_peer_type_Peer": "Peer",
    "object_updatePinnedMessages_param_messages_type_Vector<int>": "Message IDs",
    "object_updatePinnedMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updatePinnedMessages_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_phoneCallAccepted": "An accepted phone call",
    "object_phoneCallAccepted_param_video_type_flags.6?true": "Whether this is a video call",
    "object_phoneCallAccepted_param_id_type_long": "ID of accepted phone call",
    "object_phoneCallAccepted_param_access_hash_type_long": "Access hash of phone call",
    "object_phoneCallAccepted_param_date_type_int": "When was the call accepted",
    "object_phoneCallAccepted_param_admin_id_type_long": "ID of the call creator",
    "object_phoneCallAccepted_param_participant_id_type_long": "ID of the other user in the call",
    "object_phoneCallAccepted_param_g_b_type_bytes": "B parameter for [secure E2E phone call key exchange](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "object_phoneCallAccepted_param_protocol_type_PhoneCallProtocol": "Protocol to use for phone call",
    "object_peerChannel": "Channel\/supergroup",
    "object_peerChannel_param_channel_id_type_long": "Channel ID",
    "object_textSubscript": "Subscript text",
    "object_textSubscript_param_text_type_RichText": "Text",
    "object_channelAdminLogEventActionChangeAvailableReactions": "The set of allowed [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions) for this channel has changed",
    "object_channelAdminLogEventActionChangeAvailableReactions_param_prev_value_type_ChatReactions": "Previously allowed reaction emojis",
    "object_channelAdminLogEventActionChangeAvailableReactions_param_new_value_type_ChatReactions": "New allowed reaction emojis",
    "object_phone.groupCallStreamRtmpUrl": "RTMP URL and stream key to be used in streaming software",
    "object_phone.groupCallStreamRtmpUrl_param_url_type_string": "RTMP URL",
    "object_phone.groupCallStreamRtmpUrl_param_key_type_string": "Stream key",
    "object_updateChannelMessageViews": "The view counter of a message in a channel has changed",
    "object_updateChannelMessageViews_param_channel_id_type_long": "Channel ID",
    "object_updateChannelMessageViews_param_id_type_int": "ID of the message",
    "object_updateChannelMessageViews_param_views_type_int": "New view counter",
    "object_messages.dialogs": "Full list of chats with messages and auxiliary data.",
    "object_messages.dialogs_param_dialogs_type_Vector<Dialog>": "List of chats",
    "object_messages.dialogs_param_messages_type_Vector<Message>": "List of last messages from each chat",
    "object_messages.dialogs_param_chats_type_Vector<Chat>": "List of groups mentioned in the chats",
    "object_messages.dialogs_param_users_type_Vector<User>": "List of users mentioned in messages and groups",
    "object_inputAppEvent": "Event that occurred in the application.",
    "object_inputAppEvent_param_time_type_double": "Client's exact timestamp for the event",
    "object_inputAppEvent_param_type_type_string": "Type of event",
    "object_inputAppEvent_param_peer_type_long": "Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object",
    "object_inputAppEvent_param_data_type_JSONValue": "Details of the event",
    "object_messageActionSecureValuesSentMe": "Secure [telegram passport](https:\/\/core.telegram.org\/passport) values were received",
    "object_messageActionSecureValuesSentMe_param_values_type_Vector<SecureValue>": "Vector with information about documents and other Telegram Passport elements that were shared with the bot",
    "object_messageActionSecureValuesSentMe_param_credentials_type_SecureCredentialsEncrypted": "Encrypted credentials required to decrypt the data",
    "object_recentMeUrlUnknown": "Unknown t.me url",
    "object_recentMeUrlUnknown_param_url_type_string": "URL",
    "object_contacts.resolvedPeer": "Resolved peer",
    "object_contacts.resolvedPeer_param_peer_type_Peer": "The peer",
    "object_contacts.resolvedPeer_param_chats_type_Vector<Chat>": "Chats",
    "object_contacts.resolvedPeer_param_users_type_Vector<User>": "Users",
    "object_sendMessageEmojiInteraction": "User has clicked on an animated emoji triggering a [reaction, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/animated-emojis#emoji-reactions).",
    "object_sendMessageEmojiInteraction_param_emoticon_type_string": "Emoji",
    "object_sendMessageEmojiInteraction_param_msg_id_type_int": "Message ID of the animated emoji that was clicked",
    "object_sendMessageEmojiInteraction_param_interaction_type_DataJSON": "A JSON object with interaction info, [click here for more info \u00bb](https:\/\/core.telegram.org\/api\/animated-emojis#emoji-reactions)",
    "object_inputStorePaymentPremiumSubscription": "Info about a Telegram Premium purchase",
    "object_inputStorePaymentPremiumSubscription_param_restore_type_flags.0?true": "Pass true if this is a restore of a Telegram Premium purchase; only for the App Store",
    "object_inputStorePaymentPremiumSubscription_param_upgrade_type_flags.1?true": "Pass true if this is an upgrade from a monthly subscription to a yearly subscription; only for App Store",
    "object_inputMessageID": "Message by ID",
    "object_inputMessageID_param_id_type_int": "Message ID",
    "object_updateTheme": "A cloud theme was updated",
    "object_updateTheme_param_theme_type_Theme": "Theme",
    "object_textStrike": "<del>Strikethrough<\/del> text",
    "object_textStrike_param_text_type_RichText": "Text",
    "object_botInlineMessageMediaInvoice": "Send an invoice",
    "object_botInlineMessageMediaInvoice_param_shipping_address_requested_type_flags.1?true": "Set this flag if you require the user's shipping address to complete the order",
    "object_botInlineMessageMediaInvoice_param_test_type_flags.3?true": "Test invoice",
    "object_botInlineMessageMediaInvoice_param_title_type_string": "Product name, 1-32 characters",
    "object_botInlineMessageMediaInvoice_param_description_type_string": "Product description, 1-255 characters",
    "object_botInlineMessageMediaInvoice_param_photo_type_flags.0?WebDocument": "Product photo",
    "object_botInlineMessageMediaInvoice_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_botInlineMessageMediaInvoice_param_total_amount_type_long": "Total price in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_botInlineMessageMediaInvoice_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_botAppNotModified": "Bot app info hasn't changed.",
    "object_emailVerifyPurposeLoginChange": "Email verification purpose: change login email",
    "object_attachMenuPeerTypeBotPM": "The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu)",
    "object_updates.differenceTooLong": "The difference is [too long](https:\/\/core.telegram.org\/api\/updates#recovering-gaps), and the specified state must be used to refetch updates.",
    "object_updates.differenceTooLong_param_pts_type_int": "The new state to use.",
    "object_statsGroupTopPoster": "Information about an active user in a supergroup",
    "object_statsGroupTopPoster_param_user_id_type_long": "User ID",
    "object_statsGroupTopPoster_param_messages_type_int": "Number of messages for [statistics](https:\/\/core.telegram.org\/api\/stats) period in consideration",
    "object_statsGroupTopPoster_param_avg_chars_type_int": "Average number of characters per message",
    "object_statsGroupTopAdmin": "Information about an active admin in a supergroup",
    "object_statsGroupTopAdmin_param_user_id_type_long": "User ID",
    "object_statsGroupTopAdmin_param_deleted_type_int": "Number of deleted messages for [statistics](https:\/\/core.telegram.org\/api\/stats) period in consideration",
    "object_statsGroupTopAdmin_param_kicked_type_int": "Number of kicked users for [statistics](https:\/\/core.telegram.org\/api\/stats) period in consideration",
    "object_statsGroupTopAdmin_param_banned_type_int": "Number of banned users for [statistics](https:\/\/core.telegram.org\/api\/stats) period in consideration",
    "object_messageEntityUnderline": "Message entity representing underlined text.",
    "object_messageEntityUnderline_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityUnderline_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityBankCard": "Indicates a credit card number",
    "object_messageEntityBankCard_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityBankCard_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_sendMessageUploadDocumentAction": "User is uploading a file.",
    "object_sendMessageUploadDocumentAction_param_progress_type_int": "Progress percentage",
    "object_help.promoDataEmpty": "No PSA\/MTProxy info is available",
    "object_help.promoDataEmpty_param_expires_type_int": "Re-fetch PSA\/MTProxy info after the specified number of seconds",
    "object_channelAdminLogEventActionEditMessage": "A message was edited",
    "object_channelAdminLogEventActionEditMessage_param_prev_message_type_Message": "Old message",
    "object_channelAdminLogEventActionEditMessage_param_new_message_type_Message": "New message",
    "object_vector": "A universal vector constructor.",
    "object_jsonBool": "JSON boolean value",
    "object_jsonBool_param_value_type_Bool": "Value",
    "object_channelParticipantAdmin": "Admin",
    "object_channelParticipantAdmin_param_can_edit_type_flags.0?true": "Can this admin promote other admins with the same permissions?",
    "object_channelParticipantAdmin_param_self_type_flags.1?true": "Is this the current user",
    "object_channelParticipantAdmin_param_user_id_type_long": "Admin user ID",
    "object_channelParticipantAdmin_param_inviter_id_type_flags.1?long": "User that invited the admin to the channel\/group",
    "object_channelParticipantAdmin_param_promoted_by_type_long": "User that promoted the user to admin",
    "object_channelParticipantAdmin_param_date_type_int": "When did the user join",
    "object_channelParticipantAdmin_param_admin_rights_type_ChatAdminRights": "Admin [rights](https:\/\/core.telegram.org\/api\/rights)",
    "object_channelParticipantAdmin_param_rank_type_flags.2?string": "The role (rank) of the admin in the group: just an arbitrary string, `admin` by default",
    "object_webPageNotModified": "The preview of the webpage hasn't changed",
    "object_webPageNotModified_param_cached_page_views_type_flags.0?int": "Page view count",
    "object_inputDocumentFileLocation": "Document location (video, voice, audio, basically every type except photo)",
    "object_inputDocumentFileLocation_param_id_type_long": "Document ID",
    "object_inputDocumentFileLocation_param_access_hash_type_long": "**access\\_hash** parameter from the [document](..\/constructors\/document.md) constructor",
    "object_inputDocumentFileLocation_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_inputDocumentFileLocation_param_thumb_size_type_string": "Thumbnail size to download the thumbnail",
    "object_keyboardButtonBuy": "Button to buy a product",
    "object_keyboardButtonBuy_param_text_type_string": "Button text",
    "object_channelAdminLogEventActionToggleInvites": "Invites were enabled\/disabled",
    "object_channelAdminLogEventActionToggleInvites_param_new_value_type_Bool": "New value",
    "object_botCommandScopeUsers": "The specified bot commands will only be valid in all private chats with users.",
    "object_chatlists.chatlistUpdates": "Updated information about a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatlists.chatlistUpdates_param_missing_peers_type_Vector<Peer>": "New peers to join",
    "object_chatlists.chatlistUpdates_param_chats_type_Vector<Chat>": "Related chat information",
    "object_chatlists.chatlistUpdates_param_users_type_Vector<User>": "Related user information",
    "object_messages.peerSettings": "Peer settings",
    "object_messages.peerSettings_param_settings_type_PeerSettings": "Peer settings",
    "object_messages.peerSettings_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_messages.peerSettings_param_users_type_Vector<User>": "Mentioned users",
    "object_storage.fileMp4": "MPEG-4 video. MIME type: `video\/mp4`.",
    "object_help.supportName": "Localized name for telegram support",
    "object_help.supportName_param_name_type_string": "Localized name",
    "object_account.savedRingtones": "A list of saved notification sounds",
    "object_account.savedRingtones_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_account.savedRingtones_param_ringtones_type_Vector<Document>": "Saved notification sounds",
    "object_inputBotInlineMessageMediaGeo": "Geolocation",
    "object_inputBotInlineMessageMediaGeo_param_geo_point_type_InputGeoPoint": "Geolocation",
    "object_inputBotInlineMessageMediaGeo_param_heading_type_flags.0?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a direction in which the location moves, in degrees; 1-360",
    "object_inputBotInlineMessageMediaGeo_param_period_type_flags.1?int": "Validity period",
    "object_inputBotInlineMessageMediaGeo_param_proximity_notification_radius_type_flags.3?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000)",
    "object_inputBotInlineMessageMediaGeo_param_reply_markup_type_flags.2?ReplyMarkup": "Reply markup for bot\/inline keyboards",
    "object_updatePinnedDialogs": "Pinned dialogs were updated",
    "object_updatePinnedDialogs_param_folder_id_type_flags.1?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_updatePinnedDialogs_param_order_type_flags.0?Vector<DialogPeer>": "New order of pinned dialogs",
    "object_inputFile": "Defines a file saved in parts using the method [upload.saveFilePart](..\/methods\/upload.saveFilePart.md).",
    "object_inputFile_param_id_type_long": "Random file identifier created by the client",
    "object_inputFile_param_parts_type_int": "Number of parts saved",
    "object_inputFile_param_name_type_string": "Full name of the file",
    "object_inputFile_param_md5_checksum_type_string": "In case the file's [md5-hash](https:\/\/en.wikipedia.org\/wiki\/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use",
    "object_messages.transcribedAudio": "[Transcribed text from a voice message \u00bb](https:\/\/core.telegram.org\/api\/transcribe)",
    "object_messages.transcribedAudio_param_pending_type_flags.0?true": "Whether the transcription is partial because audio transcription is still in progress, if set the user may receive further [updateTranscribedAudio](..\/constructors\/updateTranscribedAudio.md) updates with the updated transcription.",
    "object_messages.transcribedAudio_param_transcription_id_type_long": "Transcription ID",
    "object_messages.transcribedAudio_param_text_type_string": "Transcripted text",
    "object_attachMenuBot": "Represents a [bot web app that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBot_param_inactive_type_flags.0?true": "Whether this bot attachment menu entry should be shown in the attachment menu (toggle using [messages.toggleBotInAttachMenu](..\/methods\/messages.toggleBotInAttachMenu.md))",
    "object_attachMenuBot_param_has_settings_type_flags.1?true": "True, if the bot supports the [\"settings\\_button\\_pressed\" event \u00bb](https:\/\/core.telegram.org\/api\/bots\/webapps#settings-button-pressed)",
    "object_attachMenuBot_param_request_write_access_type_flags.2?true": "Whether the bot would like to send messages to the user.",
    "object_attachMenuBot_param_bot_id_type_long": "Bot ID",
    "object_attachMenuBot_param_short_name_type_string": "Attachment menu item name",
    "object_attachMenuBot_param_peer_types_type_Vector<AttachMenuPeerType>": "List of dialog types where this attachment menu entry should be shown",
    "object_attachMenuBot_param_icons_type_Vector<AttachMenuBotIcon>": "List of platform-specific static icons and animations to use for the attachment menu button",
    "object_account.authorizationForm": "[Telegram Passport](https:\/\/core.telegram.org\/passport) authorization form",
    "object_account.authorizationForm_param_required_types_type_Vector<SecureRequiredType>": "Required [Telegram Passport](https:\/\/core.telegram.org\/passport) documents",
    "object_account.authorizationForm_param_values_type_Vector<SecureValue>": "Already submitted [Telegram Passport](https:\/\/core.telegram.org\/passport) documents",
    "object_account.authorizationForm_param_errors_type_Vector<SecureValueError>": "[Telegram Passport](https:\/\/core.telegram.org\/passport) errors",
    "object_account.authorizationForm_param_users_type_Vector<User>": "Info about the bot to which the form will be submitted",
    "object_account.authorizationForm_param_privacy_policy_url_type_flags.0?string": "URL of the service's privacy policy",
    "object_channelAdminLogEventActionChangeStickerSet": "The supergroup's stickerset was changed",
    "object_channelAdminLogEventActionChangeStickerSet_param_prev_stickerset_type_InputStickerSet": "Previous stickerset",
    "object_channelAdminLogEventActionChangeStickerSet_param_new_stickerset_type_InputStickerSet": "New stickerset",
    "object_storage.filePng": "PNG image. MIME type: `image\/png`.",
    "object_inlineQueryPeerTypeMegagroup": "Peer type: [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_paymentFormMethod": "Represents an additional payment method",
    "object_paymentFormMethod_param_url_type_string": "URL to open in a webview to process the payment",
    "object_paymentFormMethod_param_title_type_string": "Payment method description",
    "object_inputKeyboardButtonUserProfile": "Button that links directly to a user profile",
    "object_inputKeyboardButtonUserProfile_param_text_type_string": "Button text",
    "object_inputKeyboardButtonUserProfile_param_user_id_type_InputUser": "User ID",
    "object_sendMessageRecordAudioAction": "User is recording a voice message.",
    "object_pageTableRow": "Table row",
    "object_pageTableRow_param_cells_type_Vector<PageTableCell>": "Table cells",
    "object_topPeerCategoryCorrespondents": "Users we've chatted most frequently with",
    "object_storage.fileUnknown": "Unknown type.",
    "object_messageEntityMention": "Message entity [mentioning](https:\/\/core.telegram.org\/api\/mentions) a user by `@username`; [messageEntityMentionName](..\/constructors\/messageEntityMentionName.md) can also be used to mention users by their ID.",
    "object_messageEntityMention_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityMention_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_error": "Error.",
    "object_error_param_code_type_int": "Error code",
    "object_error_param_text_type_string": "Message",
    "object_channelAdminLogEventActionParticipantMute": "A group call participant was muted",
    "object_channelAdminLogEventActionParticipantMute_param_participant_type_GroupCallParticipant": "The participant that was muted",
    "object_inputStickerSetEmojiDefaultTopicIcons": "Default [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) stickerset for [forum topic icons](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_messages.messageViews": "View, forward counter + info about replies",
    "object_messages.messageViews_param_views_type_Vector<MessageViews>": "View, forward counter + info about replies",
    "object_messages.messageViews_param_chats_type_Vector<Chat>": "Chats mentioned in constructor",
    "object_messages.messageViews_param_users_type_Vector<User>": "Users mentioned in constructor",
    "object_inputMediaDocument": "Forwarded document",
    "object_inputMediaDocument_param_spoiler_type_flags.2?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaDocument_param_id_type_InputDocument": "The document to be forwarded.",
    "object_inputMediaDocument_param_ttl_seconds_type_flags.0?int": "Time to live of self-destructing document",
    "object_inputMediaDocument_param_query_type_flags.1?string": "Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance.",
    "object_updateChatParticipantAdd": "New group member.",
    "object_updateChatParticipantAdd_param_chat_id_type_long": "Group ID",
    "object_updateChatParticipantAdd_param_user_id_type_long": "ID of the new member",
    "object_updateChatParticipantAdd_param_inviter_id_type_long": "ID of the user, who added member to the group",
    "object_updateChatParticipantAdd_param_date_type_int": "When was the participant added",
    "object_updateChatParticipantAdd_param_version_type_int": "Chat version number",
    "object_payments.paymentReceipt": "Receipt",
    "object_payments.paymentReceipt_param_date_type_int": "Date of generation",
    "object_payments.paymentReceipt_param_bot_id_type_long": "Bot ID",
    "object_payments.paymentReceipt_param_provider_id_type_long": "Provider ID",
    "object_payments.paymentReceipt_param_title_type_string": "Title",
    "object_payments.paymentReceipt_param_description_type_string": "Description",
    "object_payments.paymentReceipt_param_photo_type_flags.2?WebDocument": "Photo",
    "object_payments.paymentReceipt_param_invoice_type_Invoice": "Invoice",
    "object_payments.paymentReceipt_param_info_type_flags.0?PaymentRequestedInfo": "Info",
    "object_payments.paymentReceipt_param_shipping_type_flags.1?ShippingOption": "Selected shipping option",
    "object_payments.paymentReceipt_param_tip_amount_type_flags.3?long": "Tipped amount",
    "object_payments.paymentReceipt_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_payments.paymentReceipt_param_total_amount_type_long": "Total amount in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_payments.paymentReceipt_param_credentials_title_type_string": "Payment credential name",
    "object_payments.paymentReceipt_param_users_type_Vector<User>": "Users",
    "object_users.userFull": "Full user information",
    "object_users.userFull_param_full_user_type_UserFull": "Full user information",
    "object_users.userFull_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_users.userFull_param_users_type_Vector<User>": "Mentioned users",
    "object_auth.authorization": "Contains user authorization info.",
    "object_auth.authorization_param_setup_password_required_type_flags.1?true": "Suggests the user to set up a 2-step verification password to be able to log in again",
    "object_auth.authorization_param_otherwise_relogin_days_type_flags.1?int": "Iff setup\\_password\\_required is set and the user declines to set a 2-step verification password, they will be able to log into their account via SMS again only after this many days pass.",
    "object_auth.authorization_param_tmp_sessions_type_flags.0?int": "Temporary [passport](https:\/\/core.telegram.org\/passport) sessions",
    "object_auth.authorization_param_future_auth_token_type_flags.2?bytes": "A [future auth token](https:\/\/core.telegram.org\/api\/auth#future-auth-tokens)",
    "object_auth.authorization_param_user_type_User": "Info on authorized user",
    "object_topPeer": "Top peer",
    "object_topPeer_param_peer_type_Peer": "Peer",
    "object_topPeer_param_rating_type_double": "Rating as computed in [top peer rating \u00bb](https:\/\/core.telegram.org\/api\/top-rating)",
    "object_messages.discussionMessage": "Information about a [message thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messages.discussionMessage_param_messages_type_Vector<Message>": "Discussion messages",
    "object_messages.discussionMessage_param_max_id_type_flags.0?int": "Message ID of latest reply in this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messages.discussionMessage_param_read_inbox_max_id_type_flags.1?int": "Message ID of latest read incoming message in this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messages.discussionMessage_param_read_outbox_max_id_type_flags.2?int": "Message ID of latest read outgoing message in this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messages.discussionMessage_param_unread_count_type_int": "Number of unread messages",
    "object_messages.discussionMessage_param_chats_type_Vector<Chat>": "Chats mentioned in constructor",
    "object_messages.discussionMessage_param_users_type_Vector<User>": "Users mentioned in constructor",
    "object_channelParticipantLeft": "A participant that left the channel\/supergroup",
    "object_channelParticipantLeft_param_peer_type_Peer": "The peer that left",
    "object_updatePinnedChannelMessages": "Messages were pinned\/unpinned in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_updatePinnedChannelMessages_param_pinned_type_flags.0?true": "Whether the messages were pinned or unpinned",
    "object_updatePinnedChannelMessages_param_channel_id_type_long": "Channel ID",
    "object_updatePinnedChannelMessages_param_messages_type_Vector<int>": "Messages",
    "object_updatePinnedChannelMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updatePinnedChannelMessages_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateEditMessage": "A message was edited",
    "object_updateEditMessage_param_message_type_Message": "The new edited message",
    "object_updateEditMessage_param_pts_type_int": "[PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateEditMessage_param_pts_count_type_int": "[PTS count](https:\/\/core.telegram.org\/api\/updates)",
    "object_pageBlockDivider": "An empty block separating a page",
    "object_inputStickerSetEmojiDefaultStatuses": "Default [custom emoji status](https:\/\/core.telegram.org\/api\/emoji-status) stickerset",
    "object_wallPaperNoFile": "Represents a [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) only based on colors\/gradients.",
    "object_wallPaperNoFile_param_id_type_long": "Wallpaper ID",
    "object_wallPaperNoFile_param_default_type_flags.1?true": "Whether this is the default wallpaper",
    "object_wallPaperNoFile_param_dark_type_flags.4?true": "Whether this wallpaper should be used in dark mode.",
    "object_wallPaperNoFile_param_settings_type_flags.2?WallPaperSettings": "Info on how to generate the wallpaper.",
    "object_inputReportReasonOther": "Other",
    "object_inputPrivacyKeyAddedByPhone": "Whether people can add you to their contact list by your phone number",
    "object_upload.cdnFile": "Represent a chunk of a [CDN](https:\/\/core.telegram.org\/cdn) file.",
    "object_upload.cdnFile_param_bytes_type_bytes": "The data",
    "object_updateFolderPeers": "The peer list of a [peer folder](https:\/\/core.telegram.org\/api\/folders#peer-folders) was updated",
    "object_updateFolderPeers_param_folder_peers_type_Vector<FolderPeer>": "New peer list",
    "object_updateFolderPeers_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateFolderPeers_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_peerUser": "Chat partner",
    "object_peerUser_param_user_id_type_long": "User identifier",
    "object_auth.sentCodeTypeApp": "The code was sent through the telegram app",
    "object_auth.sentCodeTypeApp_param_length_type_int": "Length of the code in bytes",
    "object_reactionEmpty": "No reaction",
    "object_sponsoredMessage": "A [sponsored message](https:\/\/core.telegram.org\/api\/sponsored-messages).",
    "object_sponsoredMessage_param_recommended_type_flags.5?true": "Whether the message needs to be labeled as \"recommended\" instead of \"sponsored\"",
    "object_sponsoredMessage_param_show_peer_photo_type_flags.6?true": "Whether a profile photo bubble should be displayed for this message, like for messages sent in groups. The photo shown in the bubble is obtained either from the peer contained in `from_id`, or from `chat_invite`.",
    "object_sponsoredMessage_param_random_id_type_bytes": "Message ID",
    "object_sponsoredMessage_param_from_id_type_flags.3?Peer": "ID of the sender of the message",
    "object_sponsoredMessage_param_chat_invite_type_flags.4?ChatInvite": "Information about the chat invite hash specified in `chat_invite_hash`",
    "object_sponsoredMessage_param_chat_invite_hash_type_flags.4?string": "Chat invite",
    "object_sponsoredMessage_param_channel_post_type_flags.2?int": "Optional link to a channel post if `from_id` points to a channel",
    "object_sponsoredMessage_param_start_param_type_flags.0?string": "Parameter for the bot start message if the sponsored chat is a chat with a bot.",
    "object_sponsoredMessage_param_message_type_string": "Sponsored message",
    "object_sponsoredMessage_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_sponsoredMessage_param_sponsor_info_type_flags.7?string": "If set, contains additional information about the sponsor to be shown along with the message.",
    "object_sponsoredMessage_param_additional_info_type_flags.8?string": "If set, contains additional information about the sponsored message to be shown along with the message.",
    "object_contacts.topPeers": "Top peers",
    "object_contacts.topPeers_param_categories_type_Vector<TopPeerCategoryPeers>": "Top peers by top peer category",
    "object_contacts.topPeers_param_chats_type_Vector<Chat>": "Chats",
    "object_contacts.topPeers_param_users_type_Vector<User>": "Users",
    "object_messageMediaDocument": "Document (video, audio, voice, sticker, any media type except photo)",
    "object_messageMediaDocument_param_nopremium_type_flags.3?true": "Whether this is a normal sticker, if not set this is a premium sticker and a premium sticker animation must be played.",
    "object_messageMediaDocument_param_spoiler_type_flags.4?true": "Whether this media should be hidden behind a spoiler warning",
    "object_messageMediaDocument_param_document_type_flags.0?Document": "Attached document",
    "object_messageMediaDocument_param_ttl_seconds_type_flags.2?int": "Time to live of self-destructing document",
    "object_payments.paymentForm": "Payment form",
    "object_payments.paymentForm_param_can_save_credentials_type_flags.2?true": "Whether the user can choose to save credentials.",
    "object_payments.paymentForm_param_password_missing_type_flags.3?true": "Indicates that the user can save payment credentials, but only after setting up a [2FA password](https:\/\/core.telegram.org\/api\/srp) (currently the account doesn't have a [2FA password](https:\/\/core.telegram.org\/api\/srp))",
    "object_payments.paymentForm_param_form_id_type_long": "Form ID",
    "object_payments.paymentForm_param_bot_id_type_long": "Bot ID",
    "object_payments.paymentForm_param_title_type_string": "Form title",
    "object_payments.paymentForm_param_description_type_string": "Description",
    "object_payments.paymentForm_param_photo_type_flags.5?WebDocument": "Product photo",
    "object_payments.paymentForm_param_invoice_type_Invoice": "Invoice",
    "object_payments.paymentForm_param_provider_id_type_long": "Payment provider ID.",
    "object_payments.paymentForm_param_url_type_string": "Payment form URL",
    "object_payments.paymentForm_param_native_provider_type_flags.4?string": "Payment provider name.<br>One of the following:<br>\\- `stripe`",
    "object_payments.paymentForm_param_native_params_type_flags.4?DataJSON": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL.<br>A JSON object that can contain the following fields:<br><br>\\- `apple_pay_merchant_id`: Apple Pay merchant ID<br>\\- `google_pay_public_key`: Google Pay public key<br>\\- `need_country`: True, if the user country must be provided,<br>\\- `need_zip`: True, if the user ZIP\/postal code must be provided,<br>\\- `need_cardholder_name`: True, if the cardholder name must be provided<br>",
    "object_payments.paymentForm_param_additional_methods_type_flags.6?Vector<PaymentFormMethod>": "Additional payment methods",
    "object_payments.paymentForm_param_saved_info_type_flags.0?PaymentRequestedInfo": "Saved server-side order information",
    "object_payments.paymentForm_param_saved_credentials_type_flags.1?Vector<PaymentSavedCredentials>": "Contains information about saved card credentials",
    "object_payments.paymentForm_param_users_type_Vector<User>": "Users",
    "object_messages.botResults": "Result of a query to an inline bot",
    "object_messages.botResults_param_gallery_type_flags.0?true": "Whether the result is a picture gallery",
    "object_messages.botResults_param_query_id_type_long": "Query ID",
    "object_messages.botResults_param_next_offset_type_flags.1?string": "The next offset to use when navigating through results",
    "object_messages.botResults_param_switch_pm_type_flags.2?InlineBotSwitchPM": "Shown as a button on top of the remaining inline result list; if clicked, redirects the user to a private chat with the bot with the specified start parameter.",
    "object_messages.botResults_param_switch_webview_type_flags.3?InlineBotWebView": "Shown as a button on top of the remaining inline result list; if clicked, opens the specified [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#simple-web-apps).",
    "object_messages.botResults_param_results_type_Vector<BotInlineResult>": "The results",
    "object_messages.botResults_param_cache_time_type_int": "Caching validity of the results",
    "object_messages.botResults_param_users_type_Vector<User>": "Users mentioned in the results",
    "object_messageActionPaymentSent": "A payment was sent",
    "object_messageActionPaymentSent_param_recurring_init_type_flags.2?true": "Whether this is the first payment of a recurring payment we just subscribed to",
    "object_messageActionPaymentSent_param_recurring_used_type_flags.3?true": "Whether this payment is part of a recurring payment",
    "object_messageActionPaymentSent_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_messageActionPaymentSent_param_total_amount_type_long": "Price of the product in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_messageActionPaymentSent_param_invoice_slug_type_flags.0?string": "An invoice slug taken from an [invoice deep link](https:\/\/core.telegram.org\/api\/links#invoice-links) or from the [`premium_invoice_slug` app config parameter \u00bb](https:\/\/core.telegram.org\/api\/config#premium-invoice-slug)",
    "object_phoneCallDiscarded": "Indicates a discarded phone call",
    "object_phoneCallDiscarded_param_need_rating_type_flags.2?true": "Whether the server required the user to [rate](..\/methods\/phone.setCallRating.md) the call",
    "object_phoneCallDiscarded_param_need_debug_type_flags.3?true": "Whether the server required the client to [send](..\/methods\/phone.saveCallDebug.md) the libtgvoip call debug data",
    "object_phoneCallDiscarded_param_video_type_flags.6?true": "Whether the call was a video call",
    "object_phoneCallDiscarded_param_id_type_long": "Call ID",
    "object_phoneCallDiscarded_param_reason_type_flags.0?PhoneCallDiscardReason": "Why was the phone call discarded",
    "object_phoneCallDiscarded_param_duration_type_flags.1?int": "Duration of the phone call in seconds",
    "object_peerBlocked": "Information about a blocked peer",
    "object_peerBlocked_param_peer_id_type_Peer": "Peer ID",
    "object_peerBlocked_param_date_type_int": "When was the peer blocked",
    "object_auth.sentCodeTypeSms": "The code was sent via SMS",
    "object_auth.sentCodeTypeSms_param_length_type_int": "Length of the code in bytes",
    "object_attachMenuPeerTypeBroadcast": "The bot attachment menu entry is available in channels",
    "object_secureValueTypeInternalPassport": "Internal [passport](https:\/\/core.telegram.org\/passport)",
    "object_updateChannelReadMessagesContents": "The specified [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) messages were read",
    "object_updateChannelReadMessagesContents_param_channel_id_type_long": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) ID",
    "object_updateChannelReadMessagesContents_param_top_msg_id_type_flags.0?int": "[Forum topic ID](https:\/\/core.telegram.org\/api\/forum#forum-topics).",
    "object_updateChannelReadMessagesContents_param_messages_type_Vector<int>": "IDs of messages that were read",
    "object_inputBotInlineMessageGame": "A game",
    "object_inputBotInlineMessageGame_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_messages.highScores": "Highscores in a game",
    "object_messages.highScores_param_scores_type_Vector<HighScore>": "Highscores",
    "object_messages.highScores_param_users_type_Vector<User>": "Users, associated to the highscores",
    "object_channelParticipantsSearch": "Query participants by name",
    "object_channelParticipantsSearch_param_q_type_string": "Search query",
    "object_inputPhotoLegacyFileLocation": "DEPRECATED legacy photo file location",
    "object_inputPhotoLegacyFileLocation_param_id_type_long": "Photo ID",
    "object_inputPhotoLegacyFileLocation_param_access_hash_type_long": "Access hash",
    "object_inputPhotoLegacyFileLocation_param_file_reference_type_bytes": "File reference",
    "object_inputPhotoLegacyFileLocation_param_volume_id_type_long": "Volume ID",
    "object_inputPhotoLegacyFileLocation_param_local_id_type_int": "Local ID",
    "object_inputPhotoLegacyFileLocation_param_secret_type_long": "Secret",
    "object_updateRecentStickers": "The recent sticker list was updated",
    "object_encryptedChatWaiting": "Chat waiting for approval of second participant.",
    "object_encryptedChatWaiting_param_id_type_int": "Chat ID",
    "object_encryptedChatWaiting_param_access_hash_type_long": "Checking sum depending on user ID",
    "object_encryptedChatWaiting_param_date_type_int": "Date of chat creation",
    "object_encryptedChatWaiting_param_admin_id_type_long": "Chat creator ID",
    "object_encryptedChatWaiting_param_participant_id_type_long": "ID of second chat participant",
    "object_textUrl": "Link",
    "object_textUrl_param_text_type_RichText": "Text of link",
    "object_textUrl_param_url_type_string": "Webpage HTTP URL",
    "object_textUrl_param_webpage_id_type_long": "If a preview was already generated for the page, the page ID",
    "object_urlAuthResultRequest": "Details about the authorization request, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/url-authorization)",
    "object_urlAuthResultRequest_param_request_write_access_type_flags.0?true": "Whether the bot would like to send messages to the user",
    "object_urlAuthResultRequest_param_bot_type_User": "Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https:\/\/core.telegram.org\/widgets\/login#linking-your-domain-to-the-bot) for more details.",
    "object_urlAuthResultRequest_param_domain_type_string": "The domain name of the website on which the user will log in.",
    "object_updateShortMessage": "Info about a message sent to (received from) another user",
    "object_updateShortMessage_param_out_type_flags.1?true": "Whether the message is outgoing",
    "object_updateShortMessage_param_mentioned_type_flags.4?true": "Whether we were mentioned in the message",
    "object_updateShortMessage_param_media_unread_type_flags.5?true": "Whether there are some **unread** mentions in this message",
    "object_updateShortMessage_param_silent_type_flags.13?true": "If true, the message is a silent message, no notifications should be triggered",
    "object_updateShortMessage_param_id_type_int": "The message ID",
    "object_updateShortMessage_param_user_id_type_long": "The ID of the sender (if `outgoing` will be the ID of the destination) of the message",
    "object_updateShortMessage_param_message_type_string": "The message",
    "object_updateShortMessage_param_pts_type_int": "[PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortMessage_param_pts_count_type_int": "[PTS count](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortMessage_param_date_type_int": "[date](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortMessage_param_fwd_from_type_flags.2?MessageFwdHeader": "Info about a forwarded message",
    "object_updateShortMessage_param_via_bot_id_type_flags.11?long": "Info about the inline bot used to generate this message",
    "object_updateShortMessage_param_reply_to_type_flags.3?MessageReplyHeader": "Reply and [thread](https:\/\/core.telegram.org\/api\/threads) information",
    "object_updateShortMessage_param_entities_type_flags.7?Vector<MessageEntity>": "[Entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "object_updateShortMessage_param_ttl_period_type_flags.25?int": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
    "object_webAuthorization": "Represents a bot logged in using the [Telegram login widget](https:\/\/core.telegram.org\/widgets\/login)",
    "object_webAuthorization_param_hash_type_long": "Authorization hash",
    "object_webAuthorization_param_bot_id_type_long": "Bot ID",
    "object_webAuthorization_param_domain_type_string": "The domain name of the website on which the user has logged in.",
    "object_webAuthorization_param_browser_type_string": "Browser user-agent",
    "object_webAuthorization_param_platform_type_string": "Platform",
    "object_webAuthorization_param_date_created_type_int": "When was the web session created",
    "object_webAuthorization_param_date_active_type_int": "When was the web session last active",
    "object_webAuthorization_param_ip_type_string": "IP address",
    "object_webAuthorization_param_region_type_string": "Region, determined from IP address",
    "object_account.themesNotModified": "No new themes were installed",
    "object_boolTrue": "The constructor can be interpreted as a **boolean**`true` value.",
    "object_userStatusOnline": "Online status of the user.",
    "object_userStatusOnline_param_expires_type_int": "Time to expiration of the current online status",
    "object_statsPercentValue": "[Channel statistics percentage](https:\/\/core.telegram.org\/api\/stats).  \nCompute the percentage simply by doing `part * total \/ 100`",
    "object_statsPercentValue_param_part_type_double": "Partial value",
    "object_statsPercentValue_param_total_type_double": "Total value",
    "object_replyKeyboardForceReply": "Force the user to send a reply",
    "object_replyKeyboardForceReply_param_single_use_type_flags.1?true": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again.",
    "object_replyKeyboardForceReply_param_selective_type_flags.2?true": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message. <br>Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.",
    "object_replyKeyboardForceReply_param_placeholder_type_flags.3?string": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.",
    "object_notifyForumTopic": "Notifications generated by a [topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) in a [forum](https:\/\/core.telegram.org\/api\/forum).",
    "object_notifyForumTopic_param_peer_type_Peer": "Forum ID",
    "object_notifyForumTopic_param_top_msg_id_type_int": "[Topic ID](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_inputDialogPeerFolder": "All peers in a [peer folder](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_inputDialogPeerFolder_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_inputNotifyPeer": "Notifications generated by a certain user or group.",
    "object_inputNotifyPeer_param_peer_type_InputPeer": "User or group",
    "object_webPagePending": "A preview of the webpage is currently being generated",
    "object_webPagePending_param_id_type_long": "ID of preview",
    "object_webPagePending_param_date_type_int": "When was the processing started",
    "object_upload.cdnFileReuploadNeeded": "The file was cleared from the temporary RAM cache of the [CDN](https:\/\/core.telegram.org\/cdn) and has to be re-uploaded.",
    "object_upload.cdnFileReuploadNeeded_param_request_token_type_bytes": "Request token (see [CDN](https:\/\/core.telegram.org\/cdn))",
    "object_inputMediaPoll": "A poll",
    "object_inputMediaPoll_param_poll_type_Poll": "The poll to send",
    "object_inputMediaPoll_param_correct_answers_type_flags.0?Vector<bytes>": "Correct answer IDs (for quiz polls)",
    "object_inputMediaPoll_param_solution_type_flags.1?string": "Explanation of quiz solution",
    "object_inputMediaPoll_param_solution_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_keyboardButtonUrlAuth": "Button to request a user to authorize via URL using [Seamless Telegram Login](https:\/\/telegram.org\/blog\/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](..\/methods\/messages.requestUrlAuth.md) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](..\/constructors\/urlAuthResultRequest.md) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](..\/methods\/messages.acceptUrlAuth.md) to get a [urlAuthResultAccepted](..\/constructors\/urlAuthResultAccepted.md) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](..\/constructors\/urlAuthResultDefault.md), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used.",
    "object_keyboardButtonUrlAuth_param_text_type_string": "Button label",
    "object_keyboardButtonUrlAuth_param_fwd_text_type_flags.0?string": "New text of the button in forwarded messages.",
    "object_keyboardButtonUrlAuth_param_url_type_string": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https:\/\/core.telegram.org\/widgets\/login#receiving-authorization-data).<br><br>**NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https:\/\/core.telegram.org\/widgets\/login#checking-authorization).",
    "object_keyboardButtonUrlAuth_param_button_id_type_int": "ID of the button to pass to [messages.requestUrlAuth](..\/methods\/messages.requestUrlAuth.md)",
    "object_pageRelatedArticle": "Related article",
    "object_pageRelatedArticle_param_url_type_string": "URL of article",
    "object_pageRelatedArticle_param_webpage_id_type_long": "Webpage ID of generated IV preview",
    "object_pageRelatedArticle_param_title_type_flags.0?string": "Title",
    "object_pageRelatedArticle_param_description_type_flags.1?string": "Description",
    "object_pageRelatedArticle_param_photo_id_type_flags.2?long": "ID of preview photo",
    "object_pageRelatedArticle_param_author_type_flags.3?string": "Author name",
    "object_pageRelatedArticle_param_published_date_type_flags.4?int": "Date of publication",
    "object_pageBlockBlockquote": "Quote (equivalent to the HTML `<blockquote>`)",
    "object_pageBlockBlockquote_param_text_type_RichText": "Quote contents",
    "object_pageBlockBlockquote_param_caption_type_RichText": "Caption",
    "object_decryptedMessageActionNotifyLayer": "A notification stating the API layer that is used by the client. You should use your current layer and take notice of the layer used on the other side of a conversation when sending messages.",
    "object_decryptedMessageActionNotifyLayer_param_layer_type_int": "Layer number, must be **17** or higher (this constructor was introduced in Layer 17.",
    "object_keyboardButtonUrl": "URL button",
    "object_keyboardButtonUrl_param_text_type_string": "Button label",
    "object_keyboardButtonUrl_param_url_type_string": "URL",
    "object_auth.codeTypeFlashCall": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
    "object_updateChannelPinnedMessage": "A message was pinned in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel). This update is also typically emitted as an [updateNewChannelMessage](..\/constructors\/updateNewChannelMessage.md) with [messageService](..\/constructors\/messageService.md).",
    "object_updateChannelPinnedMessage_param_channel_id_type_int": "Channel\/supergroup ID",
    "object_updateChannelPinnedMessage_param_id_type_int": "ID of pinned message",
    "object_messageActionHistoryClear": "Chat history was cleared",
    "object_inputBotInlineResultGame": "Game",
    "object_inputBotInlineResultGame_param_id_type_string": "Result ID",
    "object_inputBotInlineResultGame_param_short_name_type_string": "Game short name",
    "object_inputBotInlineResultGame_param_send_message_type_InputBotInlineMessage": "Message to send when the result is selected",
    "object_inputMessageEntityMentionName": "Message entity that can be used to create a user [user mention](https:\/\/core.telegram.org\/api\/mentions): received mentions use the [messageEntityMentionName](..\/constructors\/messageEntityMentionName.md) constructor, instead.",
    "object_inputMessageEntityMentionName_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_inputMessageEntityMentionName_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_inputMessageEntityMentionName_param_user_id_type_InputUser": "Identifier of the user that was mentioned",
    "object_peerLocated": "Peer geolocated nearby",
    "object_peerLocated_param_peer_type_Peer": "Peer",
    "object_peerLocated_param_expires_type_int": "Validity period of current data",
    "object_peerLocated_param_distance_type_int": "Distance from the peer in meters",
    "object_inputNotifyForumTopic": "Notifications generated by a [topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) in a [forum](https:\/\/core.telegram.org\/api\/forum).",
    "object_inputNotifyForumTopic_param_peer_type_InputPeer": "Forum ID",
    "object_inputNotifyForumTopic_param_top_msg_id_type_int": "[Topic ID](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "object_channels.channelParticipants": "Represents multiple channel participants",
    "object_channels.channelParticipants_param_count_type_int": "Total number of participants that correspond to the given query",
    "object_channels.channelParticipants_param_participants_type_Vector<ChannelParticipant>": "Participants",
    "object_channels.channelParticipants_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_channels.channelParticipants_param_users_type_Vector<User>": "Users mentioned in participant info",
    "object_inputMessagePinned": "Pinned message",
    "object_groupCallParticipant": "Info about a group call participant",
    "object_groupCallParticipant_param_muted_type_flags.0?true": "Whether the participant is muted",
    "object_groupCallParticipant_param_left_type_flags.1?true": "Whether the participant has left",
    "object_groupCallParticipant_param_can_self_unmute_type_flags.2?true": "Whether the participant can unmute themselves",
    "object_groupCallParticipant_param_just_joined_type_flags.4?true": "Whether the participant has just joined",
    "object_groupCallParticipant_param_versioned_type_flags.5?true": "If set, and [updateGroupCallParticipants](..\/constructors\/updateGroupCallParticipants.md).version &lt; locally stored call.version, info about this participant should be ignored. If (...), and [updateGroupCallParticipants](..\/constructors\/updateGroupCallParticipants.md).version &gt; call.version+1, the participant list should be refetched using [phone.getGroupParticipants](..\/methods\/phone.getGroupParticipants.md).",
    "object_groupCallParticipant_param_min_type_flags.8?true": "If not set, the `volume` and `muted_by_you` fields can be safely used to overwrite locally cached information; otherwise, `volume` will contain valid information only if `volume_by_admin` is set both in the cache and in the received constructor.",
    "object_groupCallParticipant_param_muted_by_you_type_flags.9?true": "Whether this participant was muted by the current user",
    "object_groupCallParticipant_param_volume_by_admin_type_flags.10?true": "Whether our volume can only changed by an admin",
    "object_groupCallParticipant_param_self_type_flags.12?true": "Whether this participant is the current user",
    "object_groupCallParticipant_param_video_joined_type_flags.15?true": "Whether this participant is currently broadcasting video",
    "object_groupCallParticipant_param_peer_type_Peer": "Peer information",
    "object_groupCallParticipant_param_date_type_int": "When did this participant join the group call",
    "object_groupCallParticipant_param_active_date_type_flags.3?int": "When was this participant last active in the group call",
    "object_groupCallParticipant_param_source_type_int": "Source ID",
    "object_groupCallParticipant_param_volume_type_flags.7?int": "Volume, if not set the volume is set to 100%.",
    "object_groupCallParticipant_param_about_type_flags.11?string": "Info about this participant",
    "object_groupCallParticipant_param_raise_hand_rating_type_flags.13?long": "Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list.",
    "object_groupCallParticipant_param_video_type_flags.6?GroupCallParticipantVideo": "Info about the video stream the participant is currently broadcasting",
    "object_groupCallParticipant_param_presentation_type_flags.14?GroupCallParticipantVideo": "Info about the screen sharing stream the participant is currently broadcasting",
    "object_botCommandScopePeerAdmins": "The specified bot commands will be valid for all admins of the specified [group or supergroup](https:\/\/core.telegram.org\/api\/channel).",
    "object_botCommandScopePeerAdmins_param_peer_type_InputPeer": "The chat",
    "object_updateChatParticipantAdmin": "Admin permissions of a user in a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups) were changed",
    "object_updateChatParticipantAdmin_param_chat_id_type_long": "Chat ID",
    "object_updateChatParticipantAdmin_param_user_id_type_long": "ID of the (de)admined user",
    "object_updateChatParticipantAdmin_param_is_admin_type_Bool": "Whether the user was rendered admin",
    "object_updateChatParticipantAdmin_param_version_type_int": "Used in basic groups to reorder updates and make sure that all of them was received.",
    "object_updateChannelPinnedTopics": "The [pinned topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) of a forum have changed.",
    "object_updateChannelPinnedTopics_param_channel_id_type_long": "Forum ID.",
    "object_updateChannelPinnedTopics_param_order_type_flags.0?Vector<int>": "Ordered list containing the IDs of all pinned topics.",
    "object_inputBotAppShortName": "Used to fetch information about a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps) by its short name",
    "object_inputBotAppShortName_param_bot_id_type_InputUser": "ID of the bot that owns the bot web app",
    "object_inputBotAppShortName_param_short_name_type_string": "Short name, obtained from a [named bot web app deep link](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links)",
    "object_emojiKeyword": "Emoji keyword",
    "object_emojiKeyword_param_keyword_type_string": "Keyword",
    "object_emojiKeyword_param_emoticons_type_Vector<string>": "Emojis associated to keyword",
    "object_updateBotMenuButton": "The menu button behavior for the specified bot has changed",
    "object_updateBotMenuButton_param_bot_id_type_long": "Bot ID",
    "object_updateBotMenuButton_param_button_type_BotMenuButton": "New menu button",
    "object_inputMediaUploadedDocument": "New document",
    "object_inputMediaUploadedDocument_param_nosound_video_type_flags.3?true": "Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example)",
    "object_inputMediaUploadedDocument_param_force_file_type_flags.4?true": "Force the media file to be uploaded as document",
    "object_inputMediaUploadedDocument_param_spoiler_type_flags.5?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaUploadedDocument_param_file_type_InputFile": "The [uploaded file](https:\/\/core.telegram.org\/api\/files)",
    "object_inputMediaUploadedDocument_param_thumb_type_flags.2?InputFile": "Thumbnail of the document, uploaded as for the file",
    "object_inputMediaUploadedDocument_param_mime_type_type_string": "MIME type of document",
    "object_inputMediaUploadedDocument_param_attributes_type_Vector<DocumentAttribute>": "Attributes that specify the type of the document (video, audio, voice, sticker, etc.)",
    "object_inputMediaUploadedDocument_param_stickers_type_flags.0?Vector<InputDocument>": "Attached stickers",
    "object_inputMediaUploadedDocument_param_ttl_seconds_type_flags.1?int": "Time to live in seconds of self-destructing document",
    "object_messageReplies": "Info about [the comment section of a channel post, or a simple message thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messageReplies_param_comments_type_flags.0?true": "Whether this constructor contains information about the [comment section of a channel post, or a simple message thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messageReplies_param_replies_type_int": "Contains the total number of replies in this thread or comment section.",
    "object_messageReplies_param_replies_pts_type_int": "[PTS](https:\/\/core.telegram.org\/api\/updates) of the message that started this thread.",
    "object_messageReplies_param_recent_repliers_type_flags.1?Vector<Peer>": "For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews.",
    "object_messageReplies_param_channel_id_type_flags.0?long": "For channel post comments, contains the ID of the associated [discussion supergroup](https:\/\/core.telegram.org\/api\/discussion)",
    "object_messageReplies_param_max_id_type_flags.2?int": "ID of the latest message in this thread or comment section.",
    "object_messageReplies_param_read_max_id_type_flags.3?int": "Contains the ID of the latest read message in this thread or comment section.",
    "object_securePasswordKdfAlgoSHA512": "SHA512 KDF algo",
    "object_securePasswordKdfAlgoSHA512_param_salt_type_bytes": "Salt",
    "object_inputPhoto": "Defines a photo for further interaction.",
    "object_inputPhoto_param_id_type_long": "Photo identifier",
    "object_inputPhoto_param_access_hash_type_long": "**access\\_hash** value from the [photo](..\/constructors\/photo.md) constructor",
    "object_inputPhoto_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_inputUserSelf": "Defines the current user.",
    "object_pollResults": "Results of poll",
    "object_pollResults_param_min_type_flags.0?true": "Similar to [min](https:\/\/core.telegram.org\/api\/min) objects, used for poll constructors that are the same for all users so they don't have the option chosen by the current user (you can use [messages.getPollResults](..\/methods\/messages.getPollResults.md) to get the full poll results).",
    "object_pollResults_param_results_type_flags.1?Vector<PollAnswerVoters>": "Poll results",
    "object_pollResults_param_total_voters_type_flags.2?int": "Total number of people that voted in the poll",
    "object_pollResults_param_recent_voters_type_flags.3?Vector<long>": "IDs of the last users that recently voted in the poll",
    "object_pollResults_param_solution_type_flags.4?string": "Explanation of quiz solution",
    "object_pollResults_param_solution_entities_type_flags.4?Vector<MessageEntity>": "[Message entities for styled text in quiz solution](https:\/\/core.telegram.org\/api\/entities)",
    "object_emailVerifyPurposePassport": "Verify an email for use in [telegram passport](https:\/\/core.telegram.org\/api\/passport)",
    "object_help.countryCode": "Country code and phone number pattern of a specific country",
    "object_help.countryCode_param_country_code_type_string": "ISO country code",
    "object_help.countryCode_param_prefixes_type_flags.0?Vector<string>": "Possible phone prefixes",
    "object_help.countryCode_param_patterns_type_flags.1?Vector<string>": "Phone patterns: for example, `XXX XXX XXX`",
    "object_updateReadMessagesContents": "Contents of messages in the common [message box](https:\/\/core.telegram.org\/api\/updates) were read",
    "object_updateReadMessagesContents_param_messages_type_Vector<int>": "IDs of read messages",
    "object_updateReadMessagesContents_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateReadMessagesContents_param_pts_count_type_int": "[Number of events that were generated](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.featuredStickers": "Featured stickersets",
    "object_messages.featuredStickers_param_premium_type_flags.0?true": "Whether this is a premium stickerset",
    "object_messages.featuredStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.featuredStickers_param_count_type_int": "Total number of featured stickers",
    "object_messages.featuredStickers_param_sets_type_Vector<StickerSetCovered>": "Featured stickersets",
    "object_messages.featuredStickers_param_unread_type_Vector<long>": "IDs of new featured stickersets",
    "object_pageListItemText": "List item",
    "object_pageListItemText_param_text_type_RichText": "Text",
    "object_documentAttributeAudio": "Represents an audio file",
    "object_documentAttributeAudio_param_voice_type_flags.10?true": "Whether this is a voice message",
    "object_documentAttributeAudio_param_duration_type_int": "Duration in seconds",
    "object_documentAttributeAudio_param_title_type_flags.0?string": "Name of song",
    "object_documentAttributeAudio_param_performer_type_flags.1?string": "Performer",
    "object_documentAttributeAudio_param_waveform_type_flags.2?bytes": "Waveform: consists in a series of bitpacked 5-bit values. <br>Example implementation: [android](https:\/\/github.com\/DrKLO\/Telegram\/blob\/96dce2c9aabc33b87db61d830aa087b6b03fe397\/TMessagesProj\/jni\/audio.c#L546).",
    "object_updateDeleteMessages": "Messages were deleted.",
    "object_updateDeleteMessages_param_messages_type_Vector<int>": "List of identifiers of deleted messages",
    "object_updateDeleteMessages_param_pts_type_int": "New quality of actions in a message box",
    "object_updateDeleteMessages_param_pts_count_type_int": "Number of generated [events](https:\/\/core.telegram.org\/api\/updates)",
    "object_messageMediaContact": "Attached contact.",
    "object_messageMediaContact_param_phone_number_type_string": "Phone number",
    "object_messageMediaContact_param_first_name_type_string": "Contact's first name",
    "object_messageMediaContact_param_last_name_type_string": "Contact's last name",
    "object_messageMediaContact_param_vcard_type_string": "VCARD of contact",
    "object_messageMediaContact_param_user_id_type_long": "User identifier or `0`, if the user with the given phone number is not registered",
    "object_inputBotInlineMessageMediaVenue": "Venue",
    "object_inputBotInlineMessageMediaVenue_param_geo_point_type_InputGeoPoint": "Geolocation",
    "object_inputBotInlineMessageMediaVenue_param_title_type_string": "Venue name",
    "object_inputBotInlineMessageMediaVenue_param_address_type_string": "Address",
    "object_inputBotInlineMessageMediaVenue_param_provider_type_string": "Venue provider: currently only \"foursquare\" needs to be supported",
    "object_inputBotInlineMessageMediaVenue_param_venue_id_type_string": "Venue ID in the provider's database",
    "object_inputBotInlineMessageMediaVenue_param_venue_type_type_string": "Venue type in the provider's database",
    "object_inputBotInlineMessageMediaVenue_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_pageListItemBlocks": "List item",
    "object_pageListItemBlocks_param_blocks_type_Vector<PageBlock>": "Blocks",
    "object_chat": "Info about a group",
    "object_chat_param_creator_type_flags.0?true": "Whether the current user is the creator of the group",
    "object_chat_param_left_type_flags.2?true": "Whether the current user has left the group",
    "object_chat_param_deactivated_type_flags.5?true": "Whether the group was [migrated](https:\/\/core.telegram.org\/api\/channel)",
    "object_chat_param_call_active_type_flags.23?true": "Whether a group call is currently active",
    "object_chat_param_call_not_empty_type_flags.24?true": "Whether there's anyone in the group call",
    "object_chat_param_noforwards_type_flags.25?true": "Whether this group is [protected](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it",
    "object_chat_param_id_type_long": "ID of the group",
    "object_chat_param_title_type_string": "Title",
    "object_chat_param_photo_type_ChatPhoto": "Chat photo",
    "object_chat_param_participants_count_type_int": "Participant count",
    "object_chat_param_date_type_int": "Date of creation of the group",
    "object_chat_param_version_type_int": "Used in basic groups to reorder updates and make sure that all of them were received.",
    "object_chat_param_migrated_to_type_flags.6?InputChannel": "Means this chat was [upgraded](https:\/\/core.telegram.org\/api\/channel) to a supergroup",
    "object_chat_param_admin_rights_type_flags.14?ChatAdminRights": "[Admin rights](https:\/\/core.telegram.org\/api\/rights) of the user in the group",
    "object_chat_param_default_banned_rights_type_flags.18?ChatBannedRights": "[Default banned rights](https:\/\/core.telegram.org\/api\/rights) of all users in the group",
    "object_channelMessagesFilterEmpty": "No filter",
    "object_botCommandScopeChatAdmins": "The specified bot commands will be valid only for chat administrators, in all [groups and supergroups](https:\/\/core.telegram.org\/api\/channel).",
    "object_messageMediaPoll": "Poll",
    "object_messageMediaPoll_param_poll_type_Poll": "The poll",
    "object_messageMediaPoll_param_results_type_PollResults": "The results of the poll",
    "object_topPeerCategoryChannels": "Most frequently visited channels",
    "object_draftMessageEmpty": "Empty draft",
    "object_draftMessageEmpty_param_date_type_flags.0?int": "When was the draft last updated",
    "object_messageMediaGeo": "Attached map.",
    "object_messageMediaGeo_param_geo_type_GeoPoint": "GeoPoint",
    "object_inputMediaGifExternal": "New GIF animation that will be uploaded by the server using the specified URL",
    "object_inputMediaGifExternal_param_url_type_string": "URL",
    "object_inputMediaGifExternal_param_q_type_string": "Query",
    "object_inputUser": "Defines a user for further interaction.",
    "object_inputUser_param_user_id_type_long": "User identifier",
    "object_inputUser_param_access_hash_type_long": "**access\\_hash** value from the [user](..\/constructors\/user.md) constructor",
    "object_updateNewScheduledMessage": "A message was added to the [schedule queue of a chat](https:\/\/core.telegram.org\/api\/scheduled-messages)",
    "object_updateNewScheduledMessage_param_message_type_Message": "Message",
    "object_phone.phoneCall": "A VoIP phone call",
    "object_phone.phoneCall_param_phone_call_type_PhoneCall": "The VoIP phone call",
    "object_phone.phoneCall_param_users_type_Vector<User>": "VoIP phone call participants",
    "object_encryptedFileEmpty": "Empty constructor, non-existing file.",
    "object_contacts.blockedSlice": "Incomplete list of blocked users.",
    "object_contacts.blockedSlice_param_count_type_int": "Total number of elements in the list",
    "object_contacts.blockedSlice_param_blocked_type_Vector<PeerBlocked>": "List of blocked users",
    "object_contacts.blockedSlice_param_chats_type_Vector<Chat>": "Blocked chats",
    "object_contacts.blockedSlice_param_users_type_Vector<User>": "List of users",
    "object_importedContact": "Successfully imported contact.",
    "object_importedContact_param_user_id_type_long": "User identifier",
    "object_importedContact_param_client_id_type_long": "The contact's client identifier (passed to one of the [InputContact](..\/types\/InputContact.md) constructors)",
    "object_inputWebFileGeoPointLocation": "Used to download a server-generated image with the map preview from a [geoPoint](..\/constructors\/geoPoint.md), see the [webfile docs for more info \u00bb](https:\/\/core.telegram.org\/api\/files#downloading-webfiles).",
    "object_inputWebFileGeoPointLocation_param_geo_point_type_InputGeoPoint": "Generated from the `lat`, `long` and `accuracy_radius` parameters of the [geoPoint](..\/constructors\/geoPoint.md)",
    "object_inputWebFileGeoPointLocation_param_access_hash_type_long": "Access hash of the [geoPoint](..\/constructors\/geoPoint.md)",
    "object_inputWebFileGeoPointLocation_param_w_type_int": "Map width in pixels before applying scale; 16-1024",
    "object_inputWebFileGeoPointLocation_param_h_type_int": "Map height in pixels before applying scale; 16-1024",
    "object_inputWebFileGeoPointLocation_param_zoom_type_int": "Map zoom level; 13-20",
    "object_inputWebFileGeoPointLocation_param_scale_type_int": "Map scale; 1-3",
    "object_account.chatThemesNotModified": "The available chat themes were not modified",
    "object_decryptedMessageMediaPhoto": "Photo attached to an encrypted message.",
    "object_decryptedMessageMediaPhoto_param_thumb_type_bytes": "Content of thumbnail file (JPEGfile, quality 55, set in a square 90x90)",
    "object_decryptedMessageMediaPhoto_param_thumb_w_type_int": "Thumbnail width",
    "object_decryptedMessageMediaPhoto_param_thumb_h_type_int": "Thumbnail height",
    "object_decryptedMessageMediaPhoto_param_w_type_int": "Photo width",
    "object_decryptedMessageMediaPhoto_param_h_type_int": "Photo height",
    "object_decryptedMessageMediaPhoto_param_size_type_int": "Size of the photo in bytes",
    "object_decryptedMessageMediaPhoto_param_key_type_bytes": "Key to decrypt an attached file with a full version",
    "object_decryptedMessageMediaPhoto_param_iv_type_bytes": "Initialization vector",
    "object_decryptedMessageMediaPhoto_param_caption_type_string": "Caption",
    "object_privacyKeyStatusTimestamp": "Whether we can see the last online timestamp of this user",
    "object_channelAdminLogEventActionCreateTopic": "A [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) was created",
    "object_channelAdminLogEventActionCreateTopic_param_topic_type_ForumTopic": "The [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) that was created",
    "object_secureCredentialsEncrypted": "Encrypted credentials required to decrypt [telegram passport](https:\/\/core.telegram.org\/passport) data.",
    "object_secureCredentialsEncrypted_param_data_type_bytes": "Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data \u00bb](https:\/\/core.telegram.org\/passport#decrypting-data)",
    "object_secureCredentialsEncrypted_param_hash_type_bytes": "Data hash for data authentication as described in [decrypting data \u00bb](https:\/\/core.telegram.org\/passport#decrypting-data)",
    "object_secureCredentialsEncrypted_param_secret_type_bytes": "Secret, encrypted with the bot's public RSA key, required for data decryption as described in [decrypting data \u00bb](https:\/\/core.telegram.org\/passport#decrypting-data)",
    "object_textMarked": "Highlighted text",
    "object_textMarked_param_text_type_RichText": "Text",
    "object_notificationSoundDefault": "Indicates the default notification sound should be used",
    "object_messageActionPhoneCall": "A phone call",
    "object_messageActionPhoneCall_param_video_type_flags.2?true": "Is this a video call?",
    "object_messageActionPhoneCall_param_call_id_type_long": "Call ID",
    "object_messageActionPhoneCall_param_reason_type_flags.0?PhoneCallDiscardReason": "If the call has ended, the reason why it ended",
    "object_messageActionPhoneCall_param_duration_type_flags.1?int": "Duration of the call in seconds",
    "object_contactBlocked": "A blocked user.",
    "object_contactBlocked_param_user_id_type_int": "User identifier",
    "object_contactBlocked_param_date_type_int": "Date blacklisted",
    "object_messageActionChatCreate": "Group created",
    "object_messageActionChatCreate_param_title_type_string": "Group name",
    "object_messageActionChatCreate_param_users_type_Vector<long>": "List of group members",
    "object_chatReactionsSome": "Some reactions are allowed",
    "object_chatReactionsSome_param_reactions_type_Vector<Reaction>": "Allowed set of reactions: the [reactions\\_in\\_chat\\_max](https:\/\/core.telegram.org\/api\/config#reactions-in-chat-max) configuration field indicates the maximum number of reactions that can be specified in this field.",
    "object_channelAdminLogEventActionChangeLocation": "The geogroup location was changed",
    "object_channelAdminLogEventActionChangeLocation_param_prev_value_type_ChannelLocation": "Previous location",
    "object_channelAdminLogEventActionChangeLocation_param_new_value_type_ChannelLocation": "New location",
    "object_textBold": "**Bold** text",
    "object_textBold_param_text_type_RichText": "Text",
    "object_jsonObject": "JSON object value",
    "object_jsonObject_param_value_type_Vector<JSONObjectValue>": "Values",
    "object_inputEncryptedFileUploaded": "Sets new encrypted file saved by parts using upload.saveFilePart method.",
    "object_inputEncryptedFileUploaded_param_id_type_long": "Random file ID created by client",
    "object_inputEncryptedFileUploaded_param_parts_type_int": "Number of saved parts",
    "object_inputEncryptedFileUploaded_param_md5_checksum_type_string": "In case [md5-HASH](https:\/\/en.wikipedia.org\/wiki\/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use",
    "object_inputEncryptedFileUploaded_param_key_fingerprint_type_int": "32-bit fingerprint of the key used to encrypt a file",
    "object_notificationSoundRingtone": "A specific previously uploaded notification sound should be used",
    "object_notificationSoundRingtone_param_id_type_long": "Document ID of notification sound uploaded using [account.uploadRingtone](..\/methods\/account.uploadRingtone.md)",
    "object_updateUserStatus": "Contact status update.",
    "object_updateUserStatus_param_user_id_type_long": "User identifier",
    "object_updateUserStatus_param_status_type_UserStatus": "New status",
    "object_fileLocationToBeDeprecated": "Indicates the location of a photo, will be deprecated soon",
    "object_fileLocationToBeDeprecated_param_volume_id_type_long": "Volume ID",
    "object_fileLocationToBeDeprecated_param_local_id_type_int": "Local ID",
    "object_pageBlockRelatedArticles": "Related articles",
    "object_pageBlockRelatedArticles_param_title_type_RichText": "Title",
    "object_pageBlockRelatedArticles_param_articles_type_Vector<PageRelatedArticle>": "Related articles",
    "object_decryptedMessageActionReadMessages": "Messages marked as read.",
    "object_decryptedMessageActionReadMessages_param_random_ids_type_Vector<long>": "List of message IDs",
    "object_inputMediaEmpty": "Empty media content of a message.",
    "object_privacyValueAllowChatParticipants": "Allow all participants of certain chats",
    "object_privacyValueAllowChatParticipants_param_chats_type_Vector<long>": "Allowed chats",
    "object_chatAdminRights": "Represents the rights of an admin in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel).",
    "object_chatAdminRights_param_change_info_type_flags.0?true": "If set, allows the admin to modify the description of the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_post_messages_type_flags.1?true": "If set, allows the admin to post messages in the [channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_edit_messages_type_flags.2?true": "If set, allows the admin to also edit messages from other admins in the [channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_delete_messages_type_flags.3?true": "If set, allows the admin to also delete messages from other admins in the [channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_ban_users_type_flags.4?true": "If set, allows the admin to ban users from the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_invite_users_type_flags.5?true": "If set, allows the admin to invite users in the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_pin_messages_type_flags.7?true": "If set, allows the admin to pin messages in the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_add_admins_type_flags.9?true": "If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "object_chatAdminRights_param_anonymous_type_flags.10?true": "Whether this admin is anonymous",
    "object_chatAdminRights_param_manage_call_type_flags.11?true": "If set, allows the admin to change group call\/livestream settings",
    "object_chatAdminRights_param_other_type_flags.12?true": "Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat [admin log](https:\/\/core.telegram.org\/api\/recent-actions), get [chat statistics](https:\/\/core.telegram.org\/api\/stats), get [message statistics in channels](https:\/\/core.telegram.org\/api\/stats), get channel members, see anonymous administrators in supergroups and ignore slow mode.",
    "object_chatAdminRights_param_manage_topics_type_flags.13?true": "If set, allows the admin to create, delete or modify [forum topics \u00bb](https:\/\/core.telegram.org\/api\/forum#forum-topics).",
    "object_chatlists.exportedInvites": "Info about multiple [chat folder deep links \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatlists.exportedInvites_param_invites_type_Vector<ExportedChatlistInvite>": "The [chat folder deep links \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatlists.exportedInvites_param_chats_type_Vector<Chat>": "Related chat information",
    "object_chatlists.exportedInvites_param_users_type_Vector<User>": "Related user information",
    "object_foundGifCached": "Found cached results",
    "object_foundGifCached_param_url_type_string": "GIF URL",
    "object_foundGifCached_param_photo_type_Photo": "Thumbnail",
    "object_foundGifCached_param_document_type_Document": "Actual GIF document to send",
    "object_sendAsPeer": "Indicates a peer that can be used to send messages",
    "object_sendAsPeer_param_premium_required_type_flags.0?true": "Whether a Telegram Premium account is required to send messages as this peer",
    "object_sendAsPeer_param_peer_type_Peer": "Peer",
    "object_sendMessageGamePlayAction": "User is playing a game",
    "object_updateShortSentMessage": "Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object).",
    "object_updateShortSentMessage_param_out_type_flags.1?true": "Whether the message is outgoing",
    "object_updateShortSentMessage_param_id_type_int": "ID of the sent message",
    "object_updateShortSentMessage_param_pts_type_int": "[PTS](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortSentMessage_param_pts_count_type_int": "[PTS count](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortSentMessage_param_date_type_int": "[date](https:\/\/core.telegram.org\/api\/updates)",
    "object_updateShortSentMessage_param_media_type_flags.9?MessageMedia": "Attached media",
    "object_updateShortSentMessage_param_entities_type_flags.7?Vector<MessageEntity>": "[Entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "object_updateShortSentMessage_param_ttl_period_type_flags.25?int": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
    "object_messageMediaDice": "[Dice-based animated sticker](https:\/\/core.telegram.org\/api\/dice)",
    "object_messageMediaDice_param_value_type_int": "[Dice value](https:\/\/core.telegram.org\/api\/dice)",
    "object_messageMediaDice_param_emoticon_type_string": "The emoji, for now \ud83c\udfc0, \ud83c\udfb2 and \ud83c\udfaf are supported",
    "object_contacts.topPeersDisabled": "Top peers disabled",
    "object_messages.stickersNotModified": "No new stickers were found for the given query",
    "object_account.resetPasswordFailedWait": "You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.",
    "object_account.resetPasswordFailedWait_param_retry_date_type_int": "Wait until this date before requesting another reset.",
    "object_account.passwordSettings": "Private info associated to the password info (recovery email, telegram [passport](https:\/\/core.telegram.org\/passport) info &amp; so on)",
    "object_account.passwordSettings_param_email_type_flags.0?string": "[2FA Recovery email](https:\/\/core.telegram.org\/api\/srp#email-verification)",
    "object_account.passwordSettings_param_secure_settings_type_flags.1?SecureSecretSettings": "Telegram [passport](https:\/\/core.telegram.org\/passport) settings",
    "object_inputBotInlineResultDocument": "Document (media of any type except for photos)",
    "object_inputBotInlineResultDocument_param_id_type_string": "Result ID",
    "object_inputBotInlineResultDocument_param_type_type_string": "Result type (see [bot API docs](https:\/\/core.telegram.org\/bots\/api#inlinequeryresult))",
    "object_inputBotInlineResultDocument_param_title_type_flags.1?string": "Result title",
    "object_inputBotInlineResultDocument_param_description_type_flags.2?string": "Result description",
    "object_inputBotInlineResultDocument_param_document_type_InputDocument": "Document to send",
    "object_inputBotInlineResultDocument_param_send_message_type_InputBotInlineMessage": "Message to send when the result is selected",
    "object_messages.messagesNotModified": "No new messages matching the query were found",
    "object_messages.messagesNotModified_param_count_type_int": "Number of results found server-side by the given query",
    "object_chatPhotoEmpty": "Group photo is not set.",
    "object_messages.channelMessages": "Channel messages",
    "object_messages.channelMessages_param_inexact_type_flags.1?true": "If set, returned results may be inexact",
    "object_messages.channelMessages_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.channelMessages_param_count_type_int": "Total number of results were found server-side (may not be all included here)",
    "object_messages.channelMessages_param_offset_id_offset_type_flags.2?int": "Indicates the absolute position of `messages[0]` within the total result set with count `count`. <br>This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress\/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`.",
    "object_messages.channelMessages_param_messages_type_Vector<Message>": "Found messages",
    "object_messages.channelMessages_param_topics_type_Vector<ForumTopic>": "[Forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) information",
    "object_messages.channelMessages_param_chats_type_Vector<Chat>": "Chats",
    "object_messages.channelMessages_param_users_type_Vector<User>": "Users",
    "object_groupCallStreamChannel": "Info about an RTMP stream in a group call or livestream",
    "object_groupCallStreamChannel_param_channel_type_int": "Channel ID",
    "object_groupCallStreamChannel_param_scale_type_int": "Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`.",
    "object_groupCallStreamChannel_param_last_timestamp_ms_type_long": "Last seen timestamp to easily start fetching livestream chunks using [inputGroupCallStream](..\/constructors\/inputGroupCallStream.md)",
    "object_encryptedMessageService": "Encrypted service message",
    "object_encryptedMessageService_param_random_id_type_long": "Random message ID, assigned by the author of message",
    "object_encryptedMessageService_param_chat_id_type_int": "ID of encrypted chat",
    "object_encryptedMessageService_param_date_type_int": "Date of sending",
    "object_encryptedMessageService_param_bytes_type_bytes": "TL-serialization of the [DecryptedMessage](..\/types\/DecryptedMessage.md) type, encrypted with the key created at chat initialization",
    "object_storage.filePartial": "Part of a bigger file.",
    "object_baseThemeClassic": "Classic theme",
    "object_messages.dhConfig": "New set of configuring parameters.",
    "object_messages.dhConfig_param_g_type_int": "New value **prime**, see [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange)",
    "object_messages.dhConfig_param_p_type_bytes": "New value **primitive root**, see [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange)",
    "object_messages.dhConfig_param_version_type_int": "Version of set of parameters",
    "object_messages.dhConfig_param_random_type_bytes": "Random sequence of bytes of assigned length",
    "object_updateAttachMenuBots": "The list of installed [attachment menu entries \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach) has changed, use [messages.getAttachMenuBots](..\/methods\/messages.getAttachMenuBots.md) to fetch the updated list.",
    "object_pageBlockCover": "A page cover",
    "object_pageBlockCover_param_cover_type_PageBlock": "Cover",
    "object_inputEncryptedFileLocation": "Location of encrypted secret chat file.",
    "object_inputEncryptedFileLocation_param_id_type_long": "File ID, **id** parameter value from [encryptedFile](..\/constructors\/encryptedFile.md)",
    "object_inputEncryptedFileLocation_param_access_hash_type_long": "Checksum, **access\\_hash** parameter value from [encryptedFile](..\/constructors\/encryptedFile.md)",
    "object_messageActionChatJoinedByRequest": "A user was accepted into the group by an admin",
    "object_boolFalse": "Constructor may be interpreted as a **boolean**`false` value.",
    "object_inputBotInlineMessageMediaAuto": "A media",
    "object_inputBotInlineMessageMediaAuto_param_message_type_string": "Caption",
    "object_inputBotInlineMessageMediaAuto_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_inputBotInlineMessageMediaAuto_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_messageFwdHeader": "Info about a forwarded message",
    "object_messageFwdHeader_param_imported_type_flags.7?true": "Whether this message was [imported from a foreign chat service, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import)",
    "object_messageFwdHeader_param_from_id_type_flags.0?Peer": "The ID of the user that originally sent the message",
    "object_messageFwdHeader_param_from_name_type_flags.5?string": "The name of the user that originally sent the message",
    "object_messageFwdHeader_param_date_type_int": "When was the message originally sent",
    "object_messageFwdHeader_param_channel_post_type_flags.2?int": "ID of the channel message that was forwarded",
    "object_messageFwdHeader_param_post_author_type_flags.3?string": "For channels and if signatures are enabled, author of the channel message",
    "object_messageFwdHeader_param_saved_from_peer_type_flags.4?Peer": "Only for messages forwarded to the current user (inputPeerSelf), full info about the user\/channel that originally sent the message",
    "object_messageFwdHeader_param_saved_from_msg_id_type_flags.4?int": "Only for messages forwarded to the current user (inputPeerSelf), ID of the message that was forwarded from the original user\/channel",
    "object_messageFwdHeader_param_psa_type_type_flags.6?string": "PSA type",
    "object_inputInvoiceMessage": "An invoice contained in a [messageMediaInvoice](..\/constructors\/messageMediaInvoice.md) message.",
    "object_inputInvoiceMessage_param_peer_type_InputPeer": "Chat where the invoice was sent",
    "object_inputInvoiceMessage_param_msg_id_type_int": "Message ID",
    "object_chatAdminWithInvites": "Info about chat invites generated by admins.",
    "object_chatAdminWithInvites_param_admin_id_type_long": "The admin",
    "object_chatAdminWithInvites_param_invites_count_type_int": "Number of invites generated by the admin",
    "object_chatAdminWithInvites_param_revoked_invites_count_type_int": "Number of revoked invites",
    "object_messageInteractionCounters": "Message interaction counters",
    "object_messageInteractionCounters_param_msg_id_type_int": "Message ID",
    "object_messageInteractionCounters_param_views_type_int": "Views",
    "object_messageInteractionCounters_param_forwards_type_int": "Number of times this message was forwarded",
    "object_updateConfig": "The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](..\/methods\/help.getConfig.md)",
    "object_inputStickeredMediaDocument": "A document with stickers attached",
    "object_inputStickeredMediaDocument_param_id_type_InputDocument": "The document",
    "object_decryptedMessageActionSetMessageTTL": "Setting of a message lifetime after reading.\n\nUpon receiving such message the client shall start deleting of all messages of an encrypted chat **ttl\\_seconds** seconds after the messages were read by user.",
    "object_decryptedMessageActionSetMessageTTL_param_ttl_seconds_type_int": "Lifetime in seconds",
    "object_messages.translateResult": "Translated text with [entities](https:\/\/core.telegram.org\/api\/entities)",
    "object_messages.translateResult_param_result_type_Vector<TextWithEntities>": "Text+[entities](https:\/\/core.telegram.org\/api\/entities), for each input message.",
    "object_inputMediaGeoPoint": "Map.",
    "object_inputMediaGeoPoint_param_geo_point_type_InputGeoPoint": "GeoPoint",
    "object_baseThemeDay": "Day theme",
    "object_phoneCallDiscardReasonDisconnect": "The phone call was disconnected",
    "object_notifyChats": "Notifications generated by all groups.",
    "object_document": "Document",
    "object_document_param_id_type_long": "Document ID",
    "object_document_param_access_hash_type_long": "Check sum, dependent on document ID",
    "object_document_param_file_reference_type_bytes": "[File reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_document_param_date_type_int": "Creation date",
    "object_document_param_mime_type_type_string": "MIME type",
    "object_document_param_size_type_long": "Size",
    "object_document_param_thumbs_type_flags.0?Vector<PhotoSize>": "Thumbnails",
    "object_document_param_video_thumbs_type_flags.1?Vector<VideoSize>": "Video thumbnails",
    "object_document_param_dc_id_type_int": "DC ID",
    "object_document_param_attributes_type_Vector<DocumentAttribute>": "Attributes",
    "object_help.premiumPromo": "Telegram Premium promotion information\n\nNote that the `video_sections`+`videos` fields are a list of videos, and the corresponding premium feature identifiers.  \nThey're equivalent to a section =&gt; video dictionary, with keys from `video_section` and values from `videos`.  \nThe keys in `video_sections` correspond to a specific feature identifier, and the associated promotional video should be shown when the associated feature row is clicked.",
    "object_help.premiumPromo_param_status_text_type_string": "Description of the current state of the user's Telegram Premium subscription",
    "object_help.premiumPromo_param_status_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_help.premiumPromo_param_video_sections_type_Vector<string>": "A list of [premium feature identifiers \u00bb](https:\/\/core.telegram.org\/api\/premium), associated to each video",
    "object_help.premiumPromo_param_videos_type_Vector<Document>": "A list of videos",
    "object_help.premiumPromo_param_period_options_type_Vector<PremiumSubscriptionOption>": "Telegram Premium subscription options",
    "object_help.premiumPromo_param_users_type_Vector<User>": "Related user information",
    "object_nearestDc": "Nearest data center, according to geo-ip.",
    "object_nearestDc_param_country_type_string": "Country code determined by geo-ip",
    "object_nearestDc_param_this_dc_type_int": "Number of current data center",
    "object_nearestDc_param_nearest_dc_type_int": "Number of nearest data center",
    "object_null": "Corresponds to an arbitrary empty object.",
    "object_decryptedMessageActionAcceptKey": "Accept new key",
    "object_decryptedMessageActionAcceptKey_param_exchange_id_type_long": "Exchange ID",
    "object_decryptedMessageActionAcceptKey_param_g_b_type_bytes": "B parameter, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_decryptedMessageActionAcceptKey_param_key_fingerprint_type_long": "Key fingerprint, see [rekeying process](https:\/\/core.telegram.org\/api\/end-to-end\/pfs)",
    "object_messageEntityUrl": "Message entity representing an in-text url: <https:\/\/google.com>; for [text urls](https:\/\/google.com), use [messageEntityTextUrl](..\/constructors\/messageEntityTextUrl.md).",
    "object_messageEntityUrl_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityUrl_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_channels.sendAsPeers": "A list of peers that can be used to send messages in a specific group",
    "object_channels.sendAsPeers_param_peers_type_Vector<SendAsPeer>": "Peers that can be used to send messages to the group",
    "object_channels.sendAsPeers_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_channels.sendAsPeers_param_users_type_Vector<User>": "Mentioned users",
    "object_phoneCallEmpty": "Empty constructor",
    "object_phoneCallEmpty_param_id_type_long": "Call ID",
    "object_inputChatPhoto": "Existing photo to be set as a chat profile photo.",
    "object_inputChatPhoto_param_id_type_InputPhoto": "Existing photo",
    "object_topPeerCategoryPhoneCalls": "Most frequently called users",
    "object_paymentRequestedInfo": "Order info provided by the user",
    "object_paymentRequestedInfo_param_name_type_flags.0?string": "User's full name",
    "object_paymentRequestedInfo_param_phone_type_flags.1?string": "User's phone number",
    "object_paymentRequestedInfo_param_email_type_flags.2?string": "User's email address",
    "object_paymentRequestedInfo_param_shipping_address_type_flags.3?PostAddress": "User's shipping address",
    "object_auth.codeTypeSms": "The next time, the authentication code will be delivered via an immediately canceled incoming call.",
    "object_encryptedFile": "Encrypted file.",
    "object_encryptedFile_param_id_type_long": "File ID",
    "object_encryptedFile_param_access_hash_type_long": "Checking sum depending on user ID",
    "object_encryptedFile_param_size_type_long": "File size in bytes",
    "object_encryptedFile_param_dc_id_type_int": "Number of data center",
    "object_encryptedFile_param_key_fingerprint_type_int": "32-bit fingerprint of key used for file encryption",
    "object_channelAdminLogEventActionToggleForum": "[Forum](https:\/\/core.telegram.org\/api\/forum) functionality was enabled or disabled.",
    "object_channelAdminLogEventActionToggleForum_param_new_value_type_Bool": "Whether [forum](https:\/\/core.telegram.org\/api\/forum) functionality was enabled or disabled.",
    "object_messageViews": "View, forward counter + info about replies of a specific message",
    "object_messageViews_param_views_type_flags.0?int": "View count of message",
    "object_messageViews_param_forwards_type_flags.1?int": "Forward count of message",
    "object_messageViews_param_replies_type_flags.2?MessageReplies": "Reply and [thread](https:\/\/core.telegram.org\/api\/threads) information of message",
    "object_inputUserFromMessage": "Defines a [min](https:\/\/core.telegram.org\/api\/min) user that was seen in a certain message of a certain chat.",
    "object_inputUserFromMessage_param_peer_type_InputPeer": "The chat where the user was seen",
    "object_inputUserFromMessage_param_msg_id_type_int": "The message ID",
    "object_inputUserFromMessage_param_user_id_type_long": "The identifier of the user that was seen",
    "object_channelParticipantsBots": "Fetch only bot participants",
    "object_searchResultPosition": "Information about a message in a specific position",
    "object_searchResultPosition_param_msg_id_type_int": "Message ID",
    "object_searchResultPosition_param_date_type_int": "When was the message sent",
    "object_searchResultPosition_param_offset_type_int": "0-based message position in the full list of suitable messages",
    "object_secureRequiredTypeOneOf": "One of",
    "object_secureRequiredTypeOneOf_param_types_type_Vector<SecureRequiredType>": "Secure required value types",
    "object_updateMoveStickerSetToTop": "A stickerset was just moved to top, [see here for more info \u00bb](https:\/\/core.telegram.org\/api\/stickers#recent-stickersets)",
    "object_updateMoveStickerSetToTop_param_masks_type_flags.0?true": "This update is referring to a [mask stickerset](https:\/\/core.telegram.org\/api\/stickers#mask-stickers)",
    "object_updateMoveStickerSetToTop_param_emojis_type_flags.1?true": "This update is referring to a [custom emoji stickerset](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "object_updateMoveStickerSetToTop_param_stickerset_type_long": "[Stickerset](https:\/\/core.telegram.org\/api\/stickers) ID",
    "object_secureValueTypeIdentityCard": "Identity card",
    "object_pageBlockList": "Unordered list of IV blocks",
    "object_pageBlockList_param_items_type_Vector<PageListItem>": "List of blocks in an IV page",
    "object_pollAnswerVoters": "A poll answer, and how users voted on it",
    "object_pollAnswerVoters_param_chosen_type_flags.0?true": "Whether we have chosen this answer",
    "object_pollAnswerVoters_param_correct_type_flags.1?true": "For quizzes, whether the option we have chosen is correct",
    "object_pollAnswerVoters_param_option_type_bytes": "The param that has to be passed to [messages.sendVote](..\/methods\/messages.sendVote.md).",
    "object_pollAnswerVoters_param_voters_type_int": "How many users voted for this option",
    "object_auth.loggedOut": "[Future auth token \u00bb](https:\/\/core.telegram.org\/api\/auth#future-auth-tokens) to be used on subsequent authorizations",
    "object_auth.loggedOut_param_future_auth_token_type_flags.0?bytes": "[Future auth token \u00bb](https:\/\/core.telegram.org\/api\/auth#future-auth-tokens) to be used on subsequent authorizations",
    "object_messageEntityCashtag": "Message entity representing a **$cashtag**.",
    "object_messageEntityCashtag_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityCashtag_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_inputTheme": "Theme",
    "object_inputTheme_param_id_type_long": "ID",
    "object_inputTheme_param_access_hash_type_long": "Access hash",
    "object_messageReactions": "[Message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "object_messageReactions_param_min_type_flags.0?true": "Similar to [min](https:\/\/core.telegram.org\/api\/min) objects, used for [message reaction \u00bb](https:\/\/core.telegram.org\/api\/reactions) constructors that are the same for all users so they don't have the reactions sent by the current user (you can use [messages.getMessagesReactions](..\/methods\/messages.getMessagesReactions.md) to get the full reaction info).",
    "object_messageReactions_param_can_see_list_type_flags.2?true": "Whether [messages.getMessageReactionsList](..\/methods\/messages.getMessageReactionsList.md) can be used to see how each specific peer reacted to the message",
    "object_messageReactions_param_results_type_Vector<ReactionCount>": "Reactions",
    "object_messageReactions_param_recent_reactions_type_flags.1?Vector<MessagePeerReaction>": "List of recent peers and their reactions",
    "object_pollAnswer": "A possible answer of a poll",
    "object_pollAnswer_param_text_type_string": "Textual representation of the answer",
    "object_pollAnswer_param_option_type_bytes": "The param that has to be passed to [messages.sendVote](..\/methods\/messages.sendVote.md).",
    "object_requestPeerTypeUser": "Choose a user.",
    "object_requestPeerTypeUser_param_bot_type_flags.0?Bool": "Whether to allow choosing only bots.",
    "object_requestPeerTypeUser_param_premium_type_flags.1?Bool": "Whether to allow choosing only [Premium](https:\/\/core.telegram.org\/api\/premium) users.",
    "object_help.userInfo": "Internal use",
    "object_help.userInfo_param_message_type_string": "Info",
    "object_help.userInfo_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_help.userInfo_param_author_type_string": "Author",
    "object_help.userInfo_param_date_type_int": "Date",
    "object_phoneCall": "Phone call",
    "object_phoneCall_param_p2p_allowed_type_flags.5?true": "Whether P2P connection to the other peer is allowed",
    "object_phoneCall_param_video_type_flags.6?true": "Whether this is a video call",
    "object_phoneCall_param_id_type_long": "Call ID",
    "object_phoneCall_param_access_hash_type_long": "Access hash",
    "object_phoneCall_param_date_type_int": "Date of creation of the call",
    "object_phoneCall_param_admin_id_type_long": "User ID of the creator of the call",
    "object_phoneCall_param_participant_id_type_long": "User ID of the other participant in the call",
    "object_phoneCall_param_g_a_or_b_type_bytes": "[Parameter for key exchange](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "object_phoneCall_param_key_fingerprint_type_long": "[Key fingerprint](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "object_phoneCall_param_protocol_type_PhoneCallProtocol": "Call protocol info to be passed to libtgvoip",
    "object_phoneCall_param_connections_type_Vector<PhoneConnection>": "List of endpoints the user can connect to to exchange call data",
    "object_phoneCall_param_start_date_type_int": "When was the call actually started",
    "object_geoPointEmpty": "Empty constructor.",
    "object_inputPaymentCredentialsAndroidPay": "Android pay payment credentials",
    "object_inputPaymentCredentialsAndroidPay_param_payment_token_type_DataJSON": "Android pay payment token",
    "object_inputPaymentCredentialsAndroidPay_param_google_transaction_id_type_string": "Google transaction ID",
    "object_channelParticipantBanned": "Banned\/kicked user",
    "object_channelParticipantBanned_param_left_type_flags.0?true": "Whether the user has left the group",
    "object_channelParticipantBanned_param_peer_type_Peer": "The banned peer",
    "object_channelParticipantBanned_param_kicked_by_type_long": "User was kicked by the specified admin",
    "object_channelParticipantBanned_param_date_type_int": "When did the user join the group",
    "object_channelParticipantBanned_param_banned_rights_type_ChatBannedRights": "Banned [rights](https:\/\/core.telegram.org\/api\/rights)",
    "object_exportedContactToken": "Describes a [temporary profile link](https:\/\/core.telegram.org\/api\/links#temporary-profile-links).",
    "object_exportedContactToken_param_url_type_string": "The [temporary profile link](https:\/\/core.telegram.org\/api\/links#temporary-profile-links).",
    "object_exportedContactToken_param_expires_type_int": "Its expiry date",
    "object_updateDialogFilterOrder": "New [folder](https:\/\/core.telegram.org\/api\/folders) order",
    "object_updateDialogFilterOrder_param_order_type_Vector<int>": "Ordered [folder IDs](https:\/\/core.telegram.org\/api\/folders)",
    "object_premiumSubscriptionOption": "Describes a Telegram Premium subscription option",
    "object_premiumSubscriptionOption_param_current_type_flags.1?true": "Whether this subscription option is currently in use.",
    "object_premiumSubscriptionOption_param_can_purchase_upgrade_type_flags.2?true": "Whether this subscription option can be used to upgrade the existing Telegram Premium subscription. When upgrading Telegram Premium subscriptions bought through stores, make sure that the store transaction ID is equal to `transaction`, to avoid upgrading someone else's account, if the client is currently logged into multiple accounts.",
    "object_premiumSubscriptionOption_param_transaction_type_flags.3?string": "Identifier of the last in-store transaction for the currently used subscription on the current account.",
    "object_premiumSubscriptionOption_param_months_type_int": "Duration of subscription in months",
    "object_premiumSubscriptionOption_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_premiumSubscriptionOption_param_amount_type_long": "Total price in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_premiumSubscriptionOption_param_bot_url_type_string": "[Deep link](https:\/\/core.telegram.org\/api\/links) used to initiate payment",
    "object_premiumSubscriptionOption_param_store_product_type_flags.0?string": "Store product ID, only for official apps",
    "object_statsGraphAsync": "This [channel statistics graph](https:\/\/core.telegram.org\/api\/stats) must be generated asynchronously using [stats.loadAsyncGraph](..\/methods\/stats.loadAsyncGraph.md) to reduce server load",
    "object_statsGraphAsync_param_token_type_string": "Token to use for fetching the async graph",
    "object_inputMessageReplyTo": "Message to which the specified message replies to",
    "object_inputMessageReplyTo_param_id_type_int": "ID of the message that replies to the message we need",
    "object_emailVerificationApple": "Apple ID email verification token",
    "object_emailVerificationApple_param_token_type_string": "Token",
    "object_messages.dialogsSlice": "Incomplete list of dialogs with messages and auxiliary data.",
    "object_messages.dialogsSlice_param_count_type_int": "Total number of dialogs",
    "object_messages.dialogsSlice_param_dialogs_type_Vector<Dialog>": "List of dialogs",
    "object_messages.dialogsSlice_param_messages_type_Vector<Message>": "List of last messages from dialogs",
    "object_messages.dialogsSlice_param_chats_type_Vector<Chat>": "List of chats mentioned in dialogs",
    "object_messages.dialogsSlice_param_users_type_Vector<User>": "List of users mentioned in messages and chats",
    "object_decryptedMessageMediaVideo": "Video attached to an encrypted message.",
    "object_decryptedMessageMediaVideo_param_thumb_type_bytes": "Content of thumbnail file (JPEG file, quality 55, set in a square 90x90)",
    "object_decryptedMessageMediaVideo_param_thumb_w_type_int": "Thumbnail width",
    "object_decryptedMessageMediaVideo_param_thumb_h_type_int": "Thumbnail height",
    "object_decryptedMessageMediaVideo_param_duration_type_int": "Duration of video in seconds",
    "object_decryptedMessageMediaVideo_param_mime_type_type_string": "MIME-type of the video file<br>Parameter added in Layer 17.",
    "object_decryptedMessageMediaVideo_param_w_type_int": "Image width",
    "object_decryptedMessageMediaVideo_param_h_type_int": "Image height",
    "object_decryptedMessageMediaVideo_param_size_type_int": "File size",
    "object_decryptedMessageMediaVideo_param_key_type_bytes": "Key to decrypt the attached video file",
    "object_decryptedMessageMediaVideo_param_iv_type_bytes": "Initialization vector",
    "object_decryptedMessageMediaVideo_param_caption_type_string": "Caption",
    "object_channelLocationEmpty": "No location (normal supergroup)",
    "object_inlineQueryPeerTypeBroadcast": "Peer type: [channel](https:\/\/core.telegram.org\/api\/channel)",
    "object_messageActionPinMessage": "A message was pinned",
    "object_decryptedMessageActionDeleteMessages": "Deleted messages.",
    "object_decryptedMessageActionDeleteMessages_param_random_ids_type_Vector<long>": "List of deleted message IDs",
    "object_privacyKeyAddedByPhone": "Whether this user can be added to our contact list by their phone number",
    "object_messageActionScreenshotTaken": "A screenshot of the chat was taken",
    "object_baseThemeNight": "Night theme",
    "object_auth.codeTypeMissedCall": "The next time, the authentication code will be delivered via an immediately canceled incoming call, handled manually by the user.",
    "object_channelParticipantSelf": "Myself",
    "object_channelParticipantSelf_param_via_request_type_flags.0?true": "Whether I joined upon specific approval of an admin",
    "object_channelParticipantSelf_param_user_id_type_long": "User ID",
    "object_channelParticipantSelf_param_inviter_id_type_long": "User that invited me to the channel\/supergroup",
    "object_channelParticipantSelf_param_date_type_int": "When did I join the channel\/supergroup",
    "object_keyboardButtonUserProfile": "Button that links directly to a user profile",
    "object_keyboardButtonUserProfile_param_text_type_string": "Button text",
    "object_keyboardButtonUserProfile_param_user_id_type_long": "User ID",
    "object_help.passportConfig": "Telegram [passport](https:\/\/core.telegram.org\/passport) configuration",
    "object_help.passportConfig_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_help.passportConfig_param_countries_langs_type_DataJSON": "Localization",
    "object_messageMediaInvoice": "Invoice",
    "object_messageMediaInvoice_param_shipping_address_requested_type_flags.1?true": "Whether the shipping address was requested",
    "object_messageMediaInvoice_param_test_type_flags.3?true": "Whether this is an example invoice",
    "object_messageMediaInvoice_param_title_type_string": "Product name, 1-32 characters",
    "object_messageMediaInvoice_param_description_type_string": "Product description, 1-255 characters",
    "object_messageMediaInvoice_param_photo_type_flags.0?WebDocument": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
    "object_messageMediaInvoice_param_receipt_msg_id_type_flags.2?int": "Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](..\/constructors\/keyboardButtonBuy.md) button always attached to the [message](..\/constructors\/message.md) to a localized version of the word `Receipt`",
    "object_messageMediaInvoice_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_messageMediaInvoice_param_total_amount_type_long": "Total price in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_messageMediaInvoice_param_start_param_type_string": "Unique bot deep-linking parameter that can be used to generate this invoice",
    "object_messageMediaInvoice_param_extended_media_type_flags.4?MessageExtendedMedia": "Extended media",
    "object_messages.checkedHistoryImportPeer": "Contains a confirmation text to be shown to the user, upon [importing chat history, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "object_messages.checkedHistoryImportPeer_param_confirm_text_type_string": "A confirmation text to be shown to the user, upon [importing chat history \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "object_account.emojiStatuses": "A list of [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status)",
    "object_account.emojiStatuses_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_account.emojiStatuses_param_statuses_type_Vector<EmojiStatus>": "[Emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status)",
    "object_account.contentSettings": "Sensitive content settings",
    "object_account.contentSettings_param_sensitive_enabled_type_flags.0?true": "Whether viewing of sensitive (NSFW) content is enabled",
    "object_account.contentSettings_param_sensitive_can_change_type_flags.1?true": "Whether the current client can change the sensitive content settings to view NSFW content",
    "object_webPage": "Webpage preview",
    "object_webPage_param_id_type_long": "Preview ID",
    "object_webPage_param_url_type_string": "URL of previewed webpage",
    "object_webPage_param_display_url_type_string": "Webpage URL to be displayed to the user",
    "object_webPage_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_webPage_param_type_type_flags.0?string": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else",
    "object_webPage_param_site_name_type_flags.1?string": "Short name of the site (e.g., Google Docs, App Store)",
    "object_webPage_param_title_type_flags.2?string": "Title of the content",
    "object_webPage_param_description_type_flags.3?string": "Content description",
    "object_webPage_param_photo_type_flags.4?Photo": "Image representing the content",
    "object_webPage_param_embed_url_type_flags.5?string": "URL to show in the embedded preview",
    "object_webPage_param_embed_type_type_flags.5?string": "MIME type of the embedded preview, (e.g., text\/html or video\/mp4)",
    "object_webPage_param_embed_width_type_flags.6?int": "Width of the embedded preview",
    "object_webPage_param_embed_height_type_flags.6?int": "Height of the embedded preview",
    "object_webPage_param_duration_type_flags.7?int": "Duration of the content, in seconds",
    "object_webPage_param_author_type_flags.8?string": "Author of the content",
    "object_webPage_param_document_type_flags.9?Document": "Preview of the content as a media file",
    "object_webPage_param_cached_page_type_flags.10?Page": "Page contents in [instant view](https:\/\/instantview.telegram.org) format",
    "object_webPage_param_attributes_type_flags.12?Vector<WebPageAttribute>": "Webpage attributes",
    "object_sendMessageUploadVideoAction": "User is uploading a video.",
    "object_sendMessageUploadVideoAction_param_progress_type_int": "Progress percentage",
    "object_account.resetPasswordOk": "The 2FA password was reset successfully.",
    "object_emojiKeywordsDifference": "Changes to emoji keywords",
    "object_emojiKeywordsDifference_param_lang_code_type_string": "Language code for keywords",
    "object_emojiKeywordsDifference_param_from_version_type_int": "Previous emoji keyword list version",
    "object_emojiKeywordsDifference_param_version_type_int": "Current version of emoji keyword list",
    "object_emojiKeywordsDifference_param_keywords_type_Vector<EmojiKeyword>": "Emojis associated to keywords",
    "object_help.userInfoEmpty": "Internal use",
    "object_decryptedMessage": "Contents of an encrypted message.",
    "object_decryptedMessage_param_no_webpage_type_flags.1?true": "Whether the webpage preview is disabled",
    "object_decryptedMessage_param_silent_type_flags.5?true": "Whether this is a silent message (no notification triggered)",
    "object_decryptedMessage_param_random_id_type_long": "Random message ID, assigned by the author of message.<br>Must be equal to the ID passed to sending method.",
    "object_decryptedMessage_param_ttl_type_int": "Message lifetime. Has higher priority than [decryptedMessageActionSetMessageTTL](..\/constructors\/decryptedMessageActionSetMessageTTL.md).<br>Parameter added in Layer 17.",
    "object_decryptedMessage_param_message_type_string": "Message text",
    "object_decryptedMessage_param_media_type_flags.9?DecryptedMessageMedia": "Media content",
    "object_decryptedMessage_param_entities_type_flags.7?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text (parameter added in layer 45)",
    "object_decryptedMessage_param_via_bot_name_type_flags.11?string": "Specifies the ID of the inline bot that generated the message (parameter added in layer 45)",
    "object_decryptedMessage_param_reply_to_random_id_type_flags.3?long": "Random message ID of the message this message replies to (parameter added in layer 45)",
    "object_decryptedMessage_param_grouped_id_type_flags.17?long": "Random group ID, assigned by the author of message.<br>Multiple encrypted messages with a photo attached and with the same group ID indicate an [album or grouped media](https:\/\/core.telegram.org\/api\/files#albums-grouped-media) (parameter added in layer 45)",
    "object_decryptedMessageService": "Contents of an encrypted service message.",
    "object_decryptedMessageService_param_random_id_type_long": "Random message ID, assigned by the message author.<br>Must be equal to the ID passed to the sending method.",
    "object_decryptedMessageService_param_action_type_DecryptedMessageAction": "Action relevant to the service message",
    "object_jsonNull": "null JSON value",
    "object_messageEntityBlockquote": "Message entity representing a block quote.",
    "object_messageEntityBlockquote_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityBlockquote_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_replyKeyboardMarkup": "Bot keyboard",
    "object_replyKeyboardMarkup_param_resize_type_flags.0?true": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard.",
    "object_replyKeyboardMarkup_param_single_use_type_flags.1?true": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat \u2013 the user can press a special button in the input field to see the custom keyboard again.",
    "object_replyKeyboardMarkup_param_selective_type_flags.2?true": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\\_to\\_message\\_id), sender of the original message.<br><br>Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.",
    "object_replyKeyboardMarkup_param_persistent_type_flags.4?true": "Requests clients to always show the keyboard when the regular keyboard is hidden.",
    "object_replyKeyboardMarkup_param_rows_type_Vector<KeyboardButtonRow>": "Button row",
    "object_replyKeyboardMarkup_param_placeholder_type_flags.3?string": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.",
    "object_attachMenuBotIconColor": "Represents an attachment menu icon color for [bot web apps \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "object_attachMenuBotIconColor_param_name_type_string": "One of the following values: <br>`light_icon` \\- Color of the attachment menu icon (light mode) <br>`light_text` \\- Color of the attachment menu label, once selected (light mode) <br>`dark_icon` \\- Color of the attachment menu icon (dark mode) <br>`dark_text` \\- Color of the attachment menu label, once selected (dark mode)",
    "object_attachMenuBotIconColor_param_color_type_int": "Color in RGB24 format",
    "object_paymentCharge": "Payment identifier",
    "object_paymentCharge_param_id_type_string": "Telegram payment identifier",
    "object_paymentCharge_param_provider_charge_id_type_string": "Provider payment identifier",
    "object_updateBotInlineQuery": "An incoming inline query",
    "object_updateBotInlineQuery_param_query_id_type_long": "Query ID",
    "object_updateBotInlineQuery_param_user_id_type_long": "User that sent the query",
    "object_updateBotInlineQuery_param_query_type_string": "Text of query",
    "object_updateBotInlineQuery_param_geo_type_flags.0?GeoPoint": "Attached geolocation",
    "object_updateBotInlineQuery_param_peer_type_type_flags.1?InlineQueryPeerType": "Type of the chat from which the inline query was sent.",
    "object_updateBotInlineQuery_param_offset_type_string": "Offset to navigate through results",
    "object_sendMessageUploadAudioAction": "User is uploading a voice message.",
    "object_sendMessageUploadAudioAction_param_progress_type_int": "Progress percentage",
    "object_photoSizeEmpty": "Empty constructor. Image with this thumbnail is unavailable.",
    "object_photoSizeEmpty_param_type_type_string": "[Thumbnail type \u00bb](https:\/\/core.telegram.org\/api\/files#image-thumbnail-types)",
    "object_chatTheme": "A chat theme",
    "object_chatTheme_param_emoticon_type_string": "Emoji, identifying this specific chat theme",
    "object_chatTheme_param_theme_type_Theme": "Theme",
    "object_chatTheme_param_dark_theme_type_Theme": "Dark mode theme",
    "object_inputWallPaperSlug": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) by slug (a unique ID, obtained from a [wallpaper link \u00bb](https:\/\/core.telegram.org\/api\/links#wallpaper-links))",
    "object_inputWallPaperSlug_param_slug_type_string": "Unique wallpaper ID",
    "object_inputEncryptedFile": "Sets forwarded encrypted file for attachment.",
    "object_inputEncryptedFile_param_id_type_long": "File ID, value of **id** parameter from [encryptedFile](..\/constructors\/encryptedFile.md)",
    "object_inputEncryptedFile_param_access_hash_type_long": "Checking sum, value of **access\\_hash** parameter from [encryptedFile](..\/constructors\/encryptedFile.md)",
    "object_messageReplyHeader": "Message replies and [thread](https:\/\/core.telegram.org\/api\/threads) information",
    "object_messageReplyHeader_param_reply_to_scheduled_type_flags.2?true": "This is a reply to a scheduled message.",
    "object_messageReplyHeader_param_forum_topic_type_flags.3?true": "Whether this message was sent in a [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) (except for the General topic).",
    "object_messageReplyHeader_param_reply_to_msg_id_type_int": "ID of message to which this message is replying",
    "object_messageReplyHeader_param_reply_to_peer_id_type_flags.0?Peer": "For replies sent in [channel discussion threads](https:\/\/core.telegram.org\/api\/threads) of which the current user is not a member, the discussion group ID",
    "object_messageReplyHeader_param_reply_to_top_id_type_flags.1?int": "ID of the message that started this [message thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_sendMessageRecordVideoAction": "User is recording a video.",
    "object_decryptedMessageActionAbortKey": "Abort rekeying",
    "object_decryptedMessageActionAbortKey_param_exchange_id_type_long": "Exchange ID",
    "object_appWebViewResultUrl": "Contains the link that must be used to open a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps).",
    "object_appWebViewResultUrl_param_url_type_string": "The URL to open",
    "object_inputPeerUserFromMessage": "Defines a [min](https:\/\/core.telegram.org\/api\/min) user that was seen in a certain message of a certain chat.",
    "object_inputPeerUserFromMessage_param_peer_type_InputPeer": "The chat where the user was seen",
    "object_inputPeerUserFromMessage_param_msg_id_type_int": "The message ID",
    "object_inputPeerUserFromMessage_param_user_id_type_long": "The identifier of the user that was seen",
    "object_encryptedChatRequested": "Request to create an encrypted chat.",
    "object_encryptedChatRequested_param_folder_id_type_flags.0?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_encryptedChatRequested_param_id_type_int": "Chat ID",
    "object_encryptedChatRequested_param_access_hash_type_long": "Check sum depending on user ID",
    "object_encryptedChatRequested_param_date_type_int": "Chat creation date",
    "object_encryptedChatRequested_param_admin_id_type_long": "Chat creator ID",
    "object_encryptedChatRequested_param_participant_id_type_long": "ID of second chat participant",
    "object_encryptedChatRequested_param_g_a_type_bytes": "`A = g ^ a mod p`, see [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange)",
    "object_updateWebViewResultSent": "Indicates to a bot that a webview was closed and an inline message was sent on behalf of the user using [messages.sendWebViewResultMessage](..\/methods\/messages.sendWebViewResultMessage.md)",
    "object_updateWebViewResultSent_param_query_id_type_long": "Web app interaction ID",
    "object_inputSecureValue": "Secure value, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "object_inputSecureValue_param_type_type_SecureValueType": "Secure [passport](https:\/\/core.telegram.org\/passport) value type",
    "object_inputSecureValue_param_data_type_flags.0?SecureData": "Encrypted [Telegram Passport](https:\/\/core.telegram.org\/passport) element data",
    "object_inputSecureValue_param_front_side_type_flags.1?InputSecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with the front side of the document",
    "object_inputSecureValue_param_reverse_side_type_flags.2?InputSecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with the reverse side of the document",
    "object_inputSecureValue_param_selfie_type_flags.3?InputSecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with a selfie of the user holding the document",
    "object_inputSecureValue_param_translation_type_flags.6?Vector<InputSecureFile>": "Array of encrypted [passport](https:\/\/core.telegram.org\/passport) files with translated versions of the provided documents",
    "object_inputSecureValue_param_files_type_flags.4?Vector<InputSecureFile>": "Array of encrypted [passport](https:\/\/core.telegram.org\/passport) files with photos the of the documents",
    "object_inputSecureValue_param_plain_data_type_flags.5?SecurePlainData": "Plaintext verified [passport](https:\/\/core.telegram.org\/passport) data",
    "object_help.proxyDataPromo": "Promotion channel associated to a certain MTProxy",
    "object_help.proxyDataPromo_param_expires_type_int": "Expiration date of proxy info, will have to be refetched in `expires` seconds",
    "object_help.proxyDataPromo_param_peer_type_Peer": "The promoted channel",
    "object_help.proxyDataPromo_param_chats_type_Vector<Chat>": "Chats",
    "object_help.proxyDataPromo_param_users_type_Vector<User>": "Users",
    "object_messages.dialogsNotModified": "Dialogs haven't changed",
    "object_messages.dialogsNotModified_param_count_type_int": "Number of dialogs found server-side by the query",
    "object_exportedChatlistInvite": "Exported [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_exportedChatlistInvite_param_title_type_string": "Name of the link",
    "object_exportedChatlistInvite_param_url_type_string": "The [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_exportedChatlistInvite_param_peers_type_Vector<Peer>": "Peers to import",
    "object_statsGraph": "[Channel statistics graph](https:\/\/core.telegram.org\/api\/stats)",
    "object_statsGraph_param_json_type_DataJSON": "Statistics data",
    "object_statsGraph_param_zoom_token_type_flags.0?string": "Zoom token",
    "object_chatInviteImporter": "When and which user joined the chat using a chat invite",
    "object_chatInviteImporter_param_requested_type_flags.0?true": "Whether this user currently has a pending [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "object_chatInviteImporter_param_via_chatlist_type_flags.3?true": "The participant joined by importing a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "object_chatInviteImporter_param_user_id_type_long": "The user",
    "object_chatInviteImporter_param_date_type_int": "When did the user join",
    "object_chatInviteImporter_param_about_type_flags.2?string": "For users with pending requests, contains bio of the user that requested to join",
    "object_chatInviteImporter_param_approved_by_type_flags.1?long": "The administrator that approved the [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) of the user",
    "object_userStatusOffline": "The user's offline status.",
    "object_userStatusOffline_param_was_online_type_int": "Time the user was last seen online",
    "object_passwordKdfAlgoUnknown": "Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm)",
    "object_help.appUpdate": "An update is available for the application.",
    "object_help.appUpdate_param_can_not_skip_type_flags.0?true": "Unskippable, the new info must be shown to the user (with a popup or something else)",
    "object_help.appUpdate_param_id_type_int": "Update ID",
    "object_help.appUpdate_param_version_type_string": "New version name",
    "object_help.appUpdate_param_text_type_string": "Text description of the update",
    "object_help.appUpdate_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_help.appUpdate_param_document_type_flags.1?Document": "Application binary",
    "object_help.appUpdate_param_url_type_flags.2?string": "Application download URL",
    "object_help.appUpdate_param_sticker_type_flags.3?Document": "Associated sticker",
    "object_secureValueTypePersonalDetails": "Personal details",
    "object_channelAdminLogEventActionToggleGroupCallSetting": "Group call settings were changed",
    "object_channelAdminLogEventActionToggleGroupCallSetting_param_join_muted_type_Bool": "Whether all users are muted by default upon joining",
    "object_updateBotPrecheckoutQuery": "This object contains information about an incoming pre-checkout query.",
    "object_updateBotPrecheckoutQuery_param_query_id_type_long": "Unique query identifier",
    "object_updateBotPrecheckoutQuery_param_user_id_type_long": "User who sent the query",
    "object_updateBotPrecheckoutQuery_param_payload_type_bytes": "Bot specified invoice payload",
    "object_updateBotPrecheckoutQuery_param_info_type_flags.0?PaymentRequestedInfo": "Order info provided by the user",
    "object_updateBotPrecheckoutQuery_param_shipping_option_id_type_flags.1?string": "Identifier of the shipping option chosen by the user",
    "object_updateBotPrecheckoutQuery_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_updateBotPrecheckoutQuery_param_total_amount_type_long": "Total amount in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_jsonString": "JSON string",
    "object_jsonString_param_value_type_string": "Value",
    "object_messageEntitySpoiler": "Message entity representing a spoiler",
    "object_messageEntitySpoiler_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntitySpoiler_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_channelParticipantsMentions": "This filter is used when looking for supergroup members to mention.  \nThis filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific [thread](https:\/\/core.telegram.org\/api\/threads) through the [comment section](https:\/\/core.telegram.org\/api\/threads#channel-comments) of a channel.",
    "object_channelParticipantsMentions_param_q_type_flags.0?string": "Filter by user name or username",
    "object_channelParticipantsMentions_param_top_msg_id_type_flags.1?int": "Look only for users that posted in this [thread](https:\/\/core.telegram.org\/api\/threads)",
    "object_messageMediaUnsupported": "Current version of the client does not support this media type.",
    "object_messageActionInviteToGroupCall": "A set of users was invited to the group call",
    "object_messageActionInviteToGroupCall_param_call_type_InputGroupCall": "The group call",
    "object_messageActionInviteToGroupCall_param_users_type_Vector<long>": "The invited users",
    "object_documentAttributeCustomEmoji": "Info about a custom emoji",
    "object_documentAttributeCustomEmoji_param_free_type_flags.0?true": "Whether this custom emoji can be sent by non-Premium users",
    "object_documentAttributeCustomEmoji_param_text_color_type_flags.1?true": "Whether the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context.",
    "object_documentAttributeCustomEmoji_param_alt_type_string": "The actual emoji",
    "object_documentAttributeCustomEmoji_param_stickerset_type_InputStickerSet": "The emoji stickerset to which this emoji belongs.",
    "object_updateInlineBotCallbackQuery": "This notification is received by bots when a button is pressed",
    "object_updateInlineBotCallbackQuery_param_query_id_type_long": "Query ID",
    "object_updateInlineBotCallbackQuery_param_user_id_type_long": "ID of the user that pressed the button",
    "object_updateInlineBotCallbackQuery_param_msg_id_type_InputBotInlineMessageID": "ID of the inline message with the button",
    "object_updateInlineBotCallbackQuery_param_chat_instance_type_long": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
    "object_updateInlineBotCallbackQuery_param_data_type_flags.0?bytes": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.",
    "object_updateInlineBotCallbackQuery_param_game_short_name_type_flags.1?string": "Short name of a Game to be returned, serves as the unique identifier for the game",
    "object_receivedNotifyMessage": "Message ID, for which PUSH-notifications were cancelled.",
    "object_receivedNotifyMessage_param_id_type_int": "Message ID, for which PUSH-notifications were canceled",
    "object_chatReactionsNone": "No reactions are allowed",
    "object_stats.messageStats": "Message statistics",
    "object_stats.messageStats_param_views_graph_type_StatsGraph": "Message view graph",
    "object_upload.webFile": "Represents a chunk of an [HTTP webfile](https:\/\/core.telegram.org\/api\/files) downloaded through telegram's secure MTProto servers",
    "object_upload.webFile_param_size_type_int": "File size",
    "object_upload.webFile_param_mime_type_type_string": "Mime type",
    "object_upload.webFile_param_file_type_type_storage.FileType": "File type",
    "object_upload.webFile_param_mtime_type_int": "Modified time",
    "object_upload.webFile_param_bytes_type_bytes": "Data",
    "object_inputPrivacyValueAllowContacts": "Allow only contacts",
    "object_messages.messagesSlice": "Incomplete list of messages and auxiliary data.",
    "object_messages.messagesSlice_param_inexact_type_flags.1?true": "If set, indicates that the results may be inexact",
    "object_messages.messagesSlice_param_count_type_int": "Total number of messages in the list",
    "object_messages.messagesSlice_param_next_rate_type_flags.0?int": "Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](..\/methods\/messages.searchGlobal.md)",
    "object_messages.messagesSlice_param_offset_id_offset_type_flags.2?int": "Indicates the absolute position of `messages[0]` within the total result set with count `count`. <br>This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress\/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`.",
    "object_messages.messagesSlice_param_messages_type_Vector<Message>": "List of messages",
    "object_messages.messagesSlice_param_chats_type_Vector<Chat>": "List of chats mentioned in messages",
    "object_messages.messagesSlice_param_users_type_Vector<User>": "List of users mentioned in messages and chats",
    "object_dataJSON": "Represents a json-encoded object",
    "object_dataJSON_param_data_type_string": "JSON-encoded object",
    "object_userProfilePhoto": "User profile photo.",
    "object_userProfilePhoto_param_has_video_type_flags.0?true": "Whether an [animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) is available for this user",
    "object_userProfilePhoto_param_personal_type_flags.2?true": "Whether this profile photo is only visible to us (i.e. it was set using [photos.uploadContactProfilePhoto](..\/methods\/photos.uploadContactProfilePhoto.md)).",
    "object_userProfilePhoto_param_photo_id_type_long": "Identifier of the respective photo",
    "object_userProfilePhoto_param_stripped_thumb_type_flags.1?bytes": "[Stripped thumbnail](https:\/\/core.telegram.org\/api\/files#stripped-thumbnails)",
    "object_userProfilePhoto_param_dc_id_type_int": "DC ID where the photo is stored",
    "object_auth.sentCodeSuccess": "The user successfully authorized using [future auth tokens](https:\/\/core.telegram.org\/api\/auth#future-auth-tokens)",
    "object_auth.sentCodeSuccess_param_authorization_type_auth.Authorization": "Authorization info",
    "object_geoPoint": "GeoPoint.",
    "object_geoPoint_param_long_type_double": "Longitude",
    "object_geoPoint_param_lat_type_double": "Latitude",
    "object_geoPoint_param_access_hash_type_long": "Access hash",
    "object_geoPoint_param_accuracy_radius_type_flags.0?int": "The estimated horizontal accuracy of the location, in meters; as defined by the sender.",
    "object_updateChannelTooLong": "There are new updates in the specified channel, the client must fetch them.  \nIf the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts.",
    "object_updateChannelTooLong_param_channel_id_type_long": "The channel",
    "object_updateChannelTooLong_param_pts_type_flags.0?int": "The [PTS](https:\/\/core.telegram.org\/api\/updates).",
    "object_channelParticipantsAdmins": "Fetch only admin participants",
    "object_messageActionSetSameChatWallPaper": "The user applied a [wallpaper \u00bb](https:\/\/core.telegram.org\/api\/wallpapers) previously sent by the other user in a [messageActionSetChatWallPaper](..\/constructors\/messageActionSetChatWallPaper.md) message.",
    "object_messageActionSetSameChatWallPaper_param_wallpaper_type_WallPaper": "The [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_inputFileBig": "Assigns a big file (over 10 MB in size), saved in part using the method [upload.saveBigFilePart](..\/methods\/upload.saveBigFilePart.md).",
    "object_inputFileBig_param_id_type_long": "Random file id, created by the client",
    "object_inputFileBig_param_parts_type_int": "Number of parts saved",
    "object_inputFileBig_param_name_type_string": "Full file name",
    "object_inputPrivacyValueDisallowUsers": "Disallow only certain users",
    "object_inputPrivacyValueDisallowUsers_param_users_type_Vector<InputUser>": "Users to disallow",
    "object_messages.peerDialogs": "Dialog info of multiple peers",
    "object_messages.peerDialogs_param_dialogs_type_Vector<Dialog>": "Dialog info",
    "object_messages.peerDialogs_param_messages_type_Vector<Message>": "Messages mentioned in dialog info",
    "object_messages.peerDialogs_param_chats_type_Vector<Chat>": "Chats",
    "object_messages.peerDialogs_param_users_type_Vector<User>": "Users",
    "object_messages.peerDialogs_param_state_type_updates.State": "Current [update state of dialog](https:\/\/core.telegram.org\/api\/updates)",
    "object_messages.availableReactionsNotModified": "No new reactions are available",
    "object_themeSettings": "Theme settings",
    "object_themeSettings_param_message_colors_animated_type_flags.2?true": "If set, the freeform gradient fill needs to be animated on every sent message.",
    "object_themeSettings_param_base_theme_type_BaseTheme": "Base theme",
    "object_themeSettings_param_accent_color_type_int": "Accent color, ARGB format",
    "object_themeSettings_param_outbox_accent_color_type_flags.3?int": "Accent color of outgoing messages in ARGB format",
    "object_themeSettings_param_message_colors_type_flags.0?Vector<int>": "The fill to be used as a background for outgoing messages, in RGB24 format. <br>If just one or two equal colors are provided, describes a solid fill of a background. <br>If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.<br>If three or four colors are provided, describes a freeform gradient fill of a background.",
    "object_themeSettings_param_wallpaper_type_flags.1?WallPaper": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "object_auth.loginToken": "Login token (for [QR code login](https:\/\/core.telegram.org\/api\/qr-login))",
    "object_auth.loginToken_param_expires_type_int": "Expiry date of QR code",
    "object_auth.loginToken_param_token_type_bytes": "Token to render in QR code",
    "object_inputFolderPeer": "Peer in a folder",
    "object_inputFolderPeer_param_peer_type_InputPeer": "Peer",
    "object_inputFolderPeer_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_pageBlockAnchor": "Link to section within the page itself (like `<a href=\"#target\">anchor<\/a>`)",
    "object_pageBlockAnchor_param_name_type_string": "Name of target section",
    "object_updates.channelDifference": "The new updates",
    "object_updates.channelDifference_param_final_type_flags.0?true": "Whether there are more updates to be fetched using getDifference, starting from the provided `pts`",
    "object_updates.channelDifference_param_pts_type_int": "The [PTS](https:\/\/core.telegram.org\/api\/updates) from which to start getting updates the next time",
    "object_updates.channelDifference_param_timeout_type_flags.1?int": "Clients are supposed to refetch the channel difference after timeout seconds have elapsed",
    "object_updates.channelDifference_param_new_messages_type_Vector<Message>": "New messages",
    "object_updates.channelDifference_param_other_updates_type_Vector<Update>": "Other updates",
    "object_updates.channelDifference_param_chats_type_Vector<Chat>": "Chats",
    "object_updates.channelDifference_param_users_type_Vector<User>": "Users",
    "object_inputPaymentCredentialsSaved": "Saved payment credentials",
    "object_inputPaymentCredentialsSaved_param_id_type_string": "Credential ID",
    "object_inputPaymentCredentialsSaved_param_tmp_password_type_bytes": "Temporary password",
    "object_messages.chatsSlice": "Partial list of chats, more would have to be fetched with [pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "object_messages.chatsSlice_param_count_type_int": "Total number of results that were found server-side (not all are included in `chats`)",
    "object_messages.chatsSlice_param_chats_type_Vector<Chat>": "Chats",
    "object_documentAttributeAnimated": "Defines an animated GIF",
    "object_updateChannelAvailableMessages": "The history of a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) was hidden.",
    "object_updateChannelAvailableMessages_param_channel_id_type_long": "Channel\/supergroup ID",
    "object_updateChannelAvailableMessages_param_available_min_id_type_int": "Identifier of a maximum unavailable message in a channel due to hidden history.",
    "object_inputThemeSettings": "Theme settings",
    "object_inputThemeSettings_param_message_colors_animated_type_flags.2?true": "If set, the freeform gradient fill needs to be animated on every sent message",
    "object_inputThemeSettings_param_base_theme_type_BaseTheme": "Default theme on which this theme is based",
    "object_inputThemeSettings_param_accent_color_type_int": "Accent color, ARGB format",
    "object_inputThemeSettings_param_outbox_accent_color_type_flags.3?int": "Accent color of outgoing messages in ARGB format",
    "object_inputThemeSettings_param_message_colors_type_flags.0?Vector<int>": "The fill to be used as a background for outgoing messages, in RGB24 format. <br>If just one or two equal colors are provided, describes a solid fill of a background. <br>If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.<br>If three or four colors are provided, describes a freeform gradient fill of a background.",
    "object_inputThemeSettings_param_wallpaper_type_flags.1?InputWallPaper": "[inputWallPaper](..\/constructors\/inputWallPaper.md) or [inputWallPaperSlug](..\/constructors\/inputWallPaper.md) when passing wallpaper files for [image](https:\/\/core.telegram.org\/api\/wallpapers#image-wallpapers) or [pattern](https:\/\/core.telegram.org\/api\/wallpapers#pattern-wallpapers) wallpapers, [inputWallPaperNoFile](..\/constructors\/inputWallPaperNoFile.md) with `id=0` otherwise.",
    "object_inputThemeSettings_param_wallpaper_settings_type_flags.1?WallPaperSettings": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) settings.",
    "object_messages.stickerSetInstallResultArchive": "The stickerset was installed, but since there are too many stickersets some were archived",
    "object_messages.stickerSetInstallResultArchive_param_sets_type_Vector<StickerSetCovered>": "Archived stickersets",
    "object_account.emojiStatusesNotModified": "The server-side list of [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status) hasn't changed",
    "object_speakingInGroupCallAction": "User is currently speaking in the group call",
    "object_documentAttributeImageSize": "Defines the width and height of an image uploaded as document",
    "object_documentAttributeImageSize_param_w_type_int": "Width of image",
    "object_documentAttributeImageSize_param_h_type_int": "Height of image",
    "object_messages.stickerSetInstallResultSuccess": "The stickerset was installed successfully",
    "object_botMenuButtonDefault": "Placeholder [bot menu button](https:\/\/core.telegram.org\/api\/bots\/menu) never returned to users: see [the docs for more info](https:\/\/core.telegram.org\/api\/bots\/menu).",
    "object_contacts.importedContacts": "Info on successfully imported contacts.",
    "object_contacts.importedContacts_param_imported_type_Vector<ImportedContact>": "List of successfully imported contacts",
    "object_contacts.importedContacts_param_popular_invites_type_Vector<PopularContact>": "Popular contacts",
    "object_contacts.importedContacts_param_retry_contacts_type_Vector<long>": "List of contact ids that could not be imported due to system limitation and will need to be imported at a later date.",
    "object_contacts.importedContacts_param_users_type_Vector<User>": "List of users",
    "object_help.proxyDataEmpty": "No proxy was used to connect to tg (or none was provided to [initConnection](..\/methods\/initConnection.md), or the used proxy doesn't have a promotion channel associated to it)",
    "object_help.proxyDataEmpty_param_expires_type_int": "Expiration date of proxy info, will have to be refetched in `expires` seconds",
    "object_jsonNumber": "JSON numeric value",
    "object_jsonNumber_param_value_type_double": "Value",
    "object_help.appConfigNotModified": "The client configuration parameters haven't changed",
    "object_botInlineMessageMediaGeo": "Send a geolocation",
    "object_botInlineMessageMediaGeo_param_geo_type_GeoPoint": "Geolocation",
    "object_botInlineMessageMediaGeo_param_heading_type_flags.0?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a direction in which the location moves, in degrees; 1-360.",
    "object_botInlineMessageMediaGeo_param_period_type_flags.1?int": "Validity period",
    "object_botInlineMessageMediaGeo_param_proximity_notification_radius_type_flags.3?int": "For [live locations](https:\/\/core.telegram.org\/api\/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000).",
    "object_botInlineMessageMediaGeo_param_reply_markup_type_flags.2?ReplyMarkup": "Inline keyboard",
    "object_inputGeoPointEmpty": "Empty GeoPoint constructor.",
    "object_messageUserVoteInputOption": "How a user voted in a poll (reduced constructor, returned if an `option` was provided to [messages.getPollVotes](..\/methods\/messages.getPollVotes.md))",
    "object_messageUserVoteInputOption_param_user_id_type_long": "The user that voted for the queried `option`",
    "object_messageUserVoteInputOption_param_date_type_int": "When did the user cast the vote",
    "object_message": "A message",
    "object_message_param_out_type_flags.1?true": "Is this an outgoing message",
    "object_message_param_mentioned_type_flags.4?true": "Whether we were [mentioned](https:\/\/core.telegram.org\/api\/mentions) in this message",
    "object_message_param_media_unread_type_flags.5?true": "Whether there are unread media attachments in this message",
    "object_message_param_silent_type_flags.13?true": "Whether this is a silent message (no notification triggered)",
    "object_message_param_post_type_flags.14?true": "Whether this is a channel post",
    "object_message_param_from_scheduled_type_flags.18?true": "Whether this is a [scheduled message](https:\/\/core.telegram.org\/api\/scheduled-messages)",
    "object_message_param_legacy_type_flags.19?true": "This is a legacy message: it has to be refetched with the new layer",
    "object_message_param_edit_hide_type_flags.21?true": "Whether the message should be shown as not modified to the user, even if an edit date is present",
    "object_message_param_pinned_type_flags.24?true": "Whether this message is [pinned](https:\/\/core.telegram.org\/api\/pin)",
    "object_message_param_noforwards_type_flags.26?true": "Whether this message is [protected](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) and thus cannot be forwarded",
    "object_message_param_id_type_int": "ID of the message",
    "object_message_param_from_id_type_flags.8?Peer": "ID of the sender of the message",
    "object_message_param_peer_id_type_Peer": "Peer ID, the chat where this message was sent",
    "object_message_param_fwd_from_type_flags.2?MessageFwdHeader": "Info about forwarded messages",
    "object_message_param_via_bot_id_type_flags.11?long": "ID of the inline bot that generated the message",
    "object_message_param_reply_to_type_flags.3?MessageReplyHeader": "Reply information",
    "object_message_param_date_type_int": "Date of the message",
    "object_message_param_message_type_string": "The message",
    "object_message_param_media_type_flags.9?MessageMedia": "Media attachment",
    "object_message_param_reply_markup_type_flags.6?ReplyMarkup": "Reply markup (bot\/inline keyboards)",
    "object_message_param_entities_type_flags.7?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "object_message_param_views_type_flags.10?int": "View count for channel posts",
    "object_message_param_forwards_type_flags.10?int": "Forward counter",
    "object_message_param_replies_type_flags.23?MessageReplies": "Info about [post comments (for channels) or message replies (for groups)](https:\/\/core.telegram.org\/api\/threads)",
    "object_message_param_edit_date_type_flags.15?int": "Last edit date of this message",
    "object_message_param_post_author_type_flags.16?string": "Name of the author of this message for channel posts (with signatures enabled)",
    "object_message_param_grouped_id_type_flags.17?long": "Multiple media messages sent using [messages.sendMultiMedia](..\/methods\/messages.sendMultiMedia.md) with the same grouped ID indicate an [album or media group](https:\/\/core.telegram.org\/api\/files#albums-grouped-media)",
    "object_message_param_reactions_type_flags.20?MessageReactions": "Reactions to this message",
    "object_message_param_restriction_reason_type_flags.22?Vector<RestrictionReason>": "Contains the reason why access to this message must be restricted.",
    "object_message_param_ttl_period_type_flags.25?int": "Time To Live of the message, once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well.",
    "object_keyboardButtonWebView": "Button to open a [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps) using [messages.requestWebView](..\/methods\/messages.requestWebView.md), sending over user information after user confirmation.\n\nCan only be sent or received as part of an inline keyboard, use [keyboardButtonSimpleWebView](..\/constructors\/keyboardButtonSimpleWebView.md) for reply keyboards.",
    "object_keyboardButtonWebView_param_text_type_string": "Button text",
    "object_keyboardButtonWebView_param_url_type_string": "[Web app url](https:\/\/core.telegram.org\/api\/bots\/webapps)",
    "object_restrictionReason": "Restriction reason.\n\nContains the reason why access to a certain object must be restricted. Clients are supposed to deny access to the channel if the `platform` field is equal to `all` or to the current platform (`ios`, `android`, `wp`, etc.). Platforms can be concatenated (`ios-android`, `ios-wp`), unknown platforms are to be ignored. The `text` is the error message that should be shown to the user.",
    "object_restrictionReason_param_platform_type_string": "Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc)",
    "object_restrictionReason_param_reason_type_string": "Restriction reason (`porno`, `terms`, etc.)",
    "object_restrictionReason_param_text_type_string": "Error message to be shown to the user",
    "object_channelAdminLogEventsFilter": "Filter only certain admin log events",
    "object_channelAdminLogEventsFilter_param_join_type_flags.0?true": "[Join events](..\/constructors\/channelAdminLogEventActionParticipantJoin.md)",
    "object_channelAdminLogEventsFilter_param_leave_type_flags.1?true": "[Leave events](..\/constructors\/channelAdminLogEventActionParticipantLeave.md)",
    "object_channelAdminLogEventsFilter_param_invite_type_flags.2?true": "[Invite events](..\/constructors\/channelAdminLogEventActionParticipantInvite.md)",
    "object_channelAdminLogEventsFilter_param_ban_type_flags.3?true": "[Ban events](..\/constructors\/channelAdminLogEventActionParticipantToggleBan.md)",
    "object_channelAdminLogEventsFilter_param_unban_type_flags.4?true": "[Unban events](..\/constructors\/channelAdminLogEventActionParticipantToggleBan.md)",
    "object_channelAdminLogEventsFilter_param_kick_type_flags.5?true": "[Kick events](..\/constructors\/channelAdminLogEventActionParticipantToggleBan.md)",
    "object_channelAdminLogEventsFilter_param_unkick_type_flags.6?true": "[Unkick events](..\/constructors\/channelAdminLogEventActionParticipantToggleBan.md)",
    "object_channelAdminLogEventsFilter_param_promote_type_flags.7?true": "[Admin promotion events](..\/constructors\/channelAdminLogEventActionParticipantToggleAdmin.md)",
    "object_channelAdminLogEventsFilter_param_demote_type_flags.8?true": "[Admin demotion events](..\/constructors\/channelAdminLogEventActionParticipantToggleAdmin.md)",
    "object_channelAdminLogEventsFilter_param_info_type_flags.9?true": "Info change events (when [about](..\/constructors\/channelAdminLogEventActionChangeAbout.md), [linked chat](..\/constructors\/channelAdminLogEventActionChangeLinkedChat.md), [location](..\/constructors\/channelAdminLogEventActionChangeLocation.md), [photo](..\/constructors\/channelAdminLogEventActionChangePhoto.md), [stickerset](..\/constructors\/channelAdminLogEventActionChangeStickerSet.md), [title](..\/constructors\/channelAdminLogEventActionChangeTitle.md) or [username](..\/constructors\/channelAdminLogEventActionChangeUsername.md) data of a channel gets modified)",
    "object_channelAdminLogEventsFilter_param_settings_type_flags.10?true": "Settings change events ([invites](..\/constructors\/channelAdminLogEventActionToggleInvites.md), [hidden prehistory](..\/constructors\/channelAdminLogEventActionTogglePreHistoryHidden.md), [signatures](..\/constructors\/channelAdminLogEventActionToggleSignatures.md), [default banned rights](..\/constructors\/channelAdminLogEventActionDefaultBannedRights.md))",
    "object_channelAdminLogEventsFilter_param_pinned_type_flags.11?true": "[Message pin events](..\/constructors\/channelAdminLogEventActionUpdatePinned.md)",
    "object_channelAdminLogEventsFilter_param_edit_type_flags.12?true": "[Message edit events](..\/constructors\/channelAdminLogEventActionEditMessage.md)",
    "object_channelAdminLogEventsFilter_param_delete_type_flags.13?true": "[Message deletion events](..\/constructors\/channelAdminLogEventActionDeleteMessage.md)",
    "object_channelAdminLogEventsFilter_param_group_call_type_flags.14?true": "Group call events",
    "object_channelAdminLogEventsFilter_param_invites_type_flags.15?true": "Invite events",
    "object_channelAdminLogEventsFilter_param_send_type_flags.16?true": "A message was posted in a channel",
    "object_channelAdminLogEventsFilter_param_forums_type_flags.17?true": "[Forum](https:\/\/core.telegram.org\/api\/forum)-related events",
    "object_messageActionChatAddUser": "New member in the group",
    "object_messageActionChatAddUser_param_users_type_Vector<long>": "Users that were invited to the chat",
    "object_messages.historyImportParsed": "Contains information about a chat export file [generated by a foreign chat app, click here for more info](https:\/\/core.telegram.org\/api\/import).  \nIf neither the `pm` or `group` flags are set, the specified chat export was generated from a chat of unknown type.",
    "object_messages.historyImportParsed_param_pm_type_flags.0?true": "The chat export file was generated from a private chat.",
    "object_messages.historyImportParsed_param_group_type_flags.1?true": "The chat export file was generated from a group chat.",
    "object_messages.historyImportParsed_param_title_type_flags.2?string": "Title of the chat.",
    "object_updateDialogPinned": "A dialog was pinned\/unpinned",
    "object_updateDialogPinned_param_pinned_type_flags.0?true": "Whether the dialog was pinned",
    "object_updateDialogPinned_param_folder_id_type_flags.1?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_updateDialogPinned_param_peer_type_DialogPeer": "The dialog",
    "object_emojiList": "Represents a list of [custom emojis](https:\/\/core.telegram.org\/api\/custom-emoji).",
    "object_emojiList_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_emojiList_param_document_id_type_Vector<long>": "Custom emoji IDs",
    "object_storage.fileMp3": "Mp3 audio. MIME type: `audio\/mpeg`.",
    "object_account.savedRingtonesNotModified": "The notification sound list hasn't changed.",
    "object_help.termsOfServiceUpdateEmpty": "No changes were made to telegram's terms of service",
    "object_help.termsOfServiceUpdateEmpty_param_expires_type_int": "New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](..\/methods\/help.getTermsOfServiceUpdate.md) in `expires` seconds",
    "object_inputMessagesFilterMyMentions": "Return only messages where the current user was [mentioned](https:\/\/core.telegram.org\/api\/mentions).",
    "object_inputStickerSetShortName": "Stickerset by short name, from a [stickerset deep link \u00bb](https:\/\/core.telegram.org\/api\/links#stickerset-links)",
    "object_inputStickerSetShortName_param_short_name_type_string": "Short name from a [stickerset deep link \u00bb](https:\/\/core.telegram.org\/api\/links#stickerset-links)",
    "object_updateBotShippingQuery": "This object contains information about an incoming shipping query.",
    "object_updateBotShippingQuery_param_query_id_type_long": "Unique query identifier",
    "object_updateBotShippingQuery_param_user_id_type_long": "User who sent the query",
    "object_updateBotShippingQuery_param_payload_type_bytes": "Bot specified invoice payload",
    "object_updateBotShippingQuery_param_shipping_address_type_PostAddress": "User specified shipping address",
    "object_pageBlockEmbed": "An embedded webpage",
    "object_pageBlockEmbed_param_full_width_type_flags.0?true": "Whether the block should be full width",
    "object_pageBlockEmbed_param_allow_scrolling_type_flags.3?true": "Whether scrolling should be allowed",
    "object_pageBlockEmbed_param_url_type_flags.1?string": "Web page URL, if available",
    "object_pageBlockEmbed_param_html_type_flags.2?string": "HTML-markup of the embedded page",
    "object_pageBlockEmbed_param_poster_photo_id_type_flags.4?long": "Poster photo, if available",
    "object_pageBlockEmbed_param_w_type_flags.5?int": "Block width, if known",
    "object_pageBlockEmbed_param_h_type_flags.5?int": "Block height, if known",
    "object_pageBlockEmbed_param_caption_type_PageCaption": "Caption",
    "object_payments.paymentVerificationNeeded": "Payment was not successful, additional verification is needed",
    "object_payments.paymentVerificationNeeded_param_url_type_string": "URL for additional payment credentials verification",
    "object_help.deepLinkInfo": "Deep link info, see [the here for more details](https:\/\/core.telegram.org\/api\/links#unsupported-links)",
    "object_help.deepLinkInfo_param_update_app_type_flags.0?true": "An update of the app is required to parse this link",
    "object_help.deepLinkInfo_param_message_type_string": "Message to show to the user",
    "object_help.deepLinkInfo_param_entities_type_flags.1?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "object_inputMessagesFilterRoundVoice": "Return only round videos and voice notes",
    "object_pageBlockCollage": "Collage of media",
    "object_pageBlockCollage_param_items_type_Vector<PageBlock>": "Media elements",
    "object_pageBlockCollage_param_caption_type_PageCaption": "Caption",
    "object_privacyValueAllowContacts": "Allow all contacts",
    "object_readParticipantDate": "Contains info about when a certain participant has read a message",
    "object_readParticipantDate_param_user_id_type_long": "User ID",
    "object_readParticipantDate_param_date_type_int": "When the user read the message",
    "object_messages.messageReactionsList": "List of peers that reacted to a specific message",
    "object_messages.messageReactionsList_param_count_type_int": "Total number of reactions matching query",
    "object_messages.messageReactionsList_param_reactions_type_Vector<MessagePeerReaction>": "List of peers that reacted to a specific message",
    "object_messages.messageReactionsList_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_messages.messageReactionsList_param_users_type_Vector<User>": "Mentioned users",
    "object_messages.messageReactionsList_param_next_offset_type_flags.0?string": "If set, indicates the next offset to use to load more results by invoking [messages.getMessageReactionsList](..\/methods\/messages.getMessageReactionsList.md).",
    "object_draftMessage": "Represents a message [draft](https:\/\/core.telegram.org\/api\/drafts).",
    "object_draftMessage_param_no_webpage_type_flags.1?true": "Whether no webpage preview will be generated",
    "object_draftMessage_param_reply_to_msg_id_type_flags.0?int": "The message this message will reply to",
    "object_draftMessage_param_message_type_string": "The draft",
    "object_draftMessage_param_entities_type_flags.3?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text.",
    "object_draftMessage_param_date_type_int": "Date of last update of the draft.",
    "object_updateReadChannelInbox": "Incoming messages in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) were read",
    "object_updateReadChannelInbox_param_folder_id_type_flags.0?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_updateReadChannelInbox_param_channel_id_type_long": "Channel\/supergroup ID",
    "object_updateReadChannelInbox_param_max_id_type_int": "Position up to which all incoming messages are read.",
    "object_updateReadChannelInbox_param_still_unread_count_type_int": "Count of messages weren't read yet",
    "object_updateReadChannelInbox_param_pts_type_int": "[Event count after generation](https:\/\/core.telegram.org\/api\/updates)",
    "object_videoSizeEmojiMarkup": "An [animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) based on a [custom emoji sticker](https:\/\/core.telegram.org\/api\/custom-emoji).",
    "object_videoSizeEmojiMarkup_param_emoji_id_type_long": "[Custom emoji ID](https:\/\/core.telegram.org\/api\/custom-emoji): the custom emoji sticker is shown at the center of the profile picture and occupies at most 67% of it.",
    "object_videoSizeEmojiMarkup_param_background_colors_type_Vector<int>": "1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https:\/\/core.telegram.org\/api\/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0.",
    "object_secureValue": "Secure value",
    "object_secureValue_param_type_type_SecureValueType": "Secure [passport](https:\/\/core.telegram.org\/passport) value type",
    "object_secureValue_param_data_type_flags.0?SecureData": "Encrypted [Telegram Passport](https:\/\/core.telegram.org\/passport) element data",
    "object_secureValue_param_front_side_type_flags.1?SecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with the front side of the document",
    "object_secureValue_param_reverse_side_type_flags.2?SecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with the reverse side of the document",
    "object_secureValue_param_selfie_type_flags.3?SecureFile": "Encrypted [passport](https:\/\/core.telegram.org\/passport) file with a selfie of the user holding the document",
    "object_secureValue_param_translation_type_flags.6?Vector<SecureFile>": "Array of encrypted [passport](https:\/\/core.telegram.org\/passport) files with translated versions of the provided documents",
    "object_secureValue_param_files_type_flags.4?Vector<SecureFile>": "Array of encrypted [passport](https:\/\/core.telegram.org\/passport) files with photos the of the documents",
    "object_secureValue_param_plain_data_type_flags.5?SecurePlainData": "Plaintext verified [passport](https:\/\/core.telegram.org\/passport) data",
    "object_secureValue_param_hash_type_bytes": "Data hash",
    "object_messages.recentStickers": "Recently used stickers",
    "object_messages.recentStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_messages.recentStickers_param_packs_type_Vector<StickerPack>": "Emojis associated to stickers",
    "object_messages.recentStickers_param_stickers_type_Vector<Document>": "Recent stickers",
    "object_messages.recentStickers_param_dates_type_Vector<int>": "When was each sticker last used",
    "object_updates": "Full constructor of updates",
    "object_updates_param_updates_type_Vector<Update>": "List of updates",
    "object_updates_param_users_type_Vector<User>": "List of users mentioned in updates",
    "object_updates_param_chats_type_Vector<Chat>": "List of chats mentioned in updates",
    "object_updates_param_date_type_int": "Current date",
    "object_updates_param_seq_type_int": "Total number of sent updates",
    "object_inputThemeSlug": "Theme by theme ID",
    "object_inputThemeSlug_param_slug_type_string": "Unique theme ID obtained from a [theme deep link \u00bb](https:\/\/core.telegram.org\/api\/links#theme-links)",
    "object_account.themes": "Installed themes",
    "object_account.themes_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "object_account.themes_param_themes_type_Vector<Theme>": "Themes",
    "object_messageEntityTextUrl": "Message entity representing a [text url](https:\/\/google.com): for in-text urls like <https:\/\/google.com> use [messageEntityUrl](..\/constructors\/messageEntityUrl.md).\n\nNote that an additional confirmation popup with the full URL must be displayed to the user before opening this link, unless the domain satisfies the conditions specified in the [domain whitelist documentation \u00bb](https:\/\/core.telegram.org\/api\/config#whitelisted-domains).",
    "object_messageEntityTextUrl_param_offset_type_int": "Offset of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityTextUrl_param_length_type_int": "Length of message entity within message (in [UTF-16 code units](https:\/\/core.telegram.org\/api\/entities#entity-length))",
    "object_messageEntityTextUrl_param_url_type_string": "The actual URL",
    "object_updateChatPinnedMessage": "A message was pinned in a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups). This update is also typically emitted as an [updateNewChannelMessage](..\/constructors\/updateNewChannelMessage.md) with [messageService](..\/constructors\/messageService.md).",
    "object_updateChatPinnedMessage_param_chat_id_type_int": "[Basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups) ID",
    "object_updateChatPinnedMessage_param_id_type_int": "ID of pinned message",
    "object_updateChatPinnedMessage_param_version_type_int": "Used to reorder updates in [basic groups](https:\/\/core.telegram.org\/api\/channel#basic-groups)",
    "object_secureValueErrorData": "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.",
    "object_secureValueErrorData_param_type_type_SecureValueType": "The section of the user's Telegram Passport which has the error, one of [secureValueTypePersonalDetails](..\/constructors\/secureValueTypePersonalDetails.md), [secureValueTypePassport](..\/constructors\/secureValueTypePassport.md), [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](..\/constructors\/secureValueTypeInternalPassport.md), [secureValueTypeAddress](..\/constructors\/secureValueTypeAddress.md)",
    "object_secureValueErrorData_param_data_hash_type_bytes": "Data hash",
    "object_secureValueErrorData_param_field_type_string": "Name of the data field which has the error",
    "object_secureValueErrorData_param_text_type_string": "Error message",
    "object_webPageAttributeTheme": "Page theme",
    "object_webPageAttributeTheme_param_documents_type_flags.0?Vector<Document>": "Theme files",
    "object_webPageAttributeTheme_param_settings_type_flags.1?ThemeSettings": "Theme settings",
    "object_inputUserEmpty": "Empty constructor, does not define a user.",
    "object_pageBlockSubtitle": "Subtitle",
    "object_pageBlockSubtitle_param_text_type_RichText": "Text",
    "object_photoEmpty": "Empty constructor, non-existent photo",
    "object_photoEmpty_param_id_type_long": "Photo identifier",
    "object_channel": "Channel\/supergroup info",
    "object_channel_param_creator_type_flags.0?true": "Whether the current user is the creator of this channel",
    "object_channel_param_left_type_flags.2?true": "Whether the current user has left this channel",
    "object_channel_param_broadcast_type_flags.5?true": "Is this a channel?",
    "object_channel_param_verified_type_flags.7?true": "Is this channel verified by telegram?",
    "object_channel_param_megagroup_type_flags.8?true": "Is this a supergroup?",
    "object_channel_param_restricted_type_flags.9?true": "Whether viewing\/writing in this channel for a reason (see `restriction_reason`",
    "object_channel_param_signatures_type_flags.11?true": "Whether signatures are enabled (channels)",
    "object_channel_param_min_type_flags.12?true": "See [min](https:\/\/core.telegram.org\/api\/min)",
    "object_channel_param_scam_type_flags.19?true": "This channel\/supergroup is probably a scam",
    "object_channel_param_has_link_type_flags.20?true": "Whether this channel has a private join link",
    "object_channel_param_has_geo_type_flags.21?true": "Whether this chanel has a geoposition",
    "object_channel_param_slowmode_enabled_type_flags.22?true": "Whether slow mode is enabled for groups to prevent flood in chat",
    "object_channel_param_call_active_type_flags.23?true": "Whether a group call or livestream is currently active",
    "object_channel_param_call_not_empty_type_flags.24?true": "Whether there's anyone in the group call or livestream",
    "object_channel_param_fake_type_flags.25?true": "If set, this [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel) was reported by many users as a fake or scam: be careful when interacting with it.",
    "object_channel_param_gigagroup_type_flags.26?true": "Whether this [supergroup](https:\/\/core.telegram.org\/api\/channel) is a gigagroup",
    "object_channel_param_noforwards_type_flags.27?true": "Whether this channel or group is [protected](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it",
    "object_channel_param_join_to_send_type_flags.28?true": "Whether a user needs to join the supergroup before they can send messages: can be false only for [discussion groups \u00bb](https:\/\/core.telegram.org\/api\/discussion), toggle using [channels.toggleJoinToSend](..\/methods\/channels.toggleJoinToSend.md)",
    "object_channel_param_join_request_type_flags.29?true": "Whether a user's join request will have to be [approved by administrators](https:\/\/core.telegram.org\/api\/invites#join-requests), toggle using [channels.toggleJoinToSend](..\/methods\/channels.toggleJoinRequest.md)",
    "object_channel_param_forum_type_flags.30?true": "Whether this supergroup is a [forum](https:\/\/core.telegram.org\/api\/forum)",
    "object_channel_param_flags2_type_#": "Flags, see [TL conditional fields](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields)",
    "object_channel_param_id_type_long": "ID of the channel",
    "object_channel_param_access_hash_type_flags.13?long": "Access hash",
    "object_channel_param_title_type_string": "Title",
    "object_channel_param_username_type_flags.6?string": "Username",
    "object_channel_param_photo_type_ChatPhoto": "Profile photo",
    "object_channel_param_date_type_int": "Date when the user joined the supergroup\/channel, or if the user isn't a member, its creation date",
    "object_channel_param_restriction_reason_type_flags.9?Vector<RestrictionReason>": "Contains the reason why access to this channel must be restricted.",
    "object_channel_param_admin_rights_type_flags.14?ChatAdminRights": "Admin rights of the user in this channel (see [rights](https:\/\/core.telegram.org\/api\/rights))",
    "object_channel_param_banned_rights_type_flags.15?ChatBannedRights": "Banned rights of the user in this channel (see [rights](https:\/\/core.telegram.org\/api\/rights))",
    "object_channel_param_default_banned_rights_type_flags.18?ChatBannedRights": "Default chat rights (see [rights](https:\/\/core.telegram.org\/api\/rights))",
    "object_channel_param_participants_count_type_flags.17?int": "Participant count",
    "object_channel_param_usernames_type_flags2.0?Vector<Username>": "Additional usernames",
    "object_botMenuButtonCommands": "[Bot menu button](https:\/\/core.telegram.org\/api\/bots\/menu) that opens the bot command list when clicked.",
    "object_stickerSetCovered": "Stickerset with a single sticker as preview",
    "object_stickerSetCovered_param_set_type_StickerSet": "Stickerset",
    "object_stickerSetCovered_param_cover_type_Document": "Preview",
    "object_chatInviteEmpty": "No info is associated to the chat invite",
    "object_account.privacyRules": "Privacy rules",
    "object_account.privacyRules_param_rules_type_Vector<PrivacyRule>": "Privacy rules",
    "object_account.privacyRules_param_chats_type_Vector<Chat>": "Chats to which the rules apply",
    "object_account.privacyRules_param_users_type_Vector<User>": "Users to which the rules apply",
    "object_inputBotInlineResultPhoto": "Photo",
    "object_inputBotInlineResultPhoto_param_id_type_string": "Result ID",
    "object_inputBotInlineResultPhoto_param_type_type_string": "Result type (see [bot API docs](https:\/\/core.telegram.org\/bots\/api#inlinequeryresult))",
    "object_inputBotInlineResultPhoto_param_photo_type_InputPhoto": "Photo to send",
    "object_inputBotInlineResultPhoto_param_send_message_type_InputBotInlineMessage": "Message to send when the result is selected",
    "object_decryptedMessageMediaVenue": "Venue",
    "object_decryptedMessageMediaVenue_param_lat_type_double": "Latitude of venue",
    "object_decryptedMessageMediaVenue_param_long_type_double": "Longitude of venue",
    "object_decryptedMessageMediaVenue_param_title_type_string": "Venue name",
    "object_decryptedMessageMediaVenue_param_address_type_string": "Address",
    "object_decryptedMessageMediaVenue_param_provider_type_string": "Venue provider: currently only \"foursquare\" needs to be supported",
    "object_decryptedMessageMediaVenue_param_venue_id_type_string": "Venue ID in the provider's database",
    "object_channelAdminLogEventActionParticipantLeave": "A user left the channel\/supergroup (in the case of big groups, info of the user that has joined isn't shown)",
    "object_phone.groupCallStreamChannels": "Info about RTMP streams in a group call or livestream",
    "object_phone.groupCallStreamChannels_param_channels_type_Vector<GroupCallStreamChannel>": "RTMP streams",
    "object_decryptedMessageMediaExternalDocument": "Non-e2e documented forwarded from non-secret chat",
    "object_decryptedMessageMediaExternalDocument_param_id_type_long": "Document ID",
    "object_decryptedMessageMediaExternalDocument_param_access_hash_type_long": "access hash",
    "object_decryptedMessageMediaExternalDocument_param_date_type_int": "Date",
    "object_decryptedMessageMediaExternalDocument_param_mime_type_type_string": "Mime type",
    "object_decryptedMessageMediaExternalDocument_param_size_type_int": "Size",
    "object_decryptedMessageMediaExternalDocument_param_thumb_type_PhotoSize": "Thumbnail",
    "object_decryptedMessageMediaExternalDocument_param_dc_id_type_int": "DC ID",
    "object_decryptedMessageMediaExternalDocument_param_attributes_type_Vector<DocumentAttribute>": "Attributes for media types",
    "object_inputBotInlineResult": "An inline bot result",
    "object_inputBotInlineResult_param_id_type_string": "ID of result",
    "object_inputBotInlineResult_param_type_type_string": "Result type (see [bot API docs](https:\/\/core.telegram.org\/bots\/api#inlinequeryresult))",
    "object_inputBotInlineResult_param_title_type_flags.1?string": "Result title",
    "object_inputBotInlineResult_param_description_type_flags.2?string": "Result description",
    "object_inputBotInlineResult_param_url_type_flags.3?string": "URL of result",
    "object_inputBotInlineResult_param_thumb_type_flags.4?InputWebDocument": "Thumbnail for result",
    "object_inputBotInlineResult_param_content_type_flags.5?InputWebDocument": "Result contents",
    "object_inputBotInlineResult_param_send_message_type_InputBotInlineMessage": "Message to send when the result is selected",
    "object_inputStickerSetPremiumGifts": "Stickers to show when receiving a gifted Telegram Premium subscription",
    "object_decryptedMessageLayer": "Sets the layer number for the contents of an encrypted message.",
    "object_decryptedMessageLayer_param_random_bytes_type_bytes": "Set of random bytes to prevent content recognition in short encrypted messages.<br>Clients are required to check that there are at least 15 random bytes included in each message. Messages with less than 15 random bytes must be ignored.<br>Parameter moved here from [decryptedMessage](..\/constructors\/decryptedMessage.md) in Layer 17.",
    "object_decryptedMessageLayer_param_layer_type_int": "Layer number. Mimimal value - **17** (the layer in which the constructor was added).",
    "object_decryptedMessageLayer_param_in_seq_no_type_int": "2x the number of messages in the sender's inbox (including deleted and service messages), incremented by 1 if current user was not the chat creator<br>Parameter added in Layer 17.",
    "object_decryptedMessageLayer_param_out_seq_no_type_int": "2x the number of messages in the recipient's inbox (including deleted and service messages), incremented by 1 if current user was the chat creator<br>Parameter added in Layer 17.",
    "object_decryptedMessageLayer_param_message_type_DecryptedMessage": "The content of message itself",
    "object_keyboardButtonRequestPeer": "Prompts the user to select and share a peer with the bot using [messages.sendBotRequestedPeer](..\/methods\/messages.sendBotRequestedPeer.md)",
    "object_keyboardButtonRequestPeer_param_text_type_string": "Button text",
    "object_keyboardButtonRequestPeer_param_button_id_type_int": "Button ID, to be passed to [messages.sendBotRequestedPeer](..\/methods\/messages.sendBotRequestedPeer.md).",
    "object_keyboardButtonRequestPeer_param_peer_type_type_RequestPeerType": "Filtering criteria to use for the peer selection list shown to the user. <br>The list should display all existing peers of the specified type, and should also offer an option for the user to create and immediately use a peer of the specified type, if needed.",
    "object_inputPrivacyKeyPhoneP2P": "Whether to allow P2P communication during VoIP calls",
    "object_updateEncryptedMessagesRead": "Communication history in an encrypted chat was marked as read.",
    "object_updateEncryptedMessagesRead_param_chat_id_type_int": "Chat ID",
    "object_updateEncryptedMessagesRead_param_max_date_type_int": "Maximum value of data for read messages",
    "object_updateEncryptedMessagesRead_param_date_type_int": "Time when messages were read",
    "object_inputPrivacyValueAllowAll": "Allow all users",
    "object_inputInvoiceSlug": "An invoice slug taken from an [invoice deep link](https:\/\/core.telegram.org\/api\/links#invoice-links) or from the [`premium_invoice_slug` app config parameter \u00bb](https:\/\/core.telegram.org\/api\/config#premium-invoice-slug)",
    "object_inputInvoiceSlug_param_slug_type_string": "The invoice slug",
    "object_decryptedMessageActionScreenshotMessages": "A screenshot was taken.",
    "object_decryptedMessageActionScreenshotMessages_param_random_ids_type_Vector<long>": "List of affected message ids (that appeared on the screenshot)",
    "object_userStatusLastWeek": "Online status: last seen last week",
    "object_upload.fileCdnRedirect": "The file must be downloaded from a [CDN DC](https:\/\/core.telegram.org\/cdn).",
    "object_upload.fileCdnRedirect_param_dc_id_type_int": "[CDN DC](https:\/\/core.telegram.org\/cdn) ID",
    "object_upload.fileCdnRedirect_param_file_token_type_bytes": "File token (see [CDN files](https:\/\/core.telegram.org\/cdn))",
    "object_upload.fileCdnRedirect_param_encryption_key_type_bytes": "Encryption key (see [CDN files](https:\/\/core.telegram.org\/cdn))",
    "object_upload.fileCdnRedirect_param_encryption_iv_type_bytes": "Encryption IV (see [CDN files](https:\/\/core.telegram.org\/cdn))",
    "object_upload.fileCdnRedirect_param_file_hashes_type_Vector<FileHash>": "File hashes (see [CDN files](https:\/\/core.telegram.org\/cdn))",
    "object_channels.channelParticipant": "Represents a channel participant",
    "object_channels.channelParticipant_param_participant_type_ChannelParticipant": "The channel participant",
    "object_channels.channelParticipant_param_chats_type_Vector<Chat>": "Mentioned chats",
    "object_channels.channelParticipant_param_users_type_Vector<User>": "Users",
    "object_channelAdminLogEventActionChangeUsernames": "The list of usernames associated with the channel was changed",
    "object_channelAdminLogEventActionChangeUsernames_param_prev_value_type_Vector<string>": "Previous set of usernames",
    "object_channelAdminLogEventActionChangeUsernames_param_new_value_type_Vector<string>": "New set of usernames",
    "object_chatParticipantsForbidden": "Info on members is unavailable",
    "object_chatParticipantsForbidden_param_chat_id_type_long": "Group ID",
    "object_chatParticipantsForbidden_param_self_participant_type_flags.0?ChatParticipant": "Info about the group membership of the current user",
    "object_contacts.contactsNotModified": "Contact list on the server is the same as the list on the client.",
    "object_auth.sentCode": "Contains info about a sent verification code.",
    "object_auth.sentCode_param_type_type_auth.SentCodeType": "Phone code type",
    "object_auth.sentCode_param_phone_code_hash_type_string": "Phone code hash, to be stored and later re-used with [auth.signIn](..\/methods\/auth.signIn.md)",
    "object_auth.sentCode_param_next_type_type_flags.1?auth.CodeType": "Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](..\/methods\/auth.resendCode.md)",
    "object_auth.sentCode_param_timeout_type_flags.2?int": "Timeout for reception of the phone code",
    "object_dialogPeerFolder": "[Peer folder](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_dialogPeerFolder_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "object_urlAuthResultAccepted": "Details about an accepted authorization request, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/url-authorization)",
    "object_urlAuthResultAccepted_param_url_type_string": "The URL name of the website on which the user has logged in.",
    "object_statsAbsValueAndPrev": "Statistics value couple; initial and final value for period of time currently in consideration",
    "object_statsAbsValueAndPrev_param_current_type_double": "Current value",
    "object_statsAbsValueAndPrev_param_previous_type_double": "Previous value",
    "object_updateShort": "Shortened constructor containing info on one update not requiring auxiliary data",
    "object_updateShort_param_update_type_Update": "Update",
    "object_updateShort_param_date_type_int": "Date of event",
    "object_messages.searchResultsPositions": "Information about sparse positions of messages",
    "object_messages.searchResultsPositions_param_count_type_int": "Total number of found messages",
    "object_messages.searchResultsPositions_param_positions_type_Vector<SearchResultsPosition>": "List of message positions",
    "object_messageActionChatMigrateTo": "Indicates the chat was [migrated](https:\/\/core.telegram.org\/api\/channel) to the specified supergroup",
    "object_messageActionChatMigrateTo_param_channel_id_type_long": "The supergroup it was migrated to",
    "object_botInlineMediaResult": "Media result",
    "object_botInlineMediaResult_param_id_type_string": "Result ID",
    "object_botInlineMediaResult_param_type_type_string": "Result type (see [bot API docs](https:\/\/core.telegram.org\/bots\/api#inlinequeryresult))",
    "object_botInlineMediaResult_param_photo_type_flags.0?Photo": "If type is `photo`, the photo to send",
    "object_botInlineMediaResult_param_document_type_flags.1?Document": "If type is `document`, the document to send",
    "object_botInlineMediaResult_param_title_type_flags.2?string": "Result title",
    "object_botInlineMediaResult_param_description_type_flags.3?string": "Description",
    "object_botInlineMediaResult_param_send_message_type_BotInlineMessage": "Depending on the `type` and on the [constructor](..\/types\/BotInlineMessage.md), contains the caption of the media or the content of the message to be sent **instead** of the media",
    "object_updateGeoLiveViewed": "Live geoposition message was viewed",
    "object_updateGeoLiveViewed_param_peer_type_Peer": "The user that viewed the live geoposition",
    "object_updateGeoLiveViewed_param_msg_id_type_int": "Message ID of geoposition message",
    "object_auth.loginTokenSuccess": "Login via token (QR code) succeeded!",
    "object_auth.loginTokenSuccess_param_authorization_type_auth.Authorization": "Authorization info",
    "object_secureValueErrorFrontSide": "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.",
    "object_secureValueErrorFrontSide_param_type_type_SecureValueType": "One of [secureValueTypePassport](..\/constructors\/secureValueTypePassport.md), [secureValueTypeDriverLicense](..\/constructors\/secureValueTypeDriverLicense.md), [secureValueTypeIdentityCard](..\/constructors\/secureValueTypeIdentityCard.md), [secureValueTypeInternalPassport](..\/constructors\/secureValueTypeInternalPassport.md)",
    "object_secureValueErrorFrontSide_param_file_hash_type_bytes": "File hash",
    "object_secureValueErrorFrontSide_param_text_type_string": "Error message",
    "object_inputMediaUploadedPhoto": "Photo",
    "object_inputMediaUploadedPhoto_param_spoiler_type_flags.2?true": "Whether this media should be hidden behind a spoiler warning",
    "object_inputMediaUploadedPhoto_param_file_type_InputFile": "The [uploaded file](https:\/\/core.telegram.org\/api\/files)",
    "object_inputMediaUploadedPhoto_param_stickers_type_flags.0?Vector<InputDocument>": "Attached mask stickers",
    "object_inputMediaUploadedPhoto_param_ttl_seconds_type_flags.1?int": "Time to live in seconds of self-destructing photo",
    "object_secureFile": "Secure [passport](https:\/\/core.telegram.org\/passport) file, for more info [see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#inputsecurefile)",
    "object_secureFile_param_id_type_long": "ID",
    "object_secureFile_param_access_hash_type_long": "Access hash",
    "object_secureFile_param_size_type_long": "File size",
    "object_secureFile_param_dc_id_type_int": "DC ID",
    "object_secureFile_param_date_type_int": "Date of upload",
    "object_secureFile_param_file_hash_type_bytes": "File hash",
    "object_secureFile_param_secret_type_bytes": "Secret",
    "object_secureValueTypeRentalAgreement": "Rental agreement",
    "object_photo": "Photo",
    "object_photo_param_has_stickers_type_flags.0?true": "Whether the photo has mask stickers attached to it",
    "object_photo_param_id_type_long": "ID",
    "object_photo_param_access_hash_type_long": "Access hash",
    "object_photo_param_file_reference_type_bytes": "[file reference](https:\/\/core.telegram.org\/api\/file_reference)",
    "object_photo_param_date_type_int": "Date of upload",
    "object_photo_param_sizes_type_Vector<PhotoSize>": "Available sizes for download",
    "object_photo_param_video_sizes_type_flags.1?Vector<VideoSize>": "[For animated profiles](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures), the MPEG4 videos",
    "object_photo_param_dc_id_type_int": "DC ID to use for download",
    "object_notifyUsers": "Notifications generated by all users.",
    "object_channelParticipantCreator": "Channel\/supergroup creator",
    "object_channelParticipantCreator_param_user_id_type_long": "User ID",
    "object_channelParticipantCreator_param_admin_rights_type_ChatAdminRights": "Creator admin rights",
    "object_channelParticipantCreator_param_rank_type_flags.0?string": "The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default",
    "object_inputMediaInvoice": "Generated invoice of a [bot payment](https:\/\/core.telegram.org\/bots\/payments)",
    "object_inputMediaInvoice_param_title_type_string": "Product name, 1-32 characters",
    "object_inputMediaInvoice_param_description_type_string": "Product description, 1-255 characters",
    "object_inputMediaInvoice_param_photo_type_flags.0?InputWebDocument": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
    "object_inputMediaInvoice_param_invoice_type_Invoice": "The actual invoice",
    "object_inputMediaInvoice_param_payload_type_bytes": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.",
    "object_inputMediaInvoice_param_provider_type_string": "Payments provider token, obtained via [Botfather](https:\/\/t.me\/botfather)",
    "object_inputMediaInvoice_param_provider_data_type_DataJSON": "JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.",
    "object_inputMediaInvoice_param_start_param_type_flags.1?string": "Unique [bot deep links start parameter](https:\/\/core.telegram.org\/api\/links#bot-links). If present, forwarded copies of the sent message will have a URL button with a [deep link](https:\/\/core.telegram.org\/api\/links#bot-links) to the bot (instead of a Pay button), with the value used as the start parameter. If absent, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice.",
    "object_inputMediaInvoice_param_extended_media_type_flags.2?InputMedia": "Extended media",
    "object_premiumGiftOption": "Telegram Premium gift option",
    "object_premiumGiftOption_param_months_type_int": "Duration of gifted Telegram Premium subscription",
    "object_premiumGiftOption_param_currency_type_string": "Three-letter ISO 4217 [currency](https:\/\/core.telegram.org\/bots\/payments#supported-currencies) code",
    "object_premiumGiftOption_param_amount_type_long": "Price of the product in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "object_premiumGiftOption_param_bot_url_type_string": "An [invoice deep link \u00bb](https:\/\/core.telegram.org\/api\/links#invoice-links) to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available.",
    "object_premiumGiftOption_param_store_product_type_flags.0?string": "An identifier for the App Store\/Play Store product associated with the Premium gift.",
    "object_channelAdminLogEventActionSendMessage": "A message was posted in a channel",
    "object_channelAdminLogEventActionSendMessage_param_message_type_Message": "The message that was sent",
    "object_inputStickerSetID": "Stickerset by ID",
    "object_inputStickerSetID_param_id_type_long": "ID",
    "object_inputStickerSetID_param_access_hash_type_long": "Access hash",
    "object_inputWallPaperNoFile": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) with no file access hash, used for example when deleting (`unsave=true`) wallpapers using [account.saveWallPaper](..\/methods\/account.saveWallPaper.md), specifying just the wallpaper ID.",
    "object_inputWallPaperNoFile_param_id_type_long": "Wallpaper ID",
    "object_inputPhoneCall": "Phone call",
    "object_inputPhoneCall_param_id_type_long": "Call ID",
    "object_inputPhoneCall_param_access_hash_type_long": "Access hash",
    "object_messageActionChannelCreate": "The channel was created",
    "object_messageActionChannelCreate_param_title_type_string": "Original channel\/supergroup title",
    "object_emailVerificationCode": "Email verification code",
    "object_emailVerificationCode_param_code_type_string": "Received verification code",
    "object_peerChat": "Group.",
    "object_peerChat_param_chat_id_type_long": "Group identifier",
    "object_photoPathSize": "Messages with animated stickers can have a compressed svg (&lt; 300 bytes) to show the outline of the sticker before fetching the actual lottie animation.",
    "object_photoPathSize_param_type_type_string": "Always `j`",
    "object_photoPathSize_param_bytes_type_bytes": "Compressed SVG path payload, [see here for decompression instructions](https:\/\/core.telegram.org\/api\/files#vector-thumbnails)",
    "object_updateDcOptions": "Changes in the data center configuration options.",
    "object_updateDcOptions_param_dc_options_type_Vector<DcOption>": "New connection options",
    "object_groupCallParticipantVideo": "Info about a video stream",
    "object_groupCallParticipantVideo_param_paused_type_flags.0?true": "Whether the stream is currently paused",
    "object_groupCallParticipantVideo_param_endpoint_type_string": "Endpoint",
    "object_groupCallParticipantVideo_param_source_groups_type_Vector<GroupCallParticipantVideoSourceGroup>": "Source groups",
    "object_groupCallParticipantVideo_param_audio_source_type_flags.1?int": "Audio source ID",
    "object_inputStickerSetAnimatedEmoji": "Animated emojis stickerset",
    "object_updatePendingJoinRequests": "Someone has requested to join a chat or channel",
    "object_updatePendingJoinRequests_param_peer_type_Peer": "Chat or channel",
    "object_updatePendingJoinRequests_param_requests_pending_type_int": "Number of pending [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) for the chat or channel",
    "object_updatePendingJoinRequests_param_recent_requesters_type_Vector<long>": "IDs of users that have recently requested to join",
    "object_channelAdminLogEventActionToggleNoForwards": "Forwards were enabled or disabled",
    "object_channelAdminLogEventActionToggleNoForwards_param_new_value_type_Bool": "Old value",
    "object_inputChannel": "Represents a channel",
    "object_inputChannel_param_channel_id_type_long": "Channel ID",
    "object_inputChannel_param_access_hash_type_long": "Access hash taken from the [channel](..\/constructors\/channel.md) constructor",
    "object_sendMessageCancelAction": "Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload.",
    "object_auth.exportedAuthorization": "Data for copying of authorization between data centers.",
    "object_auth.exportedAuthorization_param_id_type_long": "current user identifier",
    "object_auth.exportedAuthorization_param_bytes_type_bytes": "authorizes key",
    "object_statsDateRangeDays": "[Channel statistics](https:\/\/core.telegram.org\/api\/stats) date range",
    "object_statsDateRangeDays_param_min_date_type_int": "Initial date",
    "object_statsDateRangeDays_param_max_date_type_int": "Final date",
    "object_channelAdminLogEventActionChangePhoto": "The channel\/supergroup's picture was changed",
    "object_channelAdminLogEventActionChangePhoto_param_prev_photo_type_Photo": "Previous picture",
    "object_channelAdminLogEventActionChangePhoto_param_new_photo_type_Photo": "New picture",
    "object_updateBotStopped": "A bot was stopped or re-started.",
    "object_updateBotStopped_param_user_id_type_long": "The user ID",
    "object_updateBotStopped_param_date_type_int": "When did this action occur",
    "object_updateBotStopped_param_stopped_type_Bool": "Whether the bot was stopped or started",
    "object_updateBotStopped_param_qts_type_int": "New **qts** value, see [updates \u00bb](https:\/\/core.telegram.org\/api\/updates) for more info.",
    "object_username": "Contains information about a username.",
    "object_username_param_editable_type_flags.0?true": "Whether the username is editable, meaning it wasn't bought on [fragment](https:\/\/fragment.com).",
    "object_username_param_active_type_flags.1?true": "Whether the username is active.",
    "object_username_param_username_type_string": "The username.",
    "method_phone.joinGroupCallPresentation": "Start screen sharing in a call",
    "method_phone.joinGroupCallPresentation_param_call_type_InputGroupCall": "The group call",
    "method_phone.joinGroupCallPresentation_param_params_type_DataJSON": "WebRTC parameters",
    "method_updates.getState": "Returns a current state of updates.",
    "method_messages.reorderStickerSets": "Reorder installed stickersets",
    "method_messages.reorderStickerSets_param_masks_type_flags.0?true": "Reorder mask stickersets",
    "method_messages.reorderStickerSets_param_emojis_type_flags.1?true": "Reorder [custom emoji stickersets](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "method_messages.reorderStickerSets_param_order_type_Vector<long>": "New stickerset order by stickerset IDs",
    "method_phone.startScheduledGroupCall": "Start a scheduled group call.",
    "method_phone.startScheduledGroupCall_param_call_type_InputGroupCall": "The scheduled group call",
    "method_account.initTakeoutSession": "Initialize account takeout session",
    "method_account.initTakeoutSession_param_contacts_type_flags.0?true": "Whether to export contacts",
    "method_account.initTakeoutSession_param_message_users_type_flags.1?true": "Whether to export messages in private chats",
    "method_account.initTakeoutSession_param_message_chats_type_flags.2?true": "Whether to export messages in [basic groups](https:\/\/core.telegram.org\/api\/channel#basic-groups)",
    "method_account.initTakeoutSession_param_message_megagroups_type_flags.3?true": "Whether to export messages in [supergroups](https:\/\/core.telegram.org\/api\/channel#supergroups)",
    "method_account.initTakeoutSession_param_message_channels_type_flags.4?true": "Whether to export messages in [channels](https:\/\/core.telegram.org\/api\/channel#channels)",
    "method_account.initTakeoutSession_param_files_type_flags.5?true": "Whether to export files",
    "method_account.initTakeoutSession_param_file_max_size_type_flags.5?long": "Maximum size of files to export",
    "method_messages.getBotCallbackAnswer": "Press an inline callback button and get a callback answer from the bot",
    "method_messages.getBotCallbackAnswer_param_game_type_flags.1?true": "Whether this is a \"play game\" button",
    "method_messages.getBotCallbackAnswer_param_peer_type_InputPeer": "Where was the inline keyboard sent",
    "method_messages.getBotCallbackAnswer_param_msg_id_type_int": "ID of the Message with the inline keyboard",
    "method_messages.getBotCallbackAnswer_param_data_type_flags.0?bytes": "Callback data",
    "method_messages.getBotCallbackAnswer_param_password_type_flags.2?InputCheckPasswordSRP": "For buttons [requiring you to verify your identity with your 2FA password](..\/constructors\/keyboardButtonCallback.md), the SRP payload generated using [SRP](https:\/\/core.telegram.org\/api\/srp).",
    "method_bots.resetBotCommands": "Clear bot commands for the specified bot scope and language code",
    "method_bots.resetBotCommands_param_scope_type_BotCommandScope": "Command scope",
    "method_bots.resetBotCommands_param_lang_code_type_string": "Language code",
    "method_account.getMultiWallPapers": "Get info about multiple [wallpapers](https:\/\/core.telegram.org\/api\/wallpapers)",
    "method_account.getMultiWallPapers_param_wallpapers_type_Vector<InputWallPaper>": "[Wallpapers](https:\/\/core.telegram.org\/api\/wallpapers) to fetch info about",
    "method_photos.deletePhotos": "Deletes profile photos. The method returns a list of successfully deleted photo IDs.",
    "method_photos.deletePhotos_param_id_type_Vector<InputPhoto>": "Input photos to delete",
    "method_account.getNotifySettings": "Gets current notification settings for a given user\/group, from all users\/all groups.",
    "method_account.getNotifySettings_param_peer_type_InputNotifyPeer": "Notification source",
    "method_messages.searchGlobal": "Search for messages and peers globally",
    "method_messages.searchGlobal_param_folder_id_type_flags.0?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_messages.searchGlobal_param_q_type_string": "Query",
    "method_messages.searchGlobal_param_filter_type_MessagesFilter": "Global search filter",
    "method_messages.searchGlobal_param_min_date_type_int": "If a positive value was specified, the method will return only messages with date bigger than min\\_date",
    "method_messages.searchGlobal_param_max_date_type_int": "If a positive value was transferred, the method will return only messages with date smaller than max\\_date",
    "method_messages.searchGlobal_param_offset_rate_type_int": "Initially 0, then set to the [`next_rate` parameter of messages.messagesSlice](..\/constructors\/messages.messagesSlice.md)",
    "method_messages.searchGlobal_param_offset_peer_type_InputPeer": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.searchGlobal_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.searchGlobal_param_limit_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getMessagesViews": "Get and increase the view counter of a message sent or forwarded from a [channel](https:\/\/core.telegram.org\/api\/channel)",
    "method_messages.getMessagesViews_param_peer_type_InputPeer": "Peer where the message was found",
    "method_messages.getMessagesViews_param_id_type_Vector<int>": "ID of message",
    "method_messages.getMessagesViews_param_increment_type_Bool": "Whether to mark the message as viewed and increment the view counter",
    "method_messages.acceptUrlAuth": "Use this to accept a Seamless Telegram Login authorization request, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/url-authorization)",
    "method_messages.acceptUrlAuth_param_write_allowed_type_flags.0?true": "Set this flag to allow the bot to send messages to you (if requested)",
    "method_messages.acceptUrlAuth_param_peer_type_flags.1?InputPeer": "The location of the message",
    "method_messages.acceptUrlAuth_param_msg_id_type_flags.1?int": "Message ID of the message with the login button",
    "method_messages.acceptUrlAuth_param_button_id_type_flags.1?int": "ID of the login button",
    "method_messages.acceptUrlAuth_param_url_type_flags.2?string": "URL used for [link URL authorization, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/url-authorization#link-url-authorization)",
    "method_account.saveRingtone": "Save or remove saved notification sound.\n\nIf the notification sound is already in MP3 format, [account.savedRingtone](..\/constructors\/account.savedRingtone.md) will be returned.  \nOtherwise, it will be automatically converted and a [account.savedRingtoneConverted](..\/constructors\/account.savedRingtoneConverted.md) will be returned, containing a new [document](..\/constructors\/document.md) object that should be used to refer to the ringtone from now on (ie when deleting it using the `unsave` parameter, or when downloading it).",
    "method_account.saveRingtone_param_id_type_InputDocument": "Notification sound uploaded using [account.uploadRingtone](..\/methods\/account.uploadRingtone.md)",
    "method_account.saveRingtone_param_unsave_type_Bool": "Whether to add or delete the notification sound",
    "method_messages.setGameScore": "Use this method to set the score of the specified user in a game sent as a normal message (bots only).",
    "method_messages.setGameScore_param_edit_message_type_flags.0?true": "Set this flag if the game message should be automatically edited to include the current scoreboard",
    "method_messages.setGameScore_param_force_type_flags.1?true": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
    "method_messages.setGameScore_param_peer_type_InputPeer": "Unique identifier of target chat",
    "method_messages.setGameScore_param_id_type_int": "Identifier of the sent message",
    "method_messages.setGameScore_param_user_id_type_InputUser": "User identifier",
    "method_messages.setGameScore_param_score_type_int": "New score",
    "method_messages.getAttachMenuBot": "Returns attachment menu entry for a [bot web app that can be launched from the attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "method_messages.getAttachMenuBot_param_bot_type_InputUser": "Bot ID",
    "method_messages.reportReaction": "Report a [message reaction](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.reportReaction_param_peer_type_InputPeer": "Peer where the message was sent",
    "method_messages.reportReaction_param_id_type_int": "Message ID",
    "method_messages.reportReaction_param_reaction_peer_type_InputPeer": "Peer that sent the reaction",
    "method_langpack.getLanguage": "Get information about a language in a localization pack",
    "method_langpack.getLanguage_param_lang_pack_type_string": "Language pack name, usually obtained from a [language pack link](https:\/\/core.telegram.org\/api\/links#language-pack-links)",
    "method_langpack.getLanguage_param_lang_code_type_string": "Language code",
    "method_messages.sendEncryptedService": "Sends a service message to a secret chat.",
    "method_messages.sendEncryptedService_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.sendEncryptedService_param_random_id_type_long": "Unique client message ID required to prevent message resending",
    "method_messages.sendEncryptedService_param_data_type_bytes": "TL-serialization of  [DecryptedMessage](..\/types\/DecryptedMessage.md) type, encrypted with a key generated during chat initialization",
    "method_bots.getBotMenuButton": "Gets the menu button action for a given user or for all users, previously set using [bots.setBotMenuButton](..\/methods\/bots.setBotMenuButton.md); users can see this information in the [botInfo](..\/constructors\/botInfo.md) constructor.",
    "method_bots.getBotMenuButton_param_user_id_type_InputUser": "User ID or empty for the default menu button.",
    "method_langpack.getLangPack": "Get localization pack strings",
    "method_langpack.getLangPack_param_lang_pack_type_string": "Language pack name, usually obtained from a [language pack link](https:\/\/core.telegram.org\/api\/links#language-pack-links)",
    "method_langpack.getLangPack_param_lang_code_type_string": "Language code",
    "method_channels.reportSpam": "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup",
    "method_channels.reportSpam_param_channel_type_InputChannel": "Supergroup",
    "method_channels.reportSpam_param_participant_type_InputPeer": "Participant whose messages should be reported",
    "method_channels.reportSpam_param_id_type_Vector<int>": "IDs of spam messages",
    "method_stats.getMessagePublicForwards": "Obtains a list of messages, indicating to which other public channels was a channel message forwarded.  \nWill return a list of [messages](..\/constructors\/message.md) with `peer_id` equal to the public channel to which this message was forwarded.",
    "method_stats.getMessagePublicForwards_param_channel_type_InputChannel": "Source channel",
    "method_stats.getMessagePublicForwards_param_msg_id_type_int": "Source message ID",
    "method_stats.getMessagePublicForwards_param_offset_rate_type_int": "Initially 0, then set to the `next_rate` parameter of [messages.messagesSlice](..\/constructors\/messages.messagesSlice.md)",
    "method_stats.getMessagePublicForwards_param_offset_peer_type_InputPeer": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_stats.getMessagePublicForwards_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_stats.getMessagePublicForwards_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.deleteParticipantHistory": "Delete all messages sent by a specific participant of a given supergroup",
    "method_channels.deleteParticipantHistory_param_channel_type_InputChannel": "Supergroup",
    "method_channels.deleteParticipantHistory_param_participant_type_InputPeer": "The participant whose messages should be deleted",
    "method_chatlists.joinChatlistUpdates": "Join channels and supergroups recently added to a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.joinChatlistUpdates_param_chatlist_type_InputChatlist": "The folder",
    "method_chatlists.joinChatlistUpdates_param_peers_type_Vector<InputPeer>": "List of new chats to join, fetched using [chatlists.getChatlistUpdates](..\/methods\/chatlists.getChatlistUpdates.md) and filtered as specified in the [documentation \u00bb](https:\/\/core.telegram.org\/api\/folders#shared-folders).",
    "method_messages.setChatTheme": "Change the chat theme of a certain chat",
    "method_messages.setChatTheme_param_peer_type_InputPeer": "Private chat where to change theme",
    "method_messages.setChatTheme_param_emoticon_type_string": "Emoji, identifying a specific chat theme; a list of chat themes can be fetched using [account.getChatThemes](..\/methods\/account.getChatThemes.md)",
    "method_account.setGlobalPrivacySettings": "Set global privacy settings",
    "method_account.setGlobalPrivacySettings_param_settings_type_GlobalPrivacySettings": "Global privacy settings",
    "method_messages.editChatTitle": "Changes chat name and sends a service message on it.",
    "method_messages.editChatTitle_param_chat_id_type_long": "Chat ID",
    "method_messages.editChatTitle_param_title_type_string": "New chat name, different from the old one",
    "method_messages.getRecentReactions": "Get recently used [message reactions](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.getRecentReactions_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getRecentReactions_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getReplies": "Get messages in a reply thread",
    "method_messages.getReplies_param_peer_type_InputPeer": "Peer",
    "method_messages.getReplies_param_msg_id_type_int": "Message ID",
    "method_messages.getReplies_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getReplies_param_offset_date_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getReplies_param_add_offset_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getReplies_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getReplies_param_max_id_type_int": "If a positive value was transferred, the method will return only messages with ID smaller than max\\_id",
    "method_messages.getReplies_param_min_id_type_int": "If a positive value was transferred, the method will return only messages with ID bigger than min\\_id",
    "method_messages.getReplies_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_channels.reorderUsernames": "Reorder active usernames",
    "method_channels.reorderUsernames_param_channel_type_InputChannel": "The supergroup or channel",
    "method_channels.reorderUsernames_param_order_type_Vector<string>": "The new order for active usernames. All active usernames must be specified.",
    "method_chatlists.joinChatlistInvite": "Import a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links), joining some or all the chats in the folder.",
    "method_chatlists.joinChatlistInvite_param_slug_type_string": "`slug` obtained from a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.joinChatlistInvite_param_peers_type_Vector<InputPeer>": "List of new chats to join, fetched using [chatlists.checkChatlistInvite](..\/methods\/chatlists.checkChatlistInvite.md) and filtered as specified in the [documentation \u00bb](https:\/\/core.telegram.org\/api\/folders#shared-folders).",
    "method_messages.toggleStickerSets": "Apply changes to multiple stickersets",
    "method_messages.toggleStickerSets_param_uninstall_type_flags.0?true": "Uninstall the specified stickersets",
    "method_messages.toggleStickerSets_param_archive_type_flags.1?true": "Archive the specified stickersets",
    "method_messages.toggleStickerSets_param_unarchive_type_flags.2?true": "Unarchive the specified stickersets",
    "method_messages.toggleStickerSets_param_stickersets_type_Vector<InputStickerSet>": "Stickersets to act upon",
    "method_messages.deleteMessages": "Deletes messages by their identifiers.",
    "method_messages.deleteMessages_param_revoke_type_flags.0?true": "Whether to delete messages for all participants of the chat",
    "method_messages.deleteMessages_param_id_type_Vector<int>": "Message ID list",
    "method_messages.getAdminsWithInvites": "Get info about chat invites generated by admins.",
    "method_messages.getAdminsWithInvites_param_peer_type_InputPeer": "Chat",
    "method_messages.saveDraft": "Save a message [draft](https:\/\/core.telegram.org\/api\/drafts) associated to a chat.",
    "method_messages.saveDraft_param_no_webpage_type_flags.1?true": "Disable generation of the webpage preview",
    "method_messages.saveDraft_param_reply_to_msg_id_type_flags.0?int": "Message ID the message should reply to",
    "method_messages.saveDraft_param_top_msg_id_type_flags.2?int": "[Forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) where the message will be sent",
    "method_messages.saveDraft_param_peer_type_InputPeer": "Destination of the message that should be sent",
    "method_messages.saveDraft_param_message_type_string": "The draft",
    "method_messages.saveDraft_param_entities_type_flags.3?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "method_account.uploadTheme": "Upload theme",
    "method_account.uploadTheme_param_file_type_InputFile": "[Previously uploaded](https:\/\/core.telegram.org\/api\/themes#uploading-theme-files) theme file with platform-specific colors for UI components, can be left unset when creating themes that only modify the wallpaper or accent colors.",
    "method_account.uploadTheme_param_thumb_type_flags.0?InputFile": "Thumbnail",
    "method_account.uploadTheme_param_file_name_type_string": "File name",
    "method_account.uploadTheme_param_mime_type_type_string": "MIME type, must be `application\/x-tgtheme-{format}`, where `format` depends on the client",
    "method_channels.getLeftChannels": "Get a list of [channels\/supergroups](https:\/\/core.telegram.org\/api\/channel) we left",
    "method_channels.getLeftChannels_param_offset_type_int": "Offset for [pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_contacts.blockFromReplies": "Stop getting notifications about [thread replies](https:\/\/core.telegram.org\/api\/threads) of a certain user in `@replies`",
    "method_contacts.blockFromReplies_param_delete_message_type_flags.0?true": "Whether to delete the specified message as well",
    "method_contacts.blockFromReplies_param_delete_history_type_flags.1?true": "Whether to delete all `@replies` messages from this user as well",
    "method_contacts.blockFromReplies_param_report_spam_type_flags.2?true": "Whether to also report this user for spam",
    "method_contacts.blockFromReplies_param_msg_id_type_int": "ID of the message in the [@replies](https:\/\/core.telegram.org\/api\/threads#replies) chat",
    "method_messages.deleteHistory": "Deletes communication history.",
    "method_messages.deleteHistory_param_just_clear_type_flags.0?true": "Just clear history for the current user, without actually removing messages for every chat user",
    "method_messages.deleteHistory_param_revoke_type_flags.1?true": "Whether to delete the message history for all chat participants",
    "method_messages.deleteHistory_param_peer_type_InputPeer": "User or chat, communication history of which will be deleted",
    "method_messages.deleteHistory_param_max_id_type_int": "Maximum ID of message to delete",
    "method_messages.deleteHistory_param_min_date_type_flags.2?int": "Delete all messages newer than this UNIX timestamp",
    "method_messages.deleteHistory_param_max_date_type_flags.3?int": "Delete all messages older than this UNIX timestamp",
    "method_account.getWallPapers": "Returns a list of available [wallpapers](https:\/\/core.telegram.org\/api\/wallpapers).",
    "method_account.getWallPapers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getAttachedStickers": "Get stickers attached to a photo or video",
    "method_messages.getAttachedStickers_param_media_type_InputStickeredMedia": "Stickered media",
    "method_phone.confirmCall": "[Complete phone call E2E encryption key exchange \u00bb](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "method_phone.confirmCall_param_peer_type_InputPhoneCall": "The phone call",
    "method_phone.confirmCall_param_g_a_type_bytes": "[Parameter for E2E encryption key exchange \u00bb](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "method_phone.confirmCall_param_key_fingerprint_type_long": "Key fingerprint",
    "method_phone.confirmCall_param_protocol_type_PhoneCallProtocol": "Phone call settings",
    "method_channels.getAdminLog": "Get the admin log of a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.getAdminLog_param_channel_type_InputChannel": "Channel",
    "method_channels.getAdminLog_param_q_type_string": "Search query, can be empty",
    "method_channels.getAdminLog_param_events_filter_type_flags.0?ChannelAdminLogEventsFilter": "Event filter",
    "method_channels.getAdminLog_param_admins_type_flags.1?Vector<InputUser>": "Only show events from these admins",
    "method_channels.getAdminLog_param_max_id_type_long": "Maximum ID of message to return (see [pagination](https:\/\/core.telegram.org\/api\/offsets))",
    "method_channels.getAdminLog_param_min_id_type_long": "Minimum ID of message to return (see [pagination](https:\/\/core.telegram.org\/api\/offsets))",
    "method_channels.getAdminLog_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.readMentions": "Mark mentions as read",
    "method_messages.readMentions_param_peer_type_InputPeer": "Dialog",
    "method_messages.readMentions_param_top_msg_id_type_flags.0?int": "Mark as read only mentions within the specified [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_stickers.suggestShortName": "Suggests a short name for a given stickerpack name",
    "method_stickers.suggestShortName_param_title_type_string": "Sticker pack name",
    "method_account.setContactSignUpNotification": "Toggle contact sign up notifications",
    "method_account.setContactSignUpNotification_param_silent_type_Bool": "Whether to disable contact sign up notifications",
    "method_help.getPromoData": "Get MTProxy\/Public Service Announcement information",
    "method_messages.readHistory": "Marks message history as read.",
    "method_messages.readHistory_param_peer_type_InputPeer": "Target user or group",
    "method_messages.readHistory_param_max_id_type_int": "If a positive value is passed, only messages with identifiers less or equal than the given one will be read",
    "method_account.getAuthorizationForm": "Returns a Telegram Passport authorization form for sharing data with a service",
    "method_account.getAuthorizationForm_param_bot_id_type_long": "User identifier of the service's bot",
    "method_account.getAuthorizationForm_param_scope_type_string": "Telegram Passport element types requested by the service",
    "method_account.getAuthorizationForm_param_public_key_type_string": "Service's public key",
    "method_messages.getGameHighScores": "Get highscores of a game",
    "method_messages.getGameHighScores_param_peer_type_InputPeer": "Where was the game sent",
    "method_messages.getGameHighScores_param_id_type_int": "ID of message with game media attachment",
    "method_messages.getGameHighScores_param_user_id_type_InputUser": "Get high scores made by a certain user",
    "method_messages.uploadImportedMedia": "Upload a media file associated with an [imported chat, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "method_messages.uploadImportedMedia_param_peer_type_InputPeer": "The Telegram chat where the media will be imported",
    "method_messages.uploadImportedMedia_param_import_id_type_long": "Identifier of a [history import session](https:\/\/core.telegram.org\/api\/import), returned by [messages.initHistoryImport](..\/methods\/messages.initHistoryImport.md)",
    "method_messages.uploadImportedMedia_param_file_name_type_string": "File name",
    "method_messages.uploadImportedMedia_param_media_type_InputMedia": "Media metadata",
    "method_auth.logOut": "Logs out the user.",
    "method_messages.editMessage": "Edit message",
    "method_messages.editMessage_param_no_webpage_type_flags.1?true": "Disable webpage preview",
    "method_messages.editMessage_param_peer_type_InputPeer": "Where was the message sent",
    "method_messages.editMessage_param_id_type_int": "ID of the message to edit",
    "method_messages.editMessage_param_message_type_flags.11?string": "New message",
    "method_messages.editMessage_param_media_type_flags.14?InputMedia": "New attached media",
    "method_messages.editMessage_param_reply_markup_type_flags.2?ReplyMarkup": "Reply markup for inline keyboards",
    "method_messages.editMessage_param_entities_type_flags.3?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "method_messages.editMessage_param_schedule_date_type_flags.15?int": "Scheduled message date for [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages)",
    "method_messages.sendBotRequestedPeer": "Send a chosen peer, as requested by a [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md) button.",
    "method_messages.sendBotRequestedPeer_param_peer_type_InputPeer": "The bot that sent the [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md) button.",
    "method_messages.sendBotRequestedPeer_param_msg_id_type_int": "ID of the message that contained the reply keyboard with the [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md) button.",
    "method_messages.sendBotRequestedPeer_param_button_id_type_int": "The `button_id` field from the [keyboardButtonRequestPeer](..\/constructors\/keyboardButtonRequestPeer.md) constructor.",
    "method_messages.sendBotRequestedPeer_param_requested_peer_type_InputPeer": "The chosen peer.",
    "method_messages.installStickerSet": "Install a stickerset",
    "method_messages.installStickerSet_param_stickerset_type_InputStickerSet": "Stickerset to install",
    "method_messages.installStickerSet_param_archived_type_Bool": "Whether to archive stickerset",
    "method_messages.getArchivedStickers": "Get all archived stickers",
    "method_messages.getArchivedStickers_param_masks_type_flags.0?true": "Get [mask stickers](https:\/\/core.telegram.org\/api\/stickers#mask-stickers)",
    "method_messages.getArchivedStickers_param_emojis_type_flags.1?true": "Get [custom emoji stickers](https:\/\/core.telegram.org\/api\/custom-emoji)",
    "method_messages.getArchivedStickers_param_offset_id_type_long": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getArchivedStickers_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_account.getSavedRingtones": "Fetch saved notification sounds",
    "method_account.getSavedRingtones_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.sendInlineBotResult": "Send a result obtained using [messages.getInlineBotResults](..\/methods\/messages.getInlineBotResults.md).",
    "method_messages.sendInlineBotResult_param_silent_type_flags.5?true": "Whether to send the message silently (no notification will be triggered on the other client)",
    "method_messages.sendInlineBotResult_param_background_type_flags.6?true": "Whether to send the message in background",
    "method_messages.sendInlineBotResult_param_clear_draft_type_flags.7?true": "Whether to clear the [draft](https:\/\/core.telegram.org\/api\/drafts)",
    "method_messages.sendInlineBotResult_param_hide_via_type_flags.11?true": "Whether to hide the `via @botname` in the resulting message (only for bot usernames encountered in the [config](..\/constructors\/config.md))",
    "method_messages.sendInlineBotResult_param_peer_type_InputPeer": "Destination",
    "method_messages.sendInlineBotResult_param_reply_to_msg_id_type_flags.0?int": "ID of the message this message should reply to",
    "method_messages.sendInlineBotResult_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.sendInlineBotResult_param_random_id_type_long": "Random ID to avoid resending the same query",
    "method_messages.sendInlineBotResult_param_query_id_type_long": "Query ID from [messages.getInlineBotResults](..\/methods\/messages.getInlineBotResults.md)",
    "method_messages.sendInlineBotResult_param_id_type_string": "Result ID from [messages.getInlineBotResults](..\/methods\/messages.getInlineBotResults.md)",
    "method_messages.sendInlineBotResult_param_schedule_date_type_flags.10?int": "Scheduled message date for scheduled messages",
    "method_messages.sendInlineBotResult_param_send_as_type_flags.13?InputPeer": "Send this message as the specified peer",
    "method_channels.deleteHistory": "Delete the history of a [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteHistory_param_for_everyone_type_flags.0?true": "Whether the history should be deleted for everyone",
    "method_channels.deleteHistory_param_channel_type_InputChannel": "[Supergroup](https:\/\/core.telegram.org\/api\/channel) whose history must be deleted",
    "method_channels.deleteHistory_param_max_id_type_int": "ID of message **up to which** the history must be deleted",
    "method_contacts.search": "Returns users found by username substring.",
    "method_contacts.search_param_q_type_string": "Target substring",
    "method_contacts.search_param_limit_type_int": "Maximum number of users to be returned",
    "method_messages.readFeaturedStickers": "Mark new featured stickers as read",
    "method_messages.readFeaturedStickers_param_id_type_Vector<long>": "IDs of stickersets to mark as read",
    "method_account.verifyEmail": "Verify an email address.",
    "method_account.verifyEmail_param_purpose_type_EmailVerifyPurpose": "Verification purpose",
    "method_account.verifyEmail_param_verification_type_EmailVerification": "Email verification code or token",
    "method_phone.getGroupCallStreamChannels": "Get info about RTMP streams in a group call or livestream.  \nThis method should be invoked to the same group\/channel-related DC used for [downloading livestream chunks](https:\/\/core.telegram.org\/api\/files#downloading-files).  \nAs usual, the media DC is preferred, if available.",
    "method_phone.getGroupCallStreamChannels_param_call_type_InputGroupCall": "Group call or livestream",
    "method_messages.importChatInvite": "Import a chat invite and join a private chat\/supergroup\/channel",
    "method_messages.importChatInvite_param_hash_type_string": "`hash` from a [chat invite deep link](https:\/\/core.telegram.org\/api\/links#chat-invite-links)",
    "method_bots.answerWebhookJSONQuery": "Answers a custom query; for bots only",
    "method_bots.answerWebhookJSONQuery_param_query_id_type_long": "Identifier of a custom query",
    "method_bots.answerWebhookJSONQuery_param_data_type_DataJSON": "JSON-serialized answer to the query",
    "method_stickers.checkShortName": "Check whether the given short name is available",
    "method_stickers.checkShortName_param_short_name_type_string": "Short name",
    "method_stickers.changeSticker": "Update the keywords, emojis or [mask coordinates](https:\/\/core.telegram.org\/api\/stickers#mask-stickers) of a sticker, bots only.",
    "method_stickers.changeSticker_param_sticker_type_InputDocument": "The sticker",
    "method_stickers.changeSticker_param_emoji_type_flags.0?string": "If set, updates the emoji list associated to the sticker",
    "method_stickers.changeSticker_param_mask_coords_type_flags.1?MaskCoords": "If set, updates the [mask coordinates](https:\/\/core.telegram.org\/api\/stickers#mask-stickers)",
    "method_stickers.changeSticker_param_keywords_type_flags.2?string": "If set, updates the sticker keywords (separated by commas). Can't be provided for mask stickers.",
    "method_messages.requestSimpleWebView": "Open a [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps).",
    "method_messages.requestSimpleWebView_param_from_switch_webview_type_flags.1?true": "Whether the webapp was opened by clicking on the `switch_webview` button shown on top of the inline results list returned by [messages.getInlineBotResults](..\/methods\/messages.getInlineBotResults.md).",
    "method_messages.requestSimpleWebView_param_bot_type_InputUser": "Bot that owns the webapp",
    "method_messages.requestSimpleWebView_param_url_type_string": "Web app URL",
    "method_messages.requestSimpleWebView_param_theme_params_type_flags.0?DataJSON": "[Theme parameters \u00bb](https:\/\/core.telegram.org\/api\/bots\/webapps#theme-parameters)",
    "method_messages.requestSimpleWebView_param_platform_type_string": "Short name of the application; 0-64 English letters, digits, and underscores",
    "method_help.getPassportConfig": "Get [passport](https:\/\/core.telegram.org\/passport) configuration",
    "method_help.getPassportConfig_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getAppChangelog": "Get changelog of current app.  \nTypically, an [updates](..\/constructors\/updates.md) constructor will be returned, containing one or more [updateServiceNotification](..\/constructors\/updateServiceNotification.md) updates with app-specific changelogs.",
    "method_help.getAppChangelog_param_prev_app_version_type_string": "Previous app version",
    "method_account.sendVerifyPhoneCode": "Send the verification phone code for telegram [passport](https:\/\/core.telegram.org\/passport).",
    "method_account.sendVerifyPhoneCode_param_phone_number_type_string": "The phone number to verify",
    "method_account.sendVerifyPhoneCode_param_settings_type_CodeSettings": "Phone code settings",
    "method_messages.getHistory": "Returns the conversation history with one interlocutor \/ within a chat",
    "method_messages.getHistory_param_peer_type_InputPeer": "Target peer",
    "method_messages.getHistory_param_offset_id_type_int": "Only return messages starting from the specified message ID",
    "method_messages.getHistory_param_offset_date_type_int": "Only return messages sent before the specified date",
    "method_messages.getHistory_param_add_offset_type_int": "Number of list elements to be skipped, negative values are also accepted.",
    "method_messages.getHistory_param_limit_type_int": "Number of results to return",
    "method_messages.getHistory_param_max_id_type_int": "If a positive value was transferred, the method will return only messages with IDs less than **max\\_id**",
    "method_messages.getHistory_param_min_id_type_int": "If a positive value was transferred, the method will return only messages with IDs more than **min\\_id**",
    "method_messages.getHistory_param_hash_type_long": "[Result hash](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.sendScheduledMessages": "Send scheduled messages right away",
    "method_messages.sendScheduledMessages_param_peer_type_InputPeer": "Peer",
    "method_messages.sendScheduledMessages_param_id_type_Vector<int>": "Scheduled message IDs",
    "method_upload.getCdnFile": "Download a [CDN](https:\/\/core.telegram.org\/cdn) file.",
    "method_upload.getCdnFile_param_file_token_type_bytes": "File token",
    "method_upload.getCdnFile_param_offset_type_long": "Offset of chunk to download",
    "method_upload.getCdnFile_param_limit_type_int": "Length of chunk to download",
    "method_account.changeAuthorizationSettings": "Change authorization settings",
    "method_account.changeAuthorizationSettings_param_hash_type_long": "Session ID from the [authorization](..\/constructors\/authorization.md) constructor, fetchable using [account.getAuthorizations](..\/methods\/account.getAuthorizations.md)",
    "method_account.changeAuthorizationSettings_param_encrypted_requests_disabled_type_flags.0?Bool": "Whether to enable or disable receiving encrypted chats: if the flag is not set, the previous setting is not changed",
    "method_account.changeAuthorizationSettings_param_call_requests_disabled_type_flags.1?Bool": "Whether to enable or disable receiving calls: if the flag is not set, the previous setting is not changed",
    "method_help.getSupportName": "Get localized name of the telegram support user",
    "method_channels.editBanned": "Ban\/unban\/kick a user in a [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_channels.editBanned_param_channel_type_InputChannel": "The [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_channels.editBanned_param_participant_type_InputPeer": "Participant to ban",
    "method_channels.editBanned_param_banned_rights_type_ChatBannedRights": "The banned rights",
    "method_channels.deleteMessages": "Delete messages in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteMessages_param_channel_type_InputChannel": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteMessages_param_id_type_Vector<int>": "IDs of messages to delete",
    "method_channels.deleteUserHistory": "Delete all messages sent by a certain user in a [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteUserHistory_param_channel_type_InputChannel": "[Supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteUserHistory_param_user_id_type_InputUser": "User whose messages should be deleted",
    "method_stickers.deleteStickerSet": "Deletes a stickerset we created, bots only.",
    "method_stickers.deleteStickerSet_param_stickerset_type_InputStickerSet": "Stickerset to delete",
    "method_channels.reorderPinnedForumTopics": "Reorder pinned forum topics",
    "method_channels.reorderPinnedForumTopics_param_force_type_flags.0?true": "If set, topics pinned server-side but not present in the order field will be unpinned.",
    "method_channels.reorderPinnedForumTopics_param_channel_type_InputChannel": "Supergroup ID",
    "method_channels.reorderPinnedForumTopics_param_order_type_Vector<int>": "[Topic IDs \u00bb](https:\/\/core.telegram.org\/api\/forum)",
    "method_messages.getFavedStickers": "Get faved stickers",
    "method_messages.getFavedStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_channels.getChannels": "Get info about [channels\/supergroups](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.getChannels_param_id_type_Vector<InputChannel>": "IDs of channels\/supergroups to get info about",
    "method_auth.checkRecoveryPassword": "Check if the [2FA recovery code](https:\/\/core.telegram.org\/api\/srp) sent using [auth.requestPasswordRecovery](..\/methods\/auth.requestPasswordRecovery.md) is valid, before passing it to [auth.recoverPassword](..\/methods\/auth.recoverPassword.md).",
    "method_auth.checkRecoveryPassword_param_code_type_string": "Code received via email",
    "method_bots.getBotInfo": "Get localized name, about text and description of a bot (or of the current account, if called by a bot).",
    "method_bots.getBotInfo_param_bot_type_flags.0?InputUser": "If called by a user, **must** contain the peer of a bot we own.",
    "method_bots.getBotInfo_param_lang_code_type_string": "Language code, if left empty this method will return the fallback about text and description.",
    "method_messages.sendEncryptedFile": "Sends a message with a file attachment to a secret chat",
    "method_messages.sendEncryptedFile_param_silent_type_flags.0?true": "Whether to send the file without triggering a notification",
    "method_messages.sendEncryptedFile_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.sendEncryptedFile_param_random_id_type_long": "Unique client message ID necessary to prevent message resending",
    "method_messages.sendEncryptedFile_param_data_type_bytes": "TL-serialization of [DecryptedMessage](..\/types\/DecryptedMessage.md) type, encrypted with a key generated during chat initialization",
    "method_messages.sendEncryptedFile_param_file_type_InputEncryptedFile": "File attachment for the secret chat",
    "method_messages.checkHistoryImportPeer": "Check whether chat history exported from another chat app can be [imported into a specific Telegram chat, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import).\n\nIf the check succeeds, and no RPC errors are returned, a [messages.CheckedHistoryImportPeer](..\/types\/messages.CheckedHistoryImportPeer.md) constructor will be returned, with a confirmation text to be shown to the user, before actually initializing the import.",
    "method_messages.checkHistoryImportPeer_param_peer_type_InputPeer": "The chat where we want to [import history \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "method_account.saveAutoSaveSettings": "Modify autosave settings",
    "method_account.saveAutoSaveSettings_param_users_type_flags.0?true": "Whether the new settings should affect all private chats",
    "method_account.saveAutoSaveSettings_param_chats_type_flags.1?true": "Whether the new settings should affect all groups",
    "method_account.saveAutoSaveSettings_param_broadcasts_type_flags.2?true": "Whether the new settings should affect all [channels](https:\/\/core.telegram.org\/api\/channel)",
    "method_account.saveAutoSaveSettings_param_peer_type_flags.3?InputPeer": "Whether the new settings should affect a specific peer",
    "method_account.saveAutoSaveSettings_param_settings_type_AutoSaveSettings": "The new autosave settings",
    "method_account.changePhone": "Change the phone number of the current account",
    "method_account.changePhone_param_phone_number_type_string": "New phone number",
    "method_account.changePhone_param_phone_code_hash_type_string": "Phone code hash received when calling [account.sendChangePhoneCode](..\/methods\/account.sendChangePhoneCode.md)",
    "method_account.changePhone_param_phone_code_type_string": "Phone code received when calling [account.sendChangePhoneCode](..\/methods\/account.sendChangePhoneCode.md)",
    "method_account.updateDeviceLocked": "When client-side passcode lock feature is enabled, will not show message texts in incoming [PUSH notifications](https:\/\/core.telegram.org\/api\/push-updates).",
    "method_account.updateDeviceLocked_param_period_type_int": "Inactivity period after which to start hiding message texts in [PUSH notifications](https:\/\/core.telegram.org\/api\/push-updates).",
    "method_account.confirmPhone": "Confirm a phone number to cancel account deletion, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_account.confirmPhone_param_phone_code_hash_type_string": "Phone code hash, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_account.confirmPhone_param_phone_code_type_string": "SMS code, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_payments.getPaymentForm": "Get a payment form",
    "method_payments.getPaymentForm_param_invoice_type_InputInvoice": "Invoice",
    "method_payments.getPaymentForm_param_theme_params_type_flags.0?DataJSON": "A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages: <br>`bg_color` \\- Background color <br>`text_color` \\- Text color <br>`hint_color` \\- Hint text color <br>`link_color` \\- Link color <br>`button_color` \\- Button color <br>`button_text_color` \\- Button text color",
    "method_messages.startHistoryImport": "Complete the [history import process](https:\/\/core.telegram.org\/api\/import), importing all messages into the chat.  \nTo be called only after initializing the import with [messages.initHistoryImport](..\/methods\/messages.initHistoryImport.md) and uploading all files using [messages.uploadImportedMedia](..\/methods\/messages.uploadImportedMedia.md).",
    "method_messages.startHistoryImport_param_peer_type_InputPeer": "The Telegram chat where the messages should be [imported, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/import)",
    "method_messages.startHistoryImport_param_import_id_type_long": "Identifier of a history import session, returned by [messages.initHistoryImport](..\/methods\/messages.initHistoryImport.md).",
    "method_messages.migrateChat": "Turn a [basic group into a supergroup](https:\/\/core.telegram.org\/api\/channel#migration)",
    "method_messages.migrateChat_param_chat_id_type_long": "[Basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups) to migrate",
    "method_messages.getPollResults": "Get poll results",
    "method_messages.getPollResults_param_peer_type_InputPeer": "Peer where the poll was found",
    "method_messages.getPollResults_param_msg_id_type_int": "Message ID of poll message",
    "method_messages.receivedQueue": "Confirms receipt of messages in a secret chat by client, cancels push notifications.  \nThe method returns a list of **random\\_id**s of messages for which push notifications were cancelled.",
    "method_messages.receivedQueue_param_max_qts_type_int": "Maximum qts value available at the client",
    "method_stickers.createStickerSet": "Create a stickerset, bots only.",
    "method_stickers.createStickerSet_param_masks_type_flags.0?true": "Whether this is a mask stickerset",
    "method_stickers.createStickerSet_param_animated_type_flags.1?true": "Whether this is an animated stickerset",
    "method_stickers.createStickerSet_param_videos_type_flags.4?true": "Whether this is a video stickerset",
    "method_stickers.createStickerSet_param_emojis_type_flags.5?true": "Whether this is a [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) stickerset.",
    "method_stickers.createStickerSet_param_text_color_type_flags.6?true": "Whether the color of TGS custom emojis contained in this set should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. For custom emoji stickersets only.",
    "method_stickers.createStickerSet_param_user_id_type_InputUser": "Stickerset owner",
    "method_stickers.createStickerSet_param_title_type_string": "Stickerset name, `1-64` chars",
    "method_stickers.createStickerSet_param_short_name_type_string": "Short name of sticker set, to be used in [sticker deep links \u00bb](https:\/\/core.telegram.org\/api\/links#stickerset-links). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and, **if called by a bot**, must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.",
    "method_stickers.createStickerSet_param_thumb_type_flags.2?InputDocument": "Thumbnail",
    "method_stickers.createStickerSet_param_stickers_type_Vector<InputStickerSetItem>": "Stickers",
    "method_stickers.createStickerSet_param_software_type_flags.3?string": "Used when [importing stickers using the sticker import SDKs](https:\/\/core.telegram.org\/import-stickers), specifies the name of the software that created the stickers",
    "method_account.finishTakeoutSession": "Finish account takeout session",
    "method_account.finishTakeoutSession_param_success_type_flags.0?true": "Data exported successfully",
    "method_messages.getDocumentByHash": "Get a document by its SHA256 hash, mainly used for gifs",
    "method_messages.getDocumentByHash_param_sha256_type_bytes": "SHA256 of file",
    "method_messages.getDocumentByHash_param_size_type_long": "Size of the file in bytes",
    "method_messages.getDocumentByHash_param_mime_type_type_string": "Mime type",
    "method_phone.toggleGroupCallRecord": "Start or stop recording a group call: the recorded audio and video streams will be automatically sent to `Saved messages` (the chat with ourselves).",
    "method_phone.toggleGroupCallRecord_param_start_type_flags.0?true": "Whether to start or stop recording",
    "method_phone.toggleGroupCallRecord_param_video_type_flags.2?true": "Whether to also record video streams",
    "method_phone.toggleGroupCallRecord_param_call_type_InputGroupCall": "The group call or livestream",
    "method_phone.toggleGroupCallRecord_param_title_type_flags.1?string": "Recording title",
    "method_phone.toggleGroupCallRecord_param_video_portrait_type_flags.2?Bool": "If video stream recording is enabled, whether to record in portrait or landscape mode",
    "method_bots.setBotBroadcastDefaultAdminRights": "Set the default [suggested admin rights](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights) for bots being added as admins to channels, see [here for more info on how to handle them \u00bb](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights).",
    "method_bots.setBotBroadcastDefaultAdminRights_param_admin_rights_type_ChatAdminRights": "Admin rights",
    "method_account.uploadRingtone": "Upload notification sound, use [account.saveRingtone](..\/methods\/account.saveRingtone.md) to convert it and add it to the list of saved notification sounds.",
    "method_account.uploadRingtone_param_file_type_InputFile": "Notification sound",
    "method_account.uploadRingtone_param_file_name_type_string": "File name",
    "method_account.uploadRingtone_param_mime_type_type_string": "MIME type of file",
    "method_phone.createGroupCall": "Create a group call or livestream",
    "method_phone.createGroupCall_param_rtmp_stream_type_flags.2?true": "Whether RTMP stream support should be enabled: only the [group\/supergroup\/channel](https:\/\/core.telegram.org\/api\/channel) owner can use this flag.",
    "method_phone.createGroupCall_param_peer_type_InputPeer": "Associate the group call or livestream to the provided [group\/supergroup\/channel](https:\/\/core.telegram.org\/api\/channel)",
    "method_phone.createGroupCall_param_random_id_type_int": "Unique client message ID required to prevent creation of duplicate group calls",
    "method_phone.createGroupCall_param_title_type_flags.0?string": "Call title",
    "method_phone.createGroupCall_param_schedule_date_type_flags.1?int": "For scheduled group call or livestreams, the absolute date when the group call will start",
    "method_messages.toggleNoForwards": "Enable or disable [content protection](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) on a channel or chat",
    "method_messages.toggleNoForwards_param_peer_type_InputPeer": "The chat or channel",
    "method_messages.toggleNoForwards_param_enabled_type_Bool": "Enable or disable content protection",
    "method_channels.toggleSlowMode": "Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds",
    "method_channels.toggleSlowMode_param_channel_type_InputChannel": "The [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.toggleSlowMode_param_seconds_type_int": "Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation",
    "method_messages.searchStickerSets": "Search for stickersets",
    "method_messages.searchStickerSets_param_exclude_featured_type_flags.0?true": "Exclude featured stickersets from results",
    "method_messages.searchStickerSets_param_q_type_string": "Query string",
    "method_messages.searchStickerSets_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getCommonChats": "Get chats in common with a user",
    "method_messages.getCommonChats_param_user_id_type_InputUser": "User ID",
    "method_messages.getCommonChats_param_max_id_type_long": "Maximum ID of chat to return (see [pagination](https:\/\/core.telegram.org\/api\/offsets))",
    "method_messages.getCommonChats_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getAdminedPublicChannels": "Get [channels\/supergroups\/geogroups](https:\/\/core.telegram.org\/api\/channel) we're admin in. Usually called when the user exceeds the [limit](..\/constructors\/config.md) for owned public [channels\/supergroups\/geogroups](https:\/\/core.telegram.org\/api\/channel), and the user is given the choice to remove one of his channels\/supergroups\/geogroups.",
    "method_channels.getAdminedPublicChannels_param_by_location_type_flags.0?true": "Get geogroups",
    "method_channels.getAdminedPublicChannels_param_check_limit_type_flags.1?true": "If set and the user has reached the limit of owned public [channels\/supergroups\/geogroups](https:\/\/core.telegram.org\/api\/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](..\/methods\/channels.checkUsername.md)\/[channels.updateUsername](..\/methods\/channels.updateUsername.md).",
    "method_messages.updateDialogFiltersOrder": "Reorder [folders](https:\/\/core.telegram.org\/api\/folders)",
    "method_messages.updateDialogFiltersOrder_param_order_type_Vector<int>": "New [folder](https:\/\/core.telegram.org\/api\/folders) order",
    "method_messages.transcribeAudio": "[Transcribe voice message](https:\/\/core.telegram.org\/api\/transcribe)",
    "method_messages.transcribeAudio_param_peer_type_InputPeer": "Peer ID where the voice message was sent",
    "method_messages.transcribeAudio_param_msg_id_type_int": "Voice message ID",
    "method_messages.getFeaturedStickers": "Get featured stickers",
    "method_messages.getFeaturedStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.installTheme": "Install a theme",
    "method_account.installTheme_param_dark_type_flags.0?true": "Whether to install the dark version",
    "method_account.installTheme_param_theme_type_flags.1?InputTheme": "Theme to install",
    "method_account.installTheme_param_format_type_flags.2?string": "Theme format, a string that identifies the theming engines supported by the client",
    "method_account.installTheme_param_base_theme_type_flags.3?BaseTheme": "Indicates a basic theme provided by all clients",
    "method_account.getGlobalPrivacySettings": "Get global privacy settings",
    "method_account.reorderUsernames": "Reorder usernames associated with the currently logged-in user.",
    "method_account.reorderUsernames_param_order_type_Vector<string>": "The new order for active usernames. All active usernames must be specified.",
    "method_phone.toggleGroupCallStartSubscription": "Subscribe or unsubscribe to a scheduled group call",
    "method_phone.toggleGroupCallStartSubscription_param_call_type_InputGroupCall": "Scheduled group call",
    "method_phone.toggleGroupCallStartSubscription_param_subscribed_type_Bool": "Enable or disable subscription",
    "method_messages.getSuggestedDialogFilters": "Get [suggested folders](https:\/\/core.telegram.org\/api\/folders)",
    "method_messages.getMessagesReactions": "Get [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.getMessagesReactions_param_peer_type_InputPeer": "Peer",
    "method_messages.getMessagesReactions_param_id_type_Vector<int>": "Message IDs",
    "method_account.getContactSignUpNotification": "Whether the user will receive notifications when contacts sign up",
    "method_messages.setTyping": "Sends a current user typing event (see [SendMessageAction](..\/types\/SendMessageAction.md) for all event types) to a conversation partner or group.",
    "method_messages.setTyping_param_peer_type_InputPeer": "Target user or group",
    "method_messages.setTyping_param_top_msg_id_type_flags.0?int": "[Topic ID](https:\/\/core.telegram.org\/api\/threads)",
    "method_messages.setTyping_param_action_type_SendMessageAction": "Type of action",
    "method_upload.getFile": "Returns content of a whole file or its part.",
    "method_upload.getFile_param_precise_type_flags.0?true": "Disable some checks on limit and offset values, useful for example to stream videos by keyframes",
    "method_upload.getFile_param_cdn_supported_type_flags.1?true": "Whether the current client supports [CDN downloads](https:\/\/core.telegram.org\/cdn)",
    "method_upload.getFile_param_location_type_InputFileLocation": "File location",
    "method_upload.getFile_param_offset_type_long": "Number of bytes to be skipped",
    "method_upload.getFile_param_limit_type_int": "Number of bytes to be returned",
    "method_invokeWithTakeout": "Invoke a method within a takeout session",
    "method_invokeWithTakeout_param_takeout_id_type_long": "Takeout session ID",
    "method_invokeWithTakeout_param_query_type_!X": "Query",
    "method_channels.toggleParticipantsHidden": "Hide or display the participants list in a [supergroup](https:\/\/core.telegram.org\/api\/channel).\n\nThe supergroup must have at least `hidden_members_group_size_min` participants in order to use this method, as specified by the [client configuration parameters \u00bb](https:\/\/core.telegram.org\/api\/config#client-configuration).",
    "method_channels.toggleParticipantsHidden_param_channel_type_InputChannel": "Supergroup ID",
    "method_channels.toggleParticipantsHidden_param_enabled_type_Bool": "If true, will hide the participants list; otherwise will unhide it.",
    "method_account.getAutoSaveSettings": "Get autosave settings",
    "method_messages.forwardMessages": "Forwards messages by their IDs.",
    "method_messages.forwardMessages_param_silent_type_flags.5?true": "Whether to send messages silently (no notification will be triggered on the destination clients)",
    "method_messages.forwardMessages_param_background_type_flags.6?true": "Whether to send the message in background",
    "method_messages.forwardMessages_param_with_my_score_type_flags.8?true": "When forwarding games, whether to include your score in the game",
    "method_messages.forwardMessages_param_drop_author_type_flags.11?true": "Whether to forward messages without quoting the original author",
    "method_messages.forwardMessages_param_drop_media_captions_type_flags.12?true": "Whether to strip captions from media",
    "method_messages.forwardMessages_param_noforwards_type_flags.14?true": "Only for bots, disallows further re-forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) enabled",
    "method_messages.forwardMessages_param_from_peer_type_InputPeer": "Source of messages",
    "method_messages.forwardMessages_param_id_type_Vector<int>": "IDs of messages",
    "method_messages.forwardMessages_param_random_id_type_Vector<long>": "Random ID to prevent resending of messages",
    "method_messages.forwardMessages_param_to_peer_type_InputPeer": "Destination peer",
    "method_messages.forwardMessages_param_top_msg_id_type_flags.9?int": "Destination [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_messages.forwardMessages_param_schedule_date_type_flags.10?int": "Scheduled message date for scheduled messages",
    "method_messages.forwardMessages_param_send_as_type_flags.13?InputPeer": "Forward the messages as the specified peer",
    "method_messages.sendMessage": "Sends a message to a chat",
    "method_messages.sendMessage_param_no_webpage_type_flags.1?true": "Set this flag to disable generation of the webpage preview",
    "method_messages.sendMessage_param_silent_type_flags.5?true": "Send this message silently (no notifications for the receivers)",
    "method_messages.sendMessage_param_background_type_flags.6?true": "Send this message as background message",
    "method_messages.sendMessage_param_clear_draft_type_flags.7?true": "Clear the draft field",
    "method_messages.sendMessage_param_noforwards_type_flags.14?true": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) enabled",
    "method_messages.sendMessage_param_update_stickersets_order_type_flags.15?true": "Whether to move used stickersets to top, [see here for more info on this flag \u00bb](https:\/\/core.telegram.org\/api\/stickers#recent-stickersets)",
    "method_messages.sendMessage_param_peer_type_InputPeer": "The destination where the message will be sent",
    "method_messages.sendMessage_param_reply_to_msg_id_type_flags.0?int": "The message ID to which this message will reply to",
    "method_messages.sendMessage_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.sendMessage_param_message_type_string": "The message",
    "method_messages.sendMessage_param_random_id_type_long": "Unique client message ID required to prevent message resending",
    "method_messages.sendMessage_param_reply_markup_type_flags.2?ReplyMarkup": "Reply markup for sending bot buttons",
    "method_messages.sendMessage_param_entities_type_flags.3?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for sending styled text",
    "method_messages.sendMessage_param_schedule_date_type_flags.10?int": "Scheduled message date for [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages)",
    "method_messages.sendMessage_param_send_as_type_flags.13?InputPeer": "Send this message as the specified peer",
    "method_auth.checkPassword": "Try logging to an account protected by a [2FA password](https:\/\/core.telegram.org\/api\/srp).",
    "method_auth.checkPassword_param_password_type_InputCheckPasswordSRP": "The account's password (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "method_stickers.setStickerSetThumb": "Set stickerset thumbnail",
    "method_stickers.setStickerSetThumb_param_stickerset_type_InputStickerSet": "Stickerset",
    "method_stickers.setStickerSetThumb_param_thumb_type_flags.0?InputDocument": "Thumbnail (only for normal stickersets, not custom emoji stickersets).",
    "method_stickers.setStickerSetThumb_param_thumb_document_id_type_flags.1?long": "Only for [custom emoji stickersets](https:\/\/core.telegram.org\/api\/custom-emoji), ID of a custom emoji present in the set to use as thumbnail; pass 0 to fallback to the first custom emoji of the set.",
    "method_messages.getEmojiStatusGroups": "Represents a list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories), to be used when selecting custom emojis to set as [custom emoji status](https:\/\/core.telegram.org\/api).",
    "method_messages.getEmojiStatusGroups_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.resetAuthorization": "Log out an active [authorized session](https:\/\/core.telegram.org\/api\/auth) by its hash",
    "method_account.resetAuthorization_param_hash_type_long": "Session hash",
    "method_channels.getParticipant": "Get info about a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) participant",
    "method_channels.getParticipant_param_channel_type_InputChannel": "Channel\/supergroup",
    "method_channels.getParticipant_param_participant_type_InputPeer": "Participant to get info about",
    "method_account.updateNotifySettings": "Edits notification settings from a given user\/group, from all users\/all groups.",
    "method_account.updateNotifySettings_param_peer_type_InputNotifyPeer": "Notification source",
    "method_account.updateNotifySettings_param_settings_type_InputPeerNotifySettings": "Notification settings",
    "method_stats.loadAsyncGraph": "Load [channel statistics graph](https:\/\/core.telegram.org\/api\/stats) asynchronously",
    "method_stats.loadAsyncGraph_param_token_type_string": "Graph token from [statsGraphAsync](..\/constructors\/statsGraphAsync.md) constructor",
    "method_stats.loadAsyncGraph_param_x_type_flags.0?long": "Zoom value, if required",
    "method_messages.saveRecentSticker": "Add\/remove sticker from recent stickers list",
    "method_messages.saveRecentSticker_param_attached_type_flags.0?true": "Whether to add\/remove stickers recently attached to photo or video files",
    "method_messages.saveRecentSticker_param_id_type_InputDocument": "Sticker",
    "method_messages.saveRecentSticker_param_unsave_type_Bool": "Whether to save or unsave the sticker",
    "method_payments.clearSavedInfo": "Clear saved payment information",
    "method_payments.clearSavedInfo_param_credentials_type_flags.0?true": "Remove saved payment credentials",
    "method_payments.clearSavedInfo_param_info_type_flags.1?true": "Clear the last order settings saved by the user",
    "method_messages.initHistoryImport": "Import chat history from a foreign chat app into a specific Telegram chat, [click here for more info about imported chats \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "method_messages.initHistoryImport_param_peer_type_InputPeer": "The Telegram chat where the [history should be imported](https:\/\/core.telegram.org\/api\/import).",
    "method_messages.initHistoryImport_param_file_type_InputFile": "File with messages to import.",
    "method_messages.initHistoryImport_param_media_count_type_int": "Number of media files associated with the chat that will be uploaded using [messages.uploadImportedMedia](..\/methods\/messages.uploadImportedMedia.md).",
    "method_messages.unpinAllMessages": "[Unpin](https:\/\/core.telegram.org\/api\/pin) all pinned messages",
    "method_messages.unpinAllMessages_param_peer_type_InputPeer": "Chat where to unpin",
    "method_messages.unpinAllMessages_param_top_msg_id_type_flags.0?int": "[Forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics) where to unpin",
    "method_channels.getFullChannel": "Get full info about a [supergroup](https:\/\/core.telegram.org\/api\/channel#supergroups), [gigagroup](https:\/\/core.telegram.org\/api\/channel#gigagroups) or [channel](https:\/\/core.telegram.org\/api\/channel#channels)",
    "method_channels.getFullChannel_param_channel_type_InputChannel": "The [channel](https:\/\/core.telegram.org\/api\/channel#channels), [supergroup](https:\/\/core.telegram.org\/api\/channel#supergroups) or [gigagroup](https:\/\/core.telegram.org\/api\/channel#gigagroups) to get info about",
    "method_account.updatePasswordSettings": "Set a new 2FA password",
    "method_account.updatePasswordSettings_param_password_type_InputCheckPasswordSRP": "The old password (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "method_account.updatePasswordSettings_param_new_settings_type_account.PasswordInputSettings": "The new password (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "method_chatlists.checkChatlistInvite": "Obtain information about a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.checkChatlistInvite_param_slug_type_string": "`slug` obtained from the [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links)",
    "method_channels.setStickers": "Associate a stickerset to the supergroup",
    "method_channels.setStickers_param_channel_type_InputChannel": "Supergroup",
    "method_channels.setStickers_param_stickerset_type_InputStickerSet": "The stickerset to associate",
    "method_chatlists.getLeaveChatlistSuggestions": "Returns identifiers of pinned or always included chats from a chat folder imported using a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links), which are suggested to be left when the chat folder is deleted.",
    "method_chatlists.getLeaveChatlistSuggestions_param_chatlist_type_InputChatlist": "Folder ID",
    "method_chatlists.exportChatlistInvite": "Export a [folder \u00bb](https:\/\/core.telegram.org\/api\/folders), creating a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.exportChatlistInvite_param_chatlist_type_InputChatlist": "The folder to export",
    "method_chatlists.exportChatlistInvite_param_title_type_string": "An optional name for the link",
    "method_chatlists.exportChatlistInvite_param_peers_type_Vector<InputPeer>": "The list of channels, group and supergroups to share with the link. Basic groups will automatically be [converted to supergroups](https:\/\/core.telegram.org\/api\/channel#migration) when invoking the method.",
    "method_account.setAccountTTL": "Set account self-destruction period",
    "method_account.setAccountTTL_param_ttl_type_AccountDaysTTL": "Time to live in days",
    "method_channels.inviteToChannel": "Invite users to a channel\/supergroup\n\nMay also return 0-N updates of type [updateGroupInvitePrivacyForbidden](..\/constructors\/updateGroupInvitePrivacyForbidden.md): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https:\/\/core.telegram.org\/api\/invites) can be shared with the user, instead.",
    "method_channels.inviteToChannel_param_channel_type_InputChannel": "Channel\/supergroup",
    "method_channels.inviteToChannel_param_users_type_Vector<InputUser>": "Users to invite",
    "method_phone.editGroupCallTitle": "Edit the title of a group call or livestream",
    "method_phone.editGroupCallTitle_param_call_type_InputGroupCall": "Group call",
    "method_phone.editGroupCallTitle_param_title_type_string": "New title",
    "method_channels.editCreator": "Transfer channel ownership",
    "method_channels.editCreator_param_channel_type_InputChannel": "Channel",
    "method_channels.editCreator_param_user_id_type_InputUser": "New channel owner",
    "method_channels.editCreator_param_password_type_InputCheckPasswordSRP": "[2FA password](https:\/\/core.telegram.org\/api\/srp) of account",
    "method_payments.assignPlayMarketTransaction": "Informs server about a purchase made through the Play Store: for official applications only.",
    "method_payments.assignPlayMarketTransaction_param_receipt_type_DataJSON": "Receipt",
    "method_payments.assignPlayMarketTransaction_param_purpose_type_InputStorePaymentPurpose": "Payment purpose",
    "method_upload.getCdnFileHashes": "Get SHA256 hashes for verifying downloaded [CDN](https:\/\/core.telegram.org\/cdn) files",
    "method_upload.getCdnFileHashes_param_file_token_type_bytes": "File",
    "method_upload.getCdnFileHashes_param_offset_type_long": "Offset from which to start getting hashes",
    "method_messages.receivedMessages": "Confirms receipt of messages by a client, cancels PUSH-notification sending.",
    "method_messages.receivedMessages_param_max_id_type_int": "Maximum message ID available in a client.",
    "method_phone.getGroupParticipants": "Get group call participants",
    "method_phone.getGroupParticipants_param_call_type_InputGroupCall": "Group call",
    "method_phone.getGroupParticipants_param_ids_type_Vector<InputPeer>": "If specified, will fetch group participant info about the specified peers",
    "method_phone.getGroupParticipants_param_sources_type_Vector<int>": "If specified, will fetch group participant info about the specified WebRTC source IDs",
    "method_phone.getGroupParticipants_param_offset_type_string": "Offset for results, taken from the `next_offset` field of [phone.groupParticipants](..\/constructors\/phone.groupParticipants.md), initially an empty string. <br>Note: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [phone.groupParticipants](..\/constructors\/phone.groupParticipants.md) if it is empty, to avoid an infinite loop.",
    "method_phone.getGroupParticipants_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getSponsoredMessages": "Get a list of sponsored messages",
    "method_channels.getSponsoredMessages_param_channel_type_InputChannel": "Peer",
    "method_messages.sendVote": "Vote in a [poll](..\/constructors\/poll.md)",
    "method_messages.sendVote_param_peer_type_InputPeer": "The chat where the poll was sent",
    "method_messages.sendVote_param_msg_id_type_int": "The message ID of the poll",
    "method_messages.sendVote_param_options_type_Vector<bytes>": "The options that were chosen",
    "method_payments.validateRequestedInfo": "Submit requested order information for validation",
    "method_payments.validateRequestedInfo_param_save_type_flags.0?true": "Save order information to re-use it for future orders",
    "method_payments.validateRequestedInfo_param_invoice_type_InputInvoice": "Invoice",
    "method_payments.validateRequestedInfo_param_info_type_PaymentRequestedInfo": "Requested order information",
    "method_channels.toggleUsername": "Activate or deactivate a purchased [fragment.com](https:\/\/fragment.com) username associated to a [supergroup or channel](https:\/\/core.telegram.org\/api\/channel) we own.",
    "method_channels.toggleUsername_param_channel_type_InputChannel": "[Supergroup or channel](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.toggleUsername_param_username_type_string": "Username",
    "method_channels.toggleUsername_param_active_type_Bool": "Whether to activate or deactivate the username",
    "method_phone.checkGroupCall": "Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs.  \nReturns an intersection of the source IDs specified in `sources`, and the source IDs currently being forwarded by the SFU.",
    "method_phone.checkGroupCall_param_call_type_InputGroupCall": "Group call",
    "method_phone.checkGroupCall_param_sources_type_Vector<int>": "Source IDs",
    "method_messages.clearRecentStickers": "Clear recent stickers",
    "method_messages.clearRecentStickers_param_attached_type_flags.0?true": "Set this flag to clear the list of stickers recently attached to photo or video files",
    "method_channels.editLocation": "Edit location of geogroup",
    "method_channels.editLocation_param_channel_type_InputChannel": "[Geogroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.editLocation_param_geo_point_type_InputGeoPoint": "New geolocation",
    "method_channels.editLocation_param_address_type_string": "Address string",
    "method_messages.deleteChat": "Delete a [chat](https:\/\/core.telegram.org\/api\/channel)",
    "method_messages.deleteChat_param_chat_id_type_long": "Chat ID",
    "method_messages.rateTranscribedAudio": "Rate [transcribed voice message](https:\/\/core.telegram.org\/api\/transcribe)",
    "method_messages.rateTranscribedAudio_param_peer_type_InputPeer": "Peer where the voice message was sent",
    "method_messages.rateTranscribedAudio_param_msg_id_type_int": "Message ID",
    "method_messages.rateTranscribedAudio_param_transcription_id_type_long": "Transcription ID",
    "method_messages.rateTranscribedAudio_param_good_type_Bool": "Whether the transcription was correct",
    "method_auth.importWebTokenAuthorization": "Login by importing an authorization token",
    "method_auth.importWebTokenAuthorization_param_api_id_type_int": "[API ID](https:\/\/core.telegram.org\/api\/obtaining_api_id)",
    "method_auth.importWebTokenAuthorization_param_api_hash_type_string": "[API hash](https:\/\/core.telegram.org\/api\/obtaining_api_id)",
    "method_auth.importWebTokenAuthorization_param_web_auth_token_type_string": "The authorization token",
    "method_channels.editTitle": "Edit the name of a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.editTitle_param_channel_type_InputChannel": "Channel\/supergroup",
    "method_channels.editTitle_param_title_type_string": "New name",
    "method_phone.sendSignalingData": "Send VoIP signaling data",
    "method_phone.sendSignalingData_param_peer_type_InputPhoneCall": "Phone call",
    "method_phone.sendSignalingData_param_data_type_bytes": "Signaling payload",
    "method_messages.getSearchCounters": "Get the number of results that would be found by a [messages.search](..\/methods\/messages.search.md) call with the same parameters",
    "method_messages.getSearchCounters_param_peer_type_InputPeer": "Peer where to search",
    "method_messages.getSearchCounters_param_top_msg_id_type_flags.0?int": "If set, consider only messages within the specified [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_messages.getSearchCounters_param_filters_type_Vector<MessagesFilter>": "Search filters",
    "method_messages.getAttachMenuBots": "Returns installed attachment menu [bot web apps \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "method_messages.getAttachMenuBots_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getDialogFilters": "Get [folders](https:\/\/core.telegram.org\/api\/folders)",
    "method_auth.requestFirebaseSms": "Request an SMS code via Firebase.",
    "method_auth.requestFirebaseSms_param_phone_number_type_string": "Phone number",
    "method_auth.requestFirebaseSms_param_phone_code_hash_type_string": "Phone code hash returned by [auth.sendCode](..\/methods\/auth.sendCode.md)",
    "method_auth.requestFirebaseSms_param_safety_net_token_type_flags.0?string": "On Android, a JWS object obtained as described in the [auth documentation \u00bb](https:\/\/core.telegram.org\/api\/auth)",
    "method_auth.requestFirebaseSms_param_ios_push_secret_type_flags.1?string": "Secret token received via an apple push notification",
    "method_phone.saveCallLog": "Save phone call debug information",
    "method_phone.saveCallLog_param_peer_type_InputPhoneCall": "Phone call",
    "method_phone.saveCallLog_param_file_type_InputFile": "Logs",
    "method_auth.resendCode": "Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode\/auth.resendCode: see [login](https:\/\/core.telegram.org\/api\/auth) for more info.",
    "method_auth.resendCode_param_phone_number_type_string": "The phone number",
    "method_auth.resendCode_param_phone_code_hash_type_string": "The phone code hash obtained from [auth.sendCode](..\/methods\/auth.sendCode.md)",
    "method_messages.requestEncryption": "Sends a request to start a secret chat to the user.",
    "method_messages.requestEncryption_param_user_id_type_InputUser": "User ID",
    "method_messages.requestEncryption_param_random_id_type_int": "Unique client request ID required to prevent resending. This also doubles as the chat ID.",
    "method_messages.requestEncryption_param_g_a_type_bytes": "`A = g ^ a mod p`, see [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange)",
    "method_auth.signUp": "Registers a validated phone number in the system.",
    "method_auth.signUp_param_phone_number_type_string": "Phone number in the international format",
    "method_auth.signUp_param_phone_code_hash_type_string": "SMS-message ID",
    "method_auth.signUp_param_first_name_type_string": "New user first name",
    "method_auth.signUp_param_last_name_type_string": "New user last name",
    "method_messages.getSavedGifs": "Get saved GIFs",
    "method_messages.getSavedGifs_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getInviteText": "Returns localized text of a text message with an invitation.",
    "method_help.getCdnConfig": "Get configuration for [CDN](https:\/\/core.telegram.org\/cdn) file downloads.",
    "method_stickers.renameStickerSet": "Renames a stickerset, bots only.",
    "method_stickers.renameStickerSet_param_stickerset_type_InputStickerSet": "Stickerset to rename",
    "method_stickers.renameStickerSet_param_title_type_string": "New stickerset title",
    "method_messages.deleteChatUser": "Deletes a user from a chat and sends a service message on it.",
    "method_messages.deleteChatUser_param_revoke_history_type_flags.0?true": "Remove the entire chat history of the specified user in this chat.",
    "method_messages.deleteChatUser_param_chat_id_type_long": "Chat ID",
    "method_messages.deleteChatUser_param_user_id_type_InputUser": "User ID to be deleted",
    "method_payments.getPaymentReceipt": "Get payment receipt",
    "method_payments.getPaymentReceipt_param_peer_type_InputPeer": "The peer where the payment receipt was sent",
    "method_payments.getPaymentReceipt_param_msg_id_type_int": "Message ID of receipt",
    "method_phone.leaveGroupCall": "Leave a group call",
    "method_phone.leaveGroupCall_param_call_type_InputGroupCall": "The group call",
    "method_phone.leaveGroupCall_param_source_type_int": "Your source ID",
    "method_messages.deletePhoneCallHistory": "Delete the entire phone call history.",
    "method_messages.deletePhoneCallHistory_param_revoke_type_flags.0?true": "Whether to remove phone call history for participants as well",
    "method_account.acceptAuthorization": "Sends a Telegram Passport authorization form, effectively sharing data with the service",
    "method_account.acceptAuthorization_param_bot_id_type_long": "Bot ID",
    "method_account.acceptAuthorization_param_scope_type_string": "Telegram Passport element types requested by the service",
    "method_account.acceptAuthorization_param_public_key_type_string": "Service's public key",
    "method_account.acceptAuthorization_param_value_hashes_type_Vector<SecureValueHash>": "Types of values sent and their hashes",
    "method_account.acceptAuthorization_param_credentials_type_SecureCredentialsEncrypted": "Encrypted values",
    "method_channels.getGroupsForDiscussion": "Get all groups that can be used as [discussion groups](https:\/\/core.telegram.org\/api\/discussion).\n\nReturned [basic group chats](https:\/\/core.telegram.org\/api\/channel#basic-groups) must be first upgraded to [supergroups](https:\/\/core.telegram.org\/api\/channel#supergroups) before they can be set as a discussion group.  \nTo set a returned supergroup as a discussion group, access to its old messages must be enabled using [channels.togglePreHistoryHidden](..\/methods\/channels.togglePreHistoryHidden.md), first.",
    "method_messages.hidePeerSettingsBar": "Should be called after the user hides the report spam\/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the [peer's settings](..\/constructors\/peerSettings.md).",
    "method_messages.hidePeerSettingsBar_param_peer_type_InputPeer": "Peer",
    "method_account.getPassword": "Obtain configuration for two-factor authorization with password",
    "method_messages.checkHistoryImport": "Obtains information about a chat export file, generated by a foreign chat app, [click here for more info about imported chats \u00bb](https:\/\/core.telegram.org\/api\/import).",
    "method_messages.checkHistoryImport_param_import_head_type_string": "Beginning of the message file; up to 100 lines.",
    "method_langpack.getLanguages": "Get information about all languages in a localization pack",
    "method_langpack.getLanguages_param_lang_pack_type_string": "Language pack",
    "method_folders.deleteFolder": "Delete a [peer folder](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_folders.deleteFolder_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_channels.viewSponsoredMessage": "Mark a specific sponsored message as read",
    "method_channels.viewSponsoredMessage_param_channel_type_InputChannel": "Peer",
    "method_channels.viewSponsoredMessage_param_random_id_type_bytes": "Message ID",
    "method_channels.toggleSignatures": "Enable\/disable message signatures in channels",
    "method_channels.toggleSignatures_param_channel_type_InputChannel": "Channel",
    "method_channels.toggleSignatures_param_enabled_type_Bool": "Value",
    "method_phone.toggleGroupCallSettings": "Change group call settings",
    "method_phone.toggleGroupCallSettings_param_reset_invite_hash_type_flags.1?true": "Invalidate existing invite links",
    "method_phone.toggleGroupCallSettings_param_call_type_InputGroupCall": "Group call",
    "method_phone.toggleGroupCallSettings_param_join_muted_type_flags.0?Bool": "Whether all users will that join this group call are muted by default upon joining the group call",
    "method_messages.getWebPagePreview": "Get preview of webpage",
    "method_messages.getWebPagePreview_param_message_type_string": "Message from which to extract the preview",
    "method_messages.getWebPagePreview_param_entities_type_flags.3?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "method_messages.getOnlines": "Get count of online users in a chat",
    "method_messages.getOnlines_param_peer_type_InputPeer": "The chat",
    "method_channels.convertToGigagroup": "Convert a [supergroup](https:\/\/core.telegram.org\/api\/channel) to a [gigagroup](https:\/\/core.telegram.org\/api\/channel), when requested by [channel suggestions](https:\/\/core.telegram.org\/api\/config#channel-suggestions).",
    "method_channels.convertToGigagroup_param_channel_type_InputChannel": "The [supergroup](https:\/\/core.telegram.org\/api\/channel) to convert",
    "method_phone.editGroupCallParticipant": "Edit information about a given group call participant\n\nNote: [flags](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields).N?[Bool](..\/types\/Bool.md) parameters can have three possible values:\n\n- If the [TL flag](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields) is not set, the previous value will not be changed.\n- If the [TL flag](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields) is set and contains a [boolTrue](..\/constructors\/boolTrue.md), the previous value will be overwritten to `true`.\n- If the [TL flag](https:\/\/core.telegram.org\/mtproto\/TL-combinators#conditional-fields) is set and contains a [boolFalse](..\/constructors\/boolFalse.md), the previous value will be overwritten to `false`.",
    "method_phone.editGroupCallParticipant_param_call_type_InputGroupCall": "The group call",
    "method_phone.editGroupCallParticipant_param_participant_type_InputPeer": "The group call participant (can also be the user itself)",
    "method_phone.editGroupCallParticipant_param_muted_type_flags.0?Bool": "Whether to mute or unmute the specified participant",
    "method_phone.editGroupCallParticipant_param_volume_type_flags.1?int": "New volume",
    "method_phone.editGroupCallParticipant_param_raise_hand_type_flags.2?Bool": "Raise or lower hand",
    "method_phone.editGroupCallParticipant_param_video_stopped_type_flags.3?Bool": "Start or stop the video stream",
    "method_phone.editGroupCallParticipant_param_video_paused_type_flags.4?Bool": "Pause or resume the video stream",
    "method_phone.editGroupCallParticipant_param_presentation_paused_type_flags.5?Bool": "Pause or resume the screen sharing stream",
    "method_contacts.resolvePhone": "Resolve a phone number to get user info, if their privacy settings allow it.",
    "method_contacts.resolvePhone_param_phone_type_string": "Phone number in international format, possibly obtained from a [phone number deep link](https:\/\/core.telegram.org\/api\/links#phone-number-links).",
    "method_channels.readHistory": "Mark [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) history as read",
    "method_channels.readHistory_param_channel_type_InputChannel": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.readHistory_param_max_id_type_int": "ID of message up to which messages should be marked as read",
    "method_auth.importBotAuthorization": "Login as a bot",
    "method_auth.importBotAuthorization_param_api_id_type_int": "Application identifier (see. [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.importBotAuthorization_param_api_hash_type_string": "Application identifier hash (see. [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.importBotAuthorization_param_bot_auth_token_type_string": "Bot token (see [bots](https:\/\/core.telegram.org\/bots))",
    "method_account.getDefaultEmojiStatuses": "Get a list of default suggested [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status)",
    "method_account.getDefaultEmojiStatuses_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_photos.getUserPhotos": "Returns the list of user photos.",
    "method_photos.getUserPhotos_param_user_id_type_InputUser": "User ID",
    "method_photos.getUserPhotos_param_offset_type_int": "Number of list elements to be skipped",
    "method_photos.getUserPhotos_param_max_id_type_long": "If a positive value was transferred, the method will return only photos with IDs less than the set one",
    "method_photos.getUserPhotos_param_limit_type_int": "Number of list elements to be returned",
    "method_messages.getDialogs": "Returns the current user dialog list.",
    "method_messages.getDialogs_param_exclude_pinned_type_flags.0?true": "Exclude pinned dialogs",
    "method_messages.getDialogs_param_folder_id_type_flags.1?int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_messages.getDialogs_param_offset_date_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getDialogs_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets) (`top_message` ID used for pagination)",
    "method_messages.getDialogs_param_offset_peer_type_InputPeer": "[Offset peer for pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getDialogs_param_limit_type_int": "Number of list elements to be returned",
    "method_messages.getDialogs_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_invokeAfterMsgs": "Invokes a query after a successful completion of previous queries",
    "method_invokeAfterMsgs_param_msg_ids_type_Vector<long>": "List of messages on which a current query depends",
    "method_invokeAfterMsgs_param_query_type_!X": "The query itself",
    "method_messages.uninstallStickerSet": "Uninstall a stickerset",
    "method_messages.uninstallStickerSet_param_stickerset_type_InputStickerSet": "The stickerset to uninstall",
    "method_account.resetWebAuthorizations": "Reset all active web [telegram login](https:\/\/core.telegram.org\/widgets\/login) sessions",
    "method_messages.getEmojiKeywords": "Get localized [emoji keywords \u00bb](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-keywords).",
    "method_messages.getEmojiKeywords_param_lang_code_type_string": "Language code",
    "method_messages.getDhConfig": "Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.",
    "method_messages.getDhConfig_param_version_type_int": "Value of the **version** parameter from [messages.dhConfig](..\/constructors\/messages.dhConfig.md), available at the client",
    "method_messages.getDhConfig_param_random_length_type_int": "Length of the required random sequence",
    "method_channels.getForumTopicsByID": "Get forum topics by their ID",
    "method_channels.getForumTopicsByID_param_channel_type_InputChannel": "Forum",
    "method_channels.getForumTopicsByID_param_topics_type_Vector<int>": "Topic IDs",
    "method_messages.sendEncrypted": "Sends a text message to a secret chat.",
    "method_messages.sendEncrypted_param_silent_type_flags.0?true": "Send encrypted message without a notification",
    "method_messages.sendEncrypted_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.sendEncrypted_param_random_id_type_long": "Unique client message ID, necessary to avoid message resending",
    "method_messages.sendEncrypted_param_data_type_bytes": "TL-serialization of [DecryptedMessage](..\/types\/DecryptedMessage.md) type, encrypted with a key that was created during chat initialization",
    "method_messages.reportSpam": "Report a new incoming chat for spam, if the [peer settings](..\/constructors\/peerSettings.md) of the chat allow us to do that",
    "method_messages.reportSpam_param_peer_type_InputPeer": "Peer to report",
    "method_auth.cancelCode": "Cancel the login verification code",
    "method_auth.cancelCode_param_phone_number_type_string": "Phone number",
    "method_auth.cancelCode_param_phone_code_hash_type_string": "Phone code hash from [auth.sendCode](..\/methods\/auth.sendCode.md)",
    "method_initConnection": "Initialize connection",
    "method_initConnection_param_api_id_type_int": "Application identifier (see. [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_initConnection_param_device_model_type_string": "Device model",
    "method_initConnection_param_system_version_type_string": "Operation system version",
    "method_initConnection_param_app_version_type_string": "Application version",
    "method_initConnection_param_system_lang_code_type_string": "Code for the language used on the device's OS, ISO 639-1 standard",
    "method_initConnection_param_lang_pack_type_string": "Language pack to use",
    "method_initConnection_param_lang_code_type_string": "Code for the language used on the client, ISO 639-1 standard",
    "method_initConnection_param_proxy_type_flags.0?InputClientProxy": "Info about an MTProto proxy",
    "method_initConnection_param_params_type_flags.1?JSONValue": "Additional initConnection parameters. <br>For now, only the `tz_offset` field is supported, for specifying timezone offset in seconds.",
    "method_initConnection_param_query_type_!X": "The query itself",
    "method_messages.requestUrlAuth": "Get more info about a Seamless Telegram Login authorization request, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/url-authorization)",
    "method_messages.requestUrlAuth_param_peer_type_flags.1?InputPeer": "Peer where the message is located",
    "method_messages.requestUrlAuth_param_msg_id_type_flags.1?int": "The message",
    "method_messages.requestUrlAuth_param_button_id_type_flags.1?int": "The ID of the button with the authorization request",
    "method_messages.requestUrlAuth_param_url_type_flags.2?string": "URL used for [link URL authorization, click here for more info \u00bb](https:\/\/core.telegram.org\/api\/url-authorization#link-url-authorization)",
    "method_messages.sendMedia": "Send a media",
    "method_messages.sendMedia_param_silent_type_flags.5?true": "Send message silently (no notification should be triggered)",
    "method_messages.sendMedia_param_background_type_flags.6?true": "Send message in background",
    "method_messages.sendMedia_param_clear_draft_type_flags.7?true": "Clear the draft",
    "method_messages.sendMedia_param_noforwards_type_flags.14?true": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) enabled",
    "method_messages.sendMedia_param_update_stickersets_order_type_flags.15?true": "Whether to move used stickersets to top, [see here for more info on this flag \u00bb](https:\/\/core.telegram.org\/api\/stickers#recent-stickersets)",
    "method_messages.sendMedia_param_peer_type_InputPeer": "Destination",
    "method_messages.sendMedia_param_reply_to_msg_id_type_flags.0?int": "Message ID to which this message should reply to",
    "method_messages.sendMedia_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.sendMedia_param_media_type_InputMedia": "Attached media",
    "method_messages.sendMedia_param_message_type_string": "Caption",
    "method_messages.sendMedia_param_random_id_type_long": "Random ID to avoid resending the same message",
    "method_messages.sendMedia_param_reply_markup_type_flags.2?ReplyMarkup": "Reply markup for bot keyboards",
    "method_messages.sendMedia_param_entities_type_flags.3?Vector<MessageEntity>": "Message [entities](https:\/\/core.telegram.org\/api\/entities) for styled text",
    "method_messages.sendMedia_param_schedule_date_type_flags.10?int": "Scheduled message date for [scheduled messages](https:\/\/core.telegram.org\/api\/scheduled-messages)",
    "method_messages.sendMedia_param_send_as_type_flags.13?InputPeer": "Send this message as the specified peer",
    "method_help.getRecentMeUrls": "Get recently used `t.me` links.\n\nWhen installing official applications from \"Download Telegram\" buttons present in [t.me](https:\/\/t.me) pages, a referral parameter is passed to applications after installation.  \nIf, after downloading the application, the user creates a new account (instead of logging into an existing one), the referral parameter should be imported using this method, which returns the [t.me](https:\/\/t.me) pages the user recently opened, before installing Telegram.",
    "method_help.getRecentMeUrls_param_referer_type_string": "Referrer",
    "method_account.resetNotifySettings": "Resets all notification settings from users and groups.",
    "method_contacts.resetTopPeerRating": "Reset [rating](https:\/\/core.telegram.org\/api\/top-rating) of top peer",
    "method_contacts.resetTopPeerRating_param_category_type_TopPeerCategory": "Top peer category",
    "method_contacts.resetTopPeerRating_param_peer_type_InputPeer": "Peer whose rating should be reset",
    "method_updates.getChannelDifference": "Returns the difference between the current state of updates of a certain channel and transmitted.",
    "method_updates.getChannelDifference_param_force_type_flags.0?true": "Set to true to skip some possibly unneeded updates and reduce server-side load",
    "method_updates.getChannelDifference_param_channel_type_InputChannel": "The channel",
    "method_updates.getChannelDifference_param_filter_type_ChannelMessagesFilter": "Messsage filter",
    "method_updates.getChannelDifference_param_pts_type_int": "Persistent timestamp (see [updates](https:\/\/core.telegram.org\/api\/updates))",
    "method_updates.getChannelDifference_param_limit_type_int": "How many updates to fetch, max `100000`<br>Ordinary (non-bot) users are supposed to pass `10-100`",
    "method_messages.uploadMedia": "Upload a file and associate it to a chat (without actually sending it to the chat)",
    "method_messages.uploadMedia_param_peer_type_InputPeer": "The chat, can be [inputPeerEmpty](..\/constructors\/inputPeerEmpty.md) for bots and [inputPeerSelf](..\/constructors\/inputPeerSelf.md) for users.",
    "method_messages.uploadMedia_param_media_type_InputMedia": "File uploaded in chunks as described in [files \u00bb](https:\/\/core.telegram.org\/api\/files)",
    "method_messages.getSplitRanges": "Get message ranges for saving the user's chat history",
    "method_channels.createChannel": "Create a [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_channels.createChannel_param_broadcast_type_flags.0?true": "Whether to create a [channel](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.createChannel_param_megagroup_type_flags.1?true": "Whether to create a [supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.createChannel_param_for_import_type_flags.3?true": "Whether the supergroup is being created to import messages from a foreign chat service using [messages.initHistoryImport](..\/methods\/messages.initHistoryImport.md)",
    "method_channels.createChannel_param_forum_type_flags.5?true": "Whether to create a [forum](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.createChannel_param_title_type_string": "Channel title",
    "method_channels.createChannel_param_about_type_string": "Channel description",
    "method_channels.createChannel_param_geo_point_type_flags.2?InputGeoPoint": "Geogroup location",
    "method_channels.createChannel_param_address_type_flags.2?string": "Geogroup address",
    "method_channels.createChannel_param_ttl_period_type_flags.4?int": "Time-to-live of all messages that will be sent in the supergroup: once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use [messages.setDefaultHistoryTTL](..\/methods\/messages.setDefaultHistoryTTL.md) to edit this value later.",
    "method_auth.dropTempAuthKeys": "Delete all temporary authorization keys **except for** the ones specified",
    "method_auth.dropTempAuthKeys_param_except_auth_keys_type_Vector<long>": "The auth keys that **shouldn't** be dropped.",
    "method_messages.startBot": "Start a conversation with a bot using a [deep linking parameter](https:\/\/core.telegram.org\/api\/links#bot-links)",
    "method_messages.startBot_param_bot_type_InputUser": "The bot",
    "method_messages.startBot_param_peer_type_InputPeer": "The chat where to start the bot, can be the bot's private chat or a group",
    "method_messages.startBot_param_random_id_type_long": "Random ID to avoid resending the same message",
    "method_messages.startBot_param_start_param_type_string": "[Deep linking parameter](https:\/\/core.telegram.org\/api\/links#bot-links)",
    "method_channels.toggleJoinRequest": "Set whether all users should [request admin approval to join the group \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests).",
    "method_channels.toggleJoinRequest_param_channel_type_InputChannel": "Group",
    "method_channels.toggleJoinRequest_param_enabled_type_Bool": "Toggle",
    "method_messages.editChatAbout": "Edit the description of a [group\/supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_messages.editChatAbout_param_peer_type_InputPeer": "The [group\/supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_messages.editChatAbout_param_about_type_string": "The new description",
    "method_account.saveSecureValue": "Securely save [Telegram Passport](https:\/\/core.telegram.org\/passport) document, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_account.saveSecureValue_param_value_type_InputSecureValue": "Secure value, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_account.saveSecureValue_param_secure_secret_id_type_long": "Passport secret hash, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_chatlists.deleteExportedInvite": "Delete a previously created [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.deleteExportedInvite_param_chatlist_type_InputChatlist": "The related folder",
    "method_chatlists.deleteExportedInvite_param_slug_type_string": "`slug` obtained from the [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_phone.setCallRating": "Rate a call, returns info about the rating message sent to the official VoIP bot.",
    "method_phone.setCallRating_param_user_initiative_type_flags.0?true": "Whether the user decided on their own initiative to rate the call",
    "method_phone.setCallRating_param_peer_type_InputPhoneCall": "The call to rate",
    "method_phone.setCallRating_param_rating_type_int": "Rating in `1-5` stars",
    "method_phone.setCallRating_param_comment_type_string": "An additional comment",
    "method_account.getTmpPassword": "Get temporary payment password",
    "method_account.getTmpPassword_param_password_type_InputCheckPasswordSRP": "SRP password parameters",
    "method_account.getTmpPassword_param_period_type_int": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400",
    "method_help.acceptTermsOfService": "Accept the new terms of service",
    "method_help.acceptTermsOfService_param_id_type_DataJSON": "ID of terms of service",
    "method_account.getRecentEmojiStatuses": "Get recently used [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status)",
    "method_account.getRecentEmojiStatuses_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.search": "Returns found messages",
    "method_messages.search_param_peer_type_InputPeer": "User or chat, histories with which are searched, or [(inputPeerEmpty)](..\/constructors\/inputPeerEmpty.md) constructor for global search",
    "method_messages.search_param_q_type_string": "Text search request",
    "method_messages.search_param_from_id_type_flags.0?InputPeer": "Only return messages sent by the specified user ID",
    "method_messages.search_param_top_msg_id_type_flags.1?int": "[Thread ID](https:\/\/core.telegram.org\/api\/threads)",
    "method_messages.search_param_filter_type_MessagesFilter": "Filter to return only specified message types",
    "method_messages.search_param_min_date_type_int": "If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned",
    "method_messages.search_param_max_date_type_int": "If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned",
    "method_messages.search_param_offset_id_type_int": "Only return messages starting from the specified message ID",
    "method_messages.search_param_add_offset_type_int": "[Additional offset](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.search_param_limit_type_int": "[Number of results to return](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.search_param_max_id_type_int": "[Maximum message ID to return](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.search_param_min_id_type_int": "[Minimum message ID to return](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.search_param_hash_type_long": "[Hash](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getMessageEditData": "Find out if a media message's caption can be edited",
    "method_messages.getMessageEditData_param_peer_type_InputPeer": "Peer where the media was sent",
    "method_messages.getMessageEditData_param_id_type_int": "ID of message",
    "method_account.uploadWallPaper": "Create and upload a new [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "method_account.uploadWallPaper_param_for_chat_type_flags.0?true": "Set this flag when uploading wallpapers to be passed to [messages.setChatWallPaper](..\/methods\/messages.setChatWallPaper.md).",
    "method_account.uploadWallPaper_param_file_type_InputFile": "The JPG\/PNG wallpaper",
    "method_account.uploadWallPaper_param_mime_type_type_string": "MIME type of uploaded wallpaper",
    "method_account.uploadWallPaper_param_settings_type_WallPaperSettings": "Wallpaper settings",
    "method_contacts.getTopPeers": "Get most used peers",
    "method_contacts.getTopPeers_param_correspondents_type_flags.0?true": "Users we've chatted most frequently with",
    "method_contacts.getTopPeers_param_bots_pm_type_flags.1?true": "Most used bots",
    "method_contacts.getTopPeers_param_bots_inline_type_flags.2?true": "Most used inline bots",
    "method_contacts.getTopPeers_param_phone_calls_type_flags.3?true": "Most frequently called users",
    "method_contacts.getTopPeers_param_forward_users_type_flags.4?true": "Users to which the users often forwards messages to",
    "method_contacts.getTopPeers_param_forward_chats_type_flags.5?true": "Chats to which the users often forwards messages to",
    "method_contacts.getTopPeers_param_groups_type_flags.10?true": "Often-opened groups and supergroups",
    "method_contacts.getTopPeers_param_channels_type_flags.15?true": "Most frequently visited channels",
    "method_contacts.getTopPeers_param_offset_type_int": "Offset for [pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_contacts.getTopPeers_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_contacts.getTopPeers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getAppConfig": "Get app-specific configuration, see [client configuration](https:\/\/core.telegram.org\/api\/config#client-configuration) for more info on the result.",
    "method_help.getAppConfig_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.setBotUpdatesStatus": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
    "method_help.setBotUpdatesStatus_param_pending_updates_count_type_int": "Number of pending updates",
    "method_help.setBotUpdatesStatus_param_message_type_string": "Error message, if present",
    "method_channels.createForumTopic": "Create a [forum topic](https:\/\/core.telegram.org\/api\/forum); requires [`manage_topics` rights](https:\/\/core.telegram.org\/api\/rights).",
    "method_channels.createForumTopic_param_channel_type_InputChannel": "[The forum](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.createForumTopic_param_title_type_string": "Topic title (maximum UTF-8 length: 128)",
    "method_channels.createForumTopic_param_icon_color_type_flags.0?int": "If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`.",
    "method_channels.createForumTopic_param_icon_emoji_id_type_flags.3?long": "ID of the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) used as topic icon. [Telegram Premium](https:\/\/core.telegram.org\/api\/premium) users can use any custom emoji, other users can only use the custom emojis contained in the [inputStickerSetEmojiDefaultTopicIcons](..\/constructors\/inputStickerSetEmojiDefaultTopicIcons.md) emoji pack.",
    "method_channels.createForumTopic_param_random_id_type_long": "Unique client message ID to prevent duplicate sending of the same event",
    "method_channels.createForumTopic_param_send_as_type_flags.2?InputPeer": "Create the topic as the specified peer",
    "method_account.deleteAccount": "Delete the user's account from the telegram servers.\n\nCan also be used to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured, see [here \u00bb](https:\/\/core.telegram.org\/api\/srp#password-recovery) for more info on password recovery, and [here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion) for more info on account deletion.",
    "method_account.deleteAccount_param_reason_type_string": "Why is the account being deleted, can be empty",
    "method_account.deleteAccount_param_password_type_flags.0?InputCheckPasswordSRP": "[2FA password](https:\/\/core.telegram.org\/api\/srp): this field can be omitted even for accounts with 2FA enabled: in this case account account deletion will be delayed by 7 days [as specified in the docs \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_stickers.addStickerToSet": "Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.",
    "method_stickers.addStickerToSet_param_stickerset_type_InputStickerSet": "The stickerset",
    "method_stickers.addStickerToSet_param_sticker_type_InputStickerSetItem": "The sticker",
    "method_account.reportProfilePhoto": "Report a profile photo of a dialog",
    "method_account.reportProfilePhoto_param_peer_type_InputPeer": "The dialog",
    "method_account.reportProfilePhoto_param_photo_id_type_InputPhoto": "Dialog photo ID",
    "method_account.reportProfilePhoto_param_reason_type_ReportReason": "Report reason",
    "method_account.reportProfilePhoto_param_message_type_string": "Comment for report moderation",
    "method_messages.getEmojiStickers": "Gets the list of currently installed [custom emoji stickersets](https:\/\/core.telegram.org\/api\/custom-emoji).",
    "method_messages.getEmojiStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.deleteExportedChatInvite": "Delete a chat invite",
    "method_messages.deleteExportedChatInvite_param_peer_type_InputPeer": "Peer",
    "method_messages.deleteExportedChatInvite_param_link_type_string": "Invite link",
    "method_messages.setDefaultHistoryTTL": "Changes the default value of the Time-To-Live setting, applied to all new chats.",
    "method_messages.setDefaultHistoryTTL_param_period_type_int": "The new default Time-To-Live of all messages sent in new chats.",
    "method_messages.exportChatInvite": "Export an invite link for a chat",
    "method_messages.exportChatInvite_param_legacy_revoke_permanent_type_flags.2?true": "Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients.",
    "method_messages.exportChatInvite_param_request_needed_type_flags.3?true": "Whether admin confirmation is required before admitting each separate user into the chat",
    "method_messages.exportChatInvite_param_peer_type_InputPeer": "Chat",
    "method_messages.exportChatInvite_param_expire_date_type_flags.0?int": "Expiration date",
    "method_messages.exportChatInvite_param_usage_limit_type_flags.1?int": "Maximum number of users that can join using this link",
    "method_messages.exportChatInvite_param_title_type_flags.4?string": "Description of the invite link, visible only to administrators",
    "method_langpack.getStrings": "Get strings from a language pack",
    "method_langpack.getStrings_param_lang_pack_type_string": "Language pack name, usually obtained from a [language pack link](https:\/\/core.telegram.org\/api\/links#language-pack-links)",
    "method_langpack.getStrings_param_lang_code_type_string": "Language code",
    "method_langpack.getStrings_param_keys_type_Vector<string>": "Strings to get",
    "method_contacts.toggleTopPeers": "Enable\/disable [top peers](https:\/\/core.telegram.org\/api\/top-rating)",
    "method_contacts.toggleTopPeers_param_enabled_type_Bool": "Enable\/disable",
    "method_account.verifyPhone": "Verify a phone number for telegram [passport](https:\/\/core.telegram.org\/passport).",
    "method_account.verifyPhone_param_phone_number_type_string": "Phone number",
    "method_account.verifyPhone_param_phone_code_hash_type_string": "Phone code hash received from the call to [account.sendVerifyPhoneCode](..\/methods\/account.sendVerifyPhoneCode.md)",
    "method_account.verifyPhone_param_phone_code_type_string": "Code received after the call to [account.sendVerifyPhoneCode](..\/methods\/account.sendVerifyPhoneCode.md)",
    "method_auth.exportLoginToken": "Generate a login token, for [login via QR code](https:\/\/core.telegram.org\/api\/qr-login).  \nThe generated login token should be encoded using base64url, then shown as a `tg:\/\/login?token=base64encodedtoken` [deep link \u00bb](https:\/\/core.telegram.org\/api\/links#qr-code-login-links) in the QR code.\n\nFor more info, see [login via QR code](https:\/\/core.telegram.org\/api\/qr-login).",
    "method_auth.exportLoginToken_param_api_id_type_int": "Application identifier (see. [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.exportLoginToken_param_api_hash_type_string": "Application identifier hash (see. [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.exportLoginToken_param_except_ids_type_Vector<long>": "List of already logged-in user IDs, to prevent logging in twice with the same user",
    "method_messages.getAvailableReactions": "Obtain available [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.getAvailableReactions_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_photos.uploadContactProfilePhoto": "Upload a custom profile picture for a contact, or suggest a new profile picture to a contact.\n\nThe `file`, `video` and `video_emoji_markup` flags are mutually exclusive.",
    "method_photos.uploadContactProfilePhoto_param_suggest_type_flags.3?true": "If set, will send a [messageActionSuggestProfilePhoto](..\/constructors\/messageActionSuggestProfilePhoto.md) service message to `user_id`, suggesting them to use the specified profile picture; otherwise, will set a personal profile picture for the user (only visible to the current user).",
    "method_photos.uploadContactProfilePhoto_param_save_type_flags.4?true": "If set, removes a previously set personal profile picture (does not affect suggested profile pictures, to remove them simply deleted the [messageActionSuggestProfilePhoto](..\/constructors\/messageActionSuggestProfilePhoto.md) service message with [messages.deleteMessages](..\/methods\/messages.deleteMessages.md)).",
    "method_photos.uploadContactProfilePhoto_param_user_id_type_InputUser": "The contact",
    "method_photos.uploadContactProfilePhoto_param_file_type_flags.0?InputFile": "Profile photo",
    "method_photos.uploadContactProfilePhoto_param_video_type_flags.1?InputFile": "[Animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) video",
    "method_photos.uploadContactProfilePhoto_param_video_start_ts_type_flags.2?double": "Floating point UNIX timestamp in seconds, indicating the frame of the video\/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set.",
    "method_photos.uploadContactProfilePhoto_param_video_emoji_markup_type_flags.5?VideoSize": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](..\/constructors\/videoSizeEmojiMarkup.md) or a [videoSizeStickerMarkup](..\/constructors\/videoSizeStickerMarkup.md) constructor.",
    "method_messages.editChatDefaultBannedRights": "Edit the default banned rights of a [channel\/supergroup\/group](https:\/\/core.telegram.org\/api\/channel).",
    "method_messages.editChatDefaultBannedRights_param_peer_type_InputPeer": "The peer",
    "method_messages.editChatDefaultBannedRights_param_banned_rights_type_ChatBannedRights": "The new global rights",
    "method_messages.getPollVotes": "Get poll results for non-anonymous polls",
    "method_messages.getPollVotes_param_peer_type_InputPeer": "Chat where the poll was sent",
    "method_messages.getPollVotes_param_id_type_int": "Message ID",
    "method_messages.getPollVotes_param_option_type_flags.0?bytes": "Get only results for the specified poll `option`",
    "method_messages.getPollVotes_param_offset_type_flags.1?string": "Offset for results, taken from the `next_offset` field of [messages.votesList](..\/constructors\/messages.votesList.md), initially an empty string. <br>Note: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [messages.votesList](..\/constructors\/messages.votesList.md) if it is empty, to avoid an infinite loop.",
    "method_messages.getPollVotes_param_limit_type_int": "Number of results to return",
    "method_messages.getDiscussionMessage": "Get [discussion message](https:\/\/core.telegram.org\/api\/threads) from the [associated discussion group](https:\/\/core.telegram.org\/api\/discussion) of a channel to show it on top of the comment section, without actually joining the group",
    "method_messages.getDiscussionMessage_param_peer_type_InputPeer": "[Channel ID](https:\/\/core.telegram.org\/api\/channel)",
    "method_messages.getDiscussionMessage_param_msg_id_type_int": "Message ID",
    "method_phone.inviteToGroupCall": "Invite a set of users to a group call.",
    "method_phone.inviteToGroupCall_param_call_type_InputGroupCall": "The group call",
    "method_phone.inviteToGroupCall_param_users_type_Vector<InputUser>": "The users to invite.",
    "method_channels.checkUsername": "Check if a username is free and can be assigned to a channel\/supergroup",
    "method_channels.checkUsername_param_channel_type_InputChannel": "The [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) that will assigned the specified username",
    "method_channels.checkUsername_param_username_type_string": "The username to check",
    "method_messages.uploadEncryptedFile": "Upload encrypted file and associate it to a secret chat",
    "method_messages.uploadEncryptedFile_param_peer_type_InputEncryptedChat": "The secret chat to associate the file to",
    "method_messages.uploadEncryptedFile_param_file_type_InputEncryptedFile": "The file",
    "method_account.checkUsername": "Validates a username and checks availability.",
    "method_account.checkUsername_param_username_type_string": "username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.",
    "method_invokeAfterMsg": "Invokes a query after successful completion of one of the previous queries.",
    "method_invokeAfterMsg_param_msg_id_type_long": "Message identifier on which a current query depends",
    "method_invokeAfterMsg_param_query_type_!X": "The query itself",
    "method_account.setContentSettings": "Set sensitive content settings (for viewing or hiding NSFW content)",
    "method_account.setContentSettings_param_sensitive_enabled_type_flags.0?true": "Enable NSFW content",
    "method_messages.getRecentStickers": "Get recent stickers",
    "method_messages.getRecentStickers_param_attached_type_flags.0?true": "Get stickers recently attached to photo or video files",
    "method_messages.getRecentStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.setInlineBotResults": "Answer an inline query, for bots only",
    "method_messages.setInlineBotResults_param_gallery_type_flags.0?true": "Set this flag if the results are composed of media files",
    "method_messages.setInlineBotResults_param_private_type_flags.1?true": "Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query",
    "method_messages.setInlineBotResults_param_query_id_type_long": "Unique identifier for the answered query",
    "method_messages.setInlineBotResults_param_results_type_Vector<InputBotInlineResult>": "Vector of results for the inline query",
    "method_messages.setInlineBotResults_param_cache_time_type_int": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.",
    "method_messages.setInlineBotResults_param_next_offset_type_flags.2?string": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.",
    "method_messages.setInlineBotResults_param_switch_pm_type_flags.3?InlineBotSwitchPM": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.",
    "method_messages.setInlineBotResults_param_switch_webview_type_flags.4?InlineBotWebView": "If passed, clients will display a button on top of the remaining inline result list with the specified text, that switches the user to the specified [bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#simple-web-apps).",
    "method_stickers.changeStickerPosition": "Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
    "method_stickers.changeStickerPosition_param_sticker_type_InputDocument": "The sticker",
    "method_stickers.changeStickerPosition_param_position_type_int": "The new position of the sticker, zero-based",
    "method_messages.getWebPage": "Get [instant view](https:\/\/instantview.telegram.org) page",
    "method_messages.getWebPage_param_url_type_string": "URL of IV page to fetch",
    "method_messages.getWebPage_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getUserInfo": "Can only be used by TSF members to obtain internal information.",
    "method_help.getUserInfo_param_user_id_type_InputUser": "User ID",
    "method_stats.getBroadcastStats": "Get [channel statistics](https:\/\/core.telegram.org\/api\/stats)",
    "method_stats.getBroadcastStats_param_dark_type_flags.0?true": "Whether to enable dark theme for graph colors",
    "method_stats.getBroadcastStats_param_channel_type_InputChannel": "The channel",
    "method_payments.getSavedInfo": "Get saved payment information",
    "method_account.saveAutoDownloadSettings": "Change media autodownload settings",
    "method_account.saveAutoDownloadSettings_param_low_type_flags.0?true": "Whether to save media in the low data usage preset",
    "method_account.saveAutoDownloadSettings_param_high_type_flags.1?true": "Whether to save media in the high data usage preset",
    "method_account.saveAutoDownloadSettings_param_settings_type_AutoDownloadSettings": "Media autodownload settings",
    "method_channels.editForumTopic": "Edit [forum topic](https:\/\/core.telegram.org\/api\/forum); requires [`manage_topics` rights](https:\/\/core.telegram.org\/api\/rights).",
    "method_channels.editForumTopic_param_channel_type_InputChannel": "Supergroup",
    "method_channels.editForumTopic_param_topic_id_type_int": "Topic ID",
    "method_channels.editForumTopic_param_title_type_flags.0?string": "If present, will update the topic title (maximum UTF-8 length: 128).",
    "method_channels.editForumTopic_param_icon_emoji_id_type_flags.1?long": "If present, updates the [custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) used as topic icon. [Telegram Premium](https:\/\/core.telegram.org\/api\/premium) users can use any custom emoji, other users can only use the custom emojis contained in the [inputStickerSetEmojiDefaultTopicIcons](..\/constructors\/inputStickerSetEmojiDefaultTopicIcons.md) emoji pack. Pass 0 to switch to the fallback topic icon.",
    "method_channels.editForumTopic_param_closed_type_flags.2?Bool": "If present, will update the open\/closed status of the topic.",
    "method_channels.editForumTopic_param_hidden_type_flags.3?Bool": "If present, will hide\/unhide the topic (only valid for the \"General\" topic, `id=1`).",
    "method_account.resetWebAuthorization": "Log out an active web [telegram login](https:\/\/core.telegram.org\/widgets\/login) session",
    "method_account.resetWebAuthorization_param_hash_type_long": "[Session](..\/constructors\/webAuthorization.md) hash",
    "method_messages.getMessages": "Returns the list of messages by their IDs.",
    "method_messages.getMessages_param_id_type_Vector<InputMessage>": "Message ID list",
    "method_messages.getExtendedMedia": "Get information about extended media",
    "method_messages.getExtendedMedia_param_peer_type_InputPeer": "Peer",
    "method_messages.getExtendedMedia_param_id_type_Vector<int>": "Message IDs",
    "method_messages.getAllStickers": "Get all installed stickers",
    "method_messages.getAllStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getAllDrafts": "Return all message [drafts](https:\/\/core.telegram.org\/api\/drafts).  \nReturns all the latest [updateDraftMessage](..\/constructors\/updateDraftMessage.md) updates related to all chats with drafts.",
    "method_messages.getFeaturedEmojiStickers": "Gets featured custom emoji stickersets.",
    "method_messages.getFeaturedEmojiStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.getContentSettings": "Get sensitive content settings",
    "method_messages.setBotCallbackAnswer": "Set the callback answer to a user button press (bots only)",
    "method_messages.setBotCallbackAnswer_param_alert_type_flags.1?true": "Whether to show the message as a popup instead of a toast notification",
    "method_messages.setBotCallbackAnswer_param_query_id_type_long": "Query ID",
    "method_messages.setBotCallbackAnswer_param_message_type_flags.0?string": "Popup to show",
    "method_messages.setBotCallbackAnswer_param_url_type_flags.2?string": "URL to open",
    "method_messages.setBotCallbackAnswer_param_cache_time_type_int": "Cache validity",
    "method_contacts.block": "Adds the user to the blacklist.",
    "method_contacts.block_param_id_type_InputPeer": "User ID",
    "method_contacts.acceptContact": "If the [peer settings](..\/constructors\/peerSettings.md) of a new user allow us to add them as contact, add that user as contact",
    "method_contacts.acceptContact_param_id_type_InputUser": "The user to add as contact",
    "method_messages.deleteScheduledMessages": "Delete scheduled messages",
    "method_messages.deleteScheduledMessages_param_peer_type_InputPeer": "Peer",
    "method_messages.deleteScheduledMessages_param_id_type_Vector<int>": "Scheduled message IDs",
    "method_messages.getChats": "Returns chat basic info on their IDs.",
    "method_messages.getChats_param_id_type_Vector<long>": "List of chat IDs",
    "method_messages.toggleBotInAttachMenu": "Enable or disable [web bot attachment menu \u00bb](https:\/\/core.telegram.org\/api\/bots\/attach)",
    "method_messages.toggleBotInAttachMenu_param_write_allowed_type_flags.0?true": "Whether the user authorizes the bot to write messages to them, if requested by [attachMenuBot](..\/constructors\/attachMenuBot.md).`request_write_access`",
    "method_messages.toggleBotInAttachMenu_param_bot_type_InputUser": "Bot ID",
    "method_messages.toggleBotInAttachMenu_param_enabled_type_Bool": "Toggle",
    "method_channels.toggleAntiSpam": "Enable or disable the [native antispam system](https:\/\/core.telegram.org\/api\/antispam).",
    "method_channels.toggleAntiSpam_param_channel_type_InputChannel": "Supergroup ID. The specified supergroup must have at least `telegram_antispam_group_size_min` members to enable antispam functionality, as specified by the [client configuration parameters](https:\/\/core.telegram.org\/api\/config#client-configuration).",
    "method_channels.toggleAntiSpam_param_enabled_type_Bool": "Enable or disable the native antispam system.",
    "method_messages.requestWebView": "Open a [bot web app](https:\/\/core.telegram.org\/bots\/webapps), sending over user information after user confirmation.\n\nAfter calling this method, until the user closes the webview, [messages.prolongWebView](..\/methods\/messages.prolongWebView.md) must be called every 60 seconds.",
    "method_messages.requestWebView_param_from_bot_menu_type_flags.4?true": "Whether the webview was opened by clicking on the bot's [menu button \u00bb](https:\/\/core.telegram.org\/api\/bots\/menu).",
    "method_messages.requestWebView_param_silent_type_flags.5?true": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](..\/methods\/messages.sendWebViewResultMessage.md) should be sent silently (no notifications for the receivers).",
    "method_messages.requestWebView_param_peer_type_InputPeer": "Dialog where the web app is being opened, and where the resulting message will be sent (see the [docs for more info \u00bb](https:\/\/core.telegram.org\/api\/bots\/webapps)).",
    "method_messages.requestWebView_param_bot_type_InputUser": "Bot that owns the [web app](https:\/\/core.telegram.org\/api\/bots\/webapps)",
    "method_messages.requestWebView_param_url_type_flags.1?string": "[Web app URL](https:\/\/core.telegram.org\/api\/bots\/webapps)",
    "method_messages.requestWebView_param_start_param_type_flags.3?string": "If the web app was opened from the attachment menu using a [attachment menu deep link](https:\/\/core.telegram.org\/api\/links#bot-attachment-menu-links), `start_param` should contain the `data` from the `startattach` parameter.",
    "method_messages.requestWebView_param_theme_params_type_flags.2?DataJSON": "[Theme parameters \u00bb](https:\/\/core.telegram.org\/api\/bots\/webapps#theme-parameters)",
    "method_messages.requestWebView_param_platform_type_string": "Short name of the application; 0-64 English letters, digits, and underscores",
    "method_messages.requestWebView_param_reply_to_msg_id_type_flags.0?int": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](..\/methods\/messages.sendWebViewResultMessage.md) should be sent in reply to this message ID.",
    "method_messages.requestWebView_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.requestWebView_param_send_as_type_flags.13?InputPeer": "Open the web app as the specified peer, sending the resulting the message as the specified peer.",
    "method_bots.setBotMenuButton": "Sets the [menu button action \u00bb](https:\/\/core.telegram.org\/api\/bots\/menu) for a given user or for all users",
    "method_bots.setBotMenuButton_param_user_id_type_InputUser": "User ID",
    "method_bots.setBotMenuButton_param_button_type_BotMenuButton": "Bot menu button action",
    "method_messages.saveDefaultSendAs": "Change the default peer that should be used when sending messages to a specific group",
    "method_messages.saveDefaultSendAs_param_peer_type_InputPeer": "Group",
    "method_messages.saveDefaultSendAs_param_send_as_type_InputPeer": "The default peer that should be used when sending messages to the group",
    "method_account.getAllSecureValues": "Get all saved [Telegram Passport](https:\/\/core.telegram.org\/passport) documents, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_stickers.removeStickerFromSet": "Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.",
    "method_stickers.removeStickerFromSet_param_sticker_type_InputDocument": "The sticker to remove",
    "method_messages.clearRecentReactions": "Clear recently used [message reactions](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.readDiscussion": "Mark a [thread](https:\/\/core.telegram.org\/api\/threads) as read",
    "method_messages.readDiscussion_param_peer_type_InputPeer": "Group ID",
    "method_messages.readDiscussion_param_msg_id_type_int": "ID of message that started the thread",
    "method_messages.readDiscussion_param_read_max_id_type_int": "ID up to which thread messages were read",
    "method_messages.requestAppWebView": "Open a [bot web app](https:\/\/core.telegram.org\/bots\/webapps) from a [named bot web app deep link](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links), sending over user information after user confirmation.\n\nAfter calling this method, until the user closes the webview, [messages.prolongWebView](..\/methods\/messages.prolongWebView.md) must be called every 60 seconds.",
    "method_messages.requestAppWebView_param_write_allowed_type_flags.0?true": "Set this flag if the bot is asking permission to send messages to the user as specified in the [named bot web app deep link](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links) docs, and the user agreed.",
    "method_messages.requestAppWebView_param_peer_type_InputPeer": "If the client has clicked on the link in a Telegram chat, pass the chat's peer information; otherwise pass the bot's peer information, instead.",
    "method_messages.requestAppWebView_param_app_type_InputBotApp": "The app obtained by invoking [messages.getBotApp](..\/methods\/messages.getBotApp.md) as specified in the [named bot web app deep link](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links) docs.",
    "method_messages.requestAppWebView_param_start_param_type_flags.1?string": "If the `startapp` query string parameter is present in the [named bot web app deep link](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links), pass it to `start_param`.",
    "method_messages.requestAppWebView_param_theme_params_type_flags.2?DataJSON": "[Theme parameters \u00bb](https:\/\/core.telegram.org\/api\/bots\/webapps#theme-parameters)",
    "method_messages.requestAppWebView_param_platform_type_string": "Short name of the application; 0-64 English letters, digits, and underscores",
    "method_phone.requestCall": "Start a telegram phone call",
    "method_phone.requestCall_param_video_type_flags.0?true": "Whether to start a video call",
    "method_phone.requestCall_param_user_id_type_InputUser": "Destination of the phone call",
    "method_phone.requestCall_param_random_id_type_int": "Random ID to avoid resending the same object",
    "method_phone.requestCall_param_g_a_hash_type_bytes": "[Parameter for E2E encryption key exchange \u00bb](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "method_phone.requestCall_param_protocol_type_PhoneCallProtocol": "Phone call settings",
    "method_messages.getUnreadMentions": "Get unread messages where we were mentioned",
    "method_messages.getUnreadMentions_param_peer_type_InputPeer": "Peer where to look for mentions",
    "method_messages.getUnreadMentions_param_top_msg_id_type_flags.0?int": "If set, considers only messages within the specified [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_messages.getUnreadMentions_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadMentions_param_add_offset_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadMentions_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadMentions_param_max_id_type_int": "Maximum message ID to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadMentions_param_min_id_type_int": "Minimum message ID to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_phone.saveCallDebug": "Send phone call debug data to server",
    "method_phone.saveCallDebug_param_peer_type_InputPhoneCall": "Phone call",
    "method_phone.saveCallDebug_param_debug_type_DataJSON": "Debug statistics obtained from libtgvoip",
    "method_upload.saveFilePart": "Saves a part of file for further sending to one of the methods.",
    "method_upload.saveFilePart_param_file_id_type_long": "Random file identifier created by the client",
    "method_upload.saveFilePart_param_file_part_type_int": "Numerical order of a part",
    "method_upload.saveFilePart_param_bytes_type_bytes": "Binary data, content of a part",
    "method_messages.getChatInviteImporters": "Get info about the users that joined the chat using a specific chat invite",
    "method_messages.getChatInviteImporters_param_requested_type_flags.0?true": "If set, only returns info about users with pending [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "method_messages.getChatInviteImporters_param_peer_type_InputPeer": "Chat",
    "method_messages.getChatInviteImporters_param_link_type_flags.1?string": "Invite link",
    "method_messages.getChatInviteImporters_param_q_type_flags.2?string": "Search for a user in the pending [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) list: only available when the `requested` flag is set, cannot be used together with a specific `link`.",
    "method_messages.getChatInviteImporters_param_offset_date_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getChatInviteImporters_param_offset_user_type_InputUser": "User ID for [pagination](https:\/\/core.telegram.org\/api\/offsets): if set, `offset_date`  **must also be set**.",
    "method_messages.getChatInviteImporters_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.markDialogUnread": "Manually mark dialog as unread",
    "method_messages.markDialogUnread_param_unread_type_flags.0?true": "Mark as unread\/read",
    "method_messages.markDialogUnread_param_peer_type_InputDialogPeer": "Dialog",
    "method_invokeWithoutUpdates": "Invoke a request without subscribing the used connection for [updates](https:\/\/core.telegram.org\/api\/updates) (this is enabled by default for [file queries](https:\/\/core.telegram.org\/api\/files)).",
    "method_invokeWithoutUpdates_param_query_type_!X": "The query",
    "method_account.sendChangePhoneCode": "Verify a new phone number to associate to the current account",
    "method_account.sendChangePhoneCode_param_phone_number_type_string": "New phone number",
    "method_account.sendChangePhoneCode_param_settings_type_CodeSettings": "Phone code settings",
    "method_help.getNearestDc": "Returns info on data center nearest to the user.",
    "method_messages.addChatUser": "Adds a user to a chat and sends a service message on it.\n\nMay also return 0-N updates of type [updateGroupInvitePrivacyForbidden](..\/constructors\/updateGroupInvitePrivacyForbidden.md): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https:\/\/core.telegram.org\/api\/invites) can be shared with the user, instead.",
    "method_messages.addChatUser_param_chat_id_type_long": "Chat ID",
    "method_messages.addChatUser_param_user_id_type_InputUser": "User ID to be added",
    "method_messages.addChatUser_param_fwd_limit_type_int": "Number of last messages to be forwarded",
    "method_messages.reportEncryptedSpam": "Report a secret chat for spam",
    "method_messages.reportEncryptedSpam_param_peer_type_InputEncryptedChat": "The secret chat to report",
    "method_messages.getStickerSet": "Get info about a stickerset",
    "method_messages.getStickerSet_param_stickerset_type_InputStickerSet": "Stickerset",
    "method_messages.getStickerSet_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.deleteRevokedExportedChatInvites": "Delete all revoked chat invites",
    "method_messages.deleteRevokedExportedChatInvites_param_peer_type_InputPeer": "Chat",
    "method_messages.deleteRevokedExportedChatInvites_param_admin_id_type_InputUser": "ID of the admin that originally generated the revoked chat invites",
    "method_messages.getCustomEmojiDocuments": "Fetch [custom emoji stickers \u00bb](https:\/\/core.telegram.org\/api\/custom-emoji).\n\nReturns a list of [documents](..\/constructors\/document.md) with the animated custom emoji in TGS format, and a [documentAttributeCustomEmoji](..\/constructors\/documentAttributeCustomEmoji.md) attribute with the original emoji and info about the emoji stickerset this custom emoji belongs to.",
    "method_messages.getCustomEmojiDocuments_param_document_id_type_Vector<long>": "[Custom emoji](https:\/\/core.telegram.org\/api\/custom-emoji) IDs from a [messageEntityCustomEmoji](..\/constructors\/messageEntityCustomEmoji.md).",
    "method_messages.searchSentMedia": "View and search recently sent media.  \nThis method does not support pagination.",
    "method_messages.searchSentMedia_param_q_type_string": "Optional search query",
    "method_messages.searchSentMedia_param_filter_type_MessagesFilter": "Message filter",
    "method_messages.searchSentMedia_param_limit_type_int": "Maximum number of results to return (max 100).",
    "method_account.getPasswordSettings": "Get private info associated to the password info (recovery email, telegram [passport](https:\/\/core.telegram.org\/passport) info &amp; so on)",
    "method_account.getPasswordSettings_param_password_type_InputCheckPasswordSRP": "The password (see [SRP](https:\/\/core.telegram.org\/api\/srp))",
    "method_messages.getScheduledHistory": "Get scheduled messages",
    "method_messages.getScheduledHistory_param_peer_type_InputPeer": "Peer",
    "method_messages.getScheduledHistory_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.installWallPaper": "Install [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "method_account.installWallPaper_param_wallpaper_type_InputWallPaper": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) to install",
    "method_account.installWallPaper_param_settings_type_WallPaperSettings": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) settings",
    "method_phone.receivedCall": "Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.",
    "method_phone.receivedCall_param_peer_type_InputPhoneCall": "The phone call we're currently in",
    "method_messages.readEncryptedHistory": "Marks message history within a secret chat as read.",
    "method_messages.readEncryptedHistory_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.readEncryptedHistory_param_max_date_type_int": "Maximum date value for received messages in history",
    "method_contacts.resolveUsername": "Resolve a @username to get peer info",
    "method_contacts.resolveUsername_param_username_type_string": "@username to resolve",
    "method_help.getPremiumPromo": "Get Telegram Premium promotion information",
    "method_phone.getGroupCall": "Get info about a group call",
    "method_phone.getGroupCall_param_call_type_InputGroupCall": "The group call",
    "method_phone.getGroupCall_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_help.getConfig": "Returns current configuration, including data center configuration.",
    "method_account.updateStatus": "Updates online user status.",
    "method_account.updateStatus_param_offline_type_Bool": "If [(boolTrue)](..\/constructors\/boolTrue.md) is transmitted, user status will change to [(userStatusOffline)](..\/constructors\/userStatusOffline.md).",
    "method_messages.getInlineGameHighScores": "Get highscores of a game sent using an inline bot",
    "method_messages.getInlineGameHighScores_param_id_type_InputBotInlineMessageID": "ID of inline message",
    "method_messages.getInlineGameHighScores_param_user_id_type_InputUser": "Get high scores of a certain user",
    "method_messages.setDefaultReaction": "Change default emoji reaction to use in the quick reaction menu: the value is synced across devices and can be fetched using [help.getConfig, `reactions_default` field](..\/methods\/help.getConfig.md).",
    "method_messages.setDefaultReaction_param_reaction_type_Reaction": "New emoji reaction",
    "method_messages.report": "Report a message in a chat for violation of telegram's Terms of Service",
    "method_messages.report_param_peer_type_InputPeer": "Peer",
    "method_messages.report_param_id_type_Vector<int>": "IDs of messages to report",
    "method_messages.report_param_reason_type_ReportReason": "Why are these messages being reported",
    "method_messages.report_param_message_type_string": "Comment for report moderation",
    "method_chatlists.hideChatlistUpdates": "Dismiss new pending peers recently added to a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.hideChatlistUpdates_param_chatlist_type_InputChatlist": "The folder",
    "method_phone.getGroupCallStreamRtmpUrl": "Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with [phone.createGroupCall](..\/methods\/phone.createGroupCall.md) (the `rtmp_stream` flag must be set).",
    "method_phone.getGroupCallStreamRtmpUrl_param_peer_type_InputPeer": "Peer to livestream into",
    "method_phone.getGroupCallStreamRtmpUrl_param_revoke_type_Bool": "Whether to revoke the previous stream key or simply return the existing one",
    "method_messages.reorderPinnedDialogs": "Reorder pinned dialogs",
    "method_messages.reorderPinnedDialogs_param_force_type_flags.0?true": "If set, dialogs pinned server-side but not present in the `order` field will be unpinned.",
    "method_messages.reorderPinnedDialogs_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_messages.reorderPinnedDialogs_param_order_type_Vector<InputDialogPeer>": "New dialog order",
    "method_messages.getBotApp": "Obtain information about a [named bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps#named-bot-web-apps)",
    "method_messages.getBotApp_param_app_type_InputBotApp": "Bot app information obtained from a [named bot web app deep link \u00bb](https:\/\/core.telegram.org\/api\/links#named-bot-web-app-links).",
    "method_messages.getBotApp_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.declinePasswordReset": "Abort a pending 2FA password reset, [see here for more info \u00bb](https:\/\/core.telegram.org\/api\/srp#password-reset)",
    "method_channels.joinChannel": "Join a channel\/supergroup",
    "method_channels.joinChannel_param_channel_type_InputChannel": "Channel\/supergroup to join",
    "method_contacts.importContactToken": "Obtain user info from a [temporary profile link](https:\/\/core.telegram.org\/api\/links#temporary-profile-links).",
    "method_contacts.importContactToken_param_token_type_string": "The token extracted from the [temporary profile link](https:\/\/core.telegram.org\/api\/links#temporary-profile-links).",
    "method_auth.recoverPassword": "Reset the [2FA password](https:\/\/core.telegram.org\/api\/srp) using the recovery code sent using [auth.requestPasswordRecovery](..\/methods\/auth.requestPasswordRecovery.md).",
    "method_auth.recoverPassword_param_code_type_string": "Code received via email",
    "method_auth.recoverPassword_param_new_settings_type_flags.0?account.PasswordInputSettings": "New password",
    "method_help.getAppUpdate": "Returns information on update availability for the current application.",
    "method_help.getAppUpdate_param_source_type_string": "Source",
    "method_users.setSecureValueErrors": "Notify the user that the sent [passport](https:\/\/core.telegram.org\/passport) data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.",
    "method_users.setSecureValueErrors_param_id_type_InputUser": "The user",
    "method_users.setSecureValueErrors_param_errors_type_Vector<SecureValueError>": "Errors",
    "method_messages.faveSticker": "Mark or unmark a sticker as favorite",
    "method_messages.faveSticker_param_id_type_InputDocument": "Sticker in question",
    "method_messages.faveSticker_param_unfave_type_Bool": "Whether to add or remove a sticker from favorites",
    "method_messages.getMessageReactionsList": "Get [message reaction](https:\/\/core.telegram.org\/api\/reactions) list, along with the sender of each reaction.",
    "method_messages.getMessageReactionsList_param_peer_type_InputPeer": "Peer",
    "method_messages.getMessageReactionsList_param_id_type_int": "Message ID",
    "method_messages.getMessageReactionsList_param_reaction_type_flags.0?Reaction": "Get only reactions of this type (UTF8 emoji)",
    "method_messages.getMessageReactionsList_param_offset_type_flags.1?string": "Offset (typically taken from the `next_offset` field of the returned [messages.MessageReactionsList](..\/types\/messages.MessageReactionsList.md))",
    "method_messages.getMessageReactionsList_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_invokeWithLayer": "Invoke the specified query using the specified API [layer](https:\/\/core.telegram.org\/api\/invoking#layers)",
    "method_invokeWithLayer_param_layer_type_int": "The layer to use",
    "method_invokeWithLayer_param_query_type_!X": "The query",
    "method_auth.requestPasswordRecovery": "Request recovery code of a [2FA password](https:\/\/core.telegram.org\/api\/srp), only for accounts with a [recovery email configured](https:\/\/core.telegram.org\/api\/srp#email-verification).",
    "method_help.getCountriesList": "Get name, ISO code, localized name and phone codes\/patterns of all available countries",
    "method_help.getCountriesList_param_lang_code_type_string": "Language code of the current user",
    "method_help.getCountriesList_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.resetPassword": "Initiate a 2FA password reset: can only be used if the user is already logged-in, [see here for more info \u00bb](https:\/\/core.telegram.org\/api\/srp#password-reset)",
    "method_channels.deleteChannel": "Delete a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.deleteChannel_param_channel_type_InputChannel": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) to delete",
    "method_bots.getBotCommands": "Obtain a list of bot commands for the specified bot scope and language code",
    "method_bots.getBotCommands_param_scope_type_BotCommandScope": "Command scope",
    "method_bots.getBotCommands_param_lang_code_type_string": "Language code",
    "method_langpack.getDifference": "Get new strings in language pack",
    "method_langpack.getDifference_param_lang_pack_type_string": "Language pack",
    "method_langpack.getDifference_param_lang_code_type_string": "Language code",
    "method_langpack.getDifference_param_from_version_type_int": "Previous localization pack version",
    "method_account.getPrivacy": "Get privacy settings of current account",
    "method_account.getPrivacy_param_key_type_InputPrivacyKey": "Peer category whose privacy settings should be fetched",
    "method_phone.exportGroupCallInvite": "Get an [invite link](https:\/\/core.telegram.org\/api\/links#video-chat-livestream-links) for a group call or livestream",
    "method_phone.exportGroupCallInvite_param_can_self_unmute_type_flags.0?true": "For livestreams or muted group chats, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand).",
    "method_phone.exportGroupCallInvite_param_call_type_InputGroupCall": "The group call",
    "method_account.clearRecentEmojiStatuses": "Clears list of recently used [emoji statuses](https:\/\/core.telegram.org\/api\/emoji-status)",
    "method_phone.getCallConfig": "Get phone call configuration to be passed to libtgvoip's shared config",
    "method_contacts.deleteByPhones": "Delete contacts by phone number",
    "method_contacts.deleteByPhones_param_phones_type_Vector<string>": "Phone numbers",
    "method_channels.setDiscussionGroup": "Associate a group to a channel as [discussion group](https:\/\/core.telegram.org\/api\/discussion) for that channel",
    "method_channels.setDiscussionGroup_param_broadcast_type_InputChannel": "Channel",
    "method_channels.setDiscussionGroup_param_group_type_InputChannel": "[Discussion group](https:\/\/core.telegram.org\/api\/discussion) to associate to the channel",
    "method_channels.leaveChannel": "Leave a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.leaveChannel_param_channel_type_InputChannel": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) to leave",
    "method_account.sendVerifyEmailCode": "Send an email verification code.",
    "method_account.sendVerifyEmailCode_param_purpose_type_EmailVerifyPurpose": "Verification purpose.",
    "method_account.sendVerifyEmailCode_param_email_type_string": "The email where to send the code.",
    "method_channels.readMessageContents": "Mark [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) message contents as read",
    "method_channels.readMessageContents_param_channel_type_InputChannel": "[Channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.readMessageContents_param_id_type_Vector<int>": "IDs of messages whose contents should be marked as read",
    "method_folders.editPeerFolders": "Edit peers in [peer folder](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_folders.editPeerFolders_param_folder_peers_type_Vector<InputFolderPeer>": "New peer list",
    "method_messages.setHistoryTTL": "Set maximum Time-To-Live of all messages in the specified chat",
    "method_messages.setHistoryTTL_param_peer_type_InputPeer": "The dialog",
    "method_messages.setHistoryTTL_param_period_type_int": "Automatically delete all messages sent in the chat after this many seconds",
    "method_messages.searchGifs": "Search gifs",
    "method_messages.searchGifs_param_q_type_string": "Query",
    "method_messages.searchGifs_param_offset_type_int": "Offset",
    "method_auth.resetLoginEmail": "Reset the [login email \u00bb](https:\/\/core.telegram.org\/api\/auth#email-verification).",
    "method_auth.resetLoginEmail_param_phone_number_type_string": "Phone number of the account",
    "method_auth.resetLoginEmail_param_phone_code_hash_type_string": "Phone code hash, obtained as described in the [documentation \u00bb](https:\/\/core.telegram.org\/api\/auth)",
    "method_messages.setBotShippingResults": "If you sent an invoice requesting a shipping address and the parameter is\\_flexible was specified, the bot will receive an [updateBotShippingQuery](..\/constructors\/updateBotShippingQuery.md) update. Use this method to reply to shipping queries.",
    "method_messages.setBotShippingResults_param_query_id_type_long": "Unique identifier for the query to be answered",
    "method_messages.setBotShippingResults_param_error_type_flags.0?string": "Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable\"). Telegram will display this message to the user.",
    "method_messages.setBotShippingResults_param_shipping_options_type_flags.1?Vector<ShippingOption>": "A vector of available shipping options.",
    "method_messages.getScheduledMessages": "Get scheduled messages",
    "method_messages.getScheduledMessages_param_peer_type_InputPeer": "Peer",
    "method_messages.getScheduledMessages_param_id_type_Vector<int>": "IDs of scheduled messages",
    "method_upload.getWebFile": "Returns content of a web file, by proxying the request through telegram, see the [webfile docs for more info](https:\/\/core.telegram.org\/api\/files#downloading-webfiles).\n\n**Note**: the query must be sent to the DC specified in the `webfile_dc_id` [MTProto configuration field](https:\/\/core.telegram.org\/api\/config#mtproto-configuration).",
    "method_upload.getWebFile_param_location_type_InputWebFileLocation": "The file to download",
    "method_upload.getWebFile_param_offset_type_int": "Number of bytes to be skipped",
    "method_upload.getWebFile_param_limit_type_int": "Number of bytes to be returned",
    "method_contacts.getLocated": "Get contacts near you",
    "method_contacts.getLocated_param_background_type_flags.1?true": "While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. <br>Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown.",
    "method_contacts.getLocated_param_geo_point_type_InputGeoPoint": "Geolocation",
    "method_contacts.getLocated_param_self_expires_type_flags.0?int": "If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied.",
    "method_account.resetWallPapers": "Delete all installed [wallpapers](https:\/\/core.telegram.org\/api\/wallpapers), reverting to the default wallpaper set.",
    "method_chatlists.getChatlistUpdates": "Fetch new chats associated with an imported [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links). Must be invoked at most every `chatlist_update_period` seconds (as per the related [client configuration parameter \u00bb](https:\/\/core.telegram.org\/api\/config#chatlist-update-period)).",
    "method_chatlists.getChatlistUpdates_param_chatlist_type_InputChatlist": "The folder",
    "method_bots.toggleUsername": "Activate or deactivate a purchased [fragment.com](https:\/\/fragment.com) username associated to a bot we own.",
    "method_bots.toggleUsername_param_bot_type_InputUser": "The bot",
    "method_bots.toggleUsername_param_username_type_string": "Username",
    "method_bots.toggleUsername_param_active_type_Bool": "Whether to activate or deactivate it",
    "method_payments.canPurchasePremium": "Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase, official apps only.",
    "method_payments.canPurchasePremium_param_purpose_type_InputStorePaymentPurpose": "Payment purpose",
    "method_bots.setBotInfo": "Set localized name, about text and description of a bot (or of the current account, if called by a bot).",
    "method_bots.setBotInfo_param_bot_type_flags.2?InputUser": "If called by a user, **must** contain the peer of a bot we own.",
    "method_bots.setBotInfo_param_lang_code_type_string": "Language code, if left empty update the fallback about text and description",
    "method_bots.setBotInfo_param_name_type_flags.3?string": "New bot name",
    "method_bots.setBotInfo_param_about_type_flags.0?string": "New about text",
    "method_bots.setBotInfo_param_description_type_flags.1?string": "New description",
    "method_messages.checkChatInvite": "Check the validity of a chat invite link and get basic info about it",
    "method_messages.checkChatInvite_param_hash_type_string": "Invite hash from [chat invite deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-invite-links).",
    "method_channels.togglePreHistoryHidden": "Hide\/unhide message history for new channel\/supergroup users",
    "method_channels.togglePreHistoryHidden_param_channel_type_InputChannel": "Channel\/supergroup",
    "method_channels.togglePreHistoryHidden_param_enabled_type_Bool": "Hide\/unhide",
    "method_messages.getOldFeaturedStickers": "Method for fetching previously featured stickers",
    "method_messages.getOldFeaturedStickers_param_offset_type_int": "Offset",
    "method_messages.getOldFeaturedStickers_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getOldFeaturedStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.registerDevice": "Register device to receive [PUSH notifications](https:\/\/core.telegram.org\/api\/push-updates)",
    "method_account.registerDevice_param_no_muted_type_flags.0?true": "Avoid receiving (silent and invisible background) notifications. Useful to save battery.",
    "method_account.registerDevice_param_token_type_type_int": "Device token type, see [PUSH updates](https:\/\/core.telegram.org\/api\/push-updates#subscribing-to-notifications) for the possible values.",
    "method_account.registerDevice_param_token_type_string": "Device token, see [PUSH updates](https:\/\/core.telegram.org\/api\/push-updates#subscribing-to-notifications) for the possible values.",
    "method_account.registerDevice_param_app_sandbox_type_Bool": "If [(boolTrue)](..\/constructors\/boolTrue.md) is transmitted, a sandbox-certificate will be used during transmission.",
    "method_account.registerDevice_param_secret_type_bytes": "For FCM and APNS VoIP, optional encryption key used to encrypt push notifications",
    "method_account.registerDevice_param_other_uids_type_Vector<long>": "List of user identifiers of other users currently using the client",
    "method_messages.updateDialogFilter": "Update [folder](https:\/\/core.telegram.org\/api\/folders)",
    "method_messages.updateDialogFilter_param_id_type_int": "[Folder](https:\/\/core.telegram.org\/api\/folders) ID",
    "method_messages.updateDialogFilter_param_filter_type_flags.0?DialogFilter": "[Folder](https:\/\/core.telegram.org\/api\/folders) info",
    "method_auth.resetAuthorizations": "Terminates all user's authorized sessions except for the current one.\n\nAfter calling this method it is necessary to reregister the current device using the method [account.registerDevice](..\/methods\/account.registerDevice.md)",
    "method_phone.getGroupCallJoinAs": "Get a list of peers that can be used to join a group call, presenting yourself as a specific user\/channel.",
    "method_phone.getGroupCallJoinAs_param_peer_type_InputPeer": "The dialog whose group call or livestream we're trying to join",
    "method_channels.getInactiveChannels": "Get inactive channels and supergroups",
    "method_account.updateUsername": "Changes username for the current user.",
    "method_account.updateUsername_param_username_type_string": "username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.",
    "method_contacts.addContact": "Add an existing telegram user as contact.\n\nUse [contacts.importContacts](..\/methods\/contacts.importContacts.md) to add contacts by phone number, without knowing their Telegram ID.",
    "method_contacts.addContact_param_add_phone_privacy_exception_type_flags.0?true": "Allow the other user to see our phone number?",
    "method_contacts.addContact_param_id_type_InputUser": "Telegram ID of the other user",
    "method_contacts.addContact_param_first_name_type_string": "First name",
    "method_contacts.addContact_param_last_name_type_string": "Last name",
    "method_contacts.addContact_param_phone_type_string": "User's phone number",
    "method_phone.joinGroupCall": "Join a group call",
    "method_phone.joinGroupCall_param_muted_type_flags.0?true": "If set, the user will be muted by default upon joining.",
    "method_phone.joinGroupCall_param_video_stopped_type_flags.2?true": "If set, the user's video will be disabled by default upon joining.",
    "method_phone.joinGroupCall_param_call_type_InputGroupCall": "The group call",
    "method_phone.joinGroupCall_param_join_as_type_InputPeer": "Join the group call, presenting yourself as the specified user\/channel",
    "method_phone.joinGroupCall_param_invite_hash_type_flags.1?string": "The invitation hash from the [invite link \u00bb](https:\/\/core.telegram.org\/api\/links#video-chat-livestream-links), if provided allows speaking in a livestream or muted group chat.",
    "method_phone.joinGroupCall_param_params_type_DataJSON": "WebRTC parameters",
    "method_messages.getEmojiProfilePhotoGroups": "Represents a list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories), to be used when selecting custom emojis to set as [profile picture](https:\/\/core.telegram.org\/api\/files#sticker-profile-pictures).",
    "method_messages.getEmojiProfilePhotoGroups_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_users.getUsers": "Returns basic user info according to their identifiers.",
    "method_users.getUsers_param_id_type_Vector<InputUser>": "List of user identifiers",
    "method_photos.updateProfilePhoto": "Installs a previously uploaded photo as a profile photo.",
    "method_photos.updateProfilePhoto_param_fallback_type_flags.0?true": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings.",
    "method_photos.updateProfilePhoto_param_bot_type_flags.1?InputUser": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user.",
    "method_photos.updateProfilePhoto_param_id_type_InputPhoto": "Input photo",
    "method_messages.searchCustomEmoji": "Look for [custom emojis](https:\/\/core.telegram.org\/api\/custom-emoji) associated to a UTF8 emoji",
    "method_messages.searchCustomEmoji_param_emoticon_type_string": "The emoji",
    "method_messages.searchCustomEmoji_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_auth.exportAuthorization": "Returns data for copying authorization to another data-center.",
    "method_auth.exportAuthorization_param_dc_id_type_int": "Number of a target data-center",
    "method_help.dismissSuggestion": "Dismiss a [suggestion, see here for more info \u00bb](https:\/\/core.telegram.org\/api\/config#suggestions).",
    "method_help.dismissSuggestion_param_peer_type_InputPeer": "In the case of pending suggestions in [channels](..\/constructors\/channelFull.md), the channel ID.",
    "method_help.dismissSuggestion_param_suggestion_type_string": "[Suggestion, see here for more info \u00bb](https:\/\/core.telegram.org\/api\/config#suggestions).",
    "method_account.saveTheme": "Save a theme",
    "method_account.saveTheme_param_theme_type_InputTheme": "Theme to save",
    "method_account.saveTheme_param_unsave_type_Bool": "Unsave",
    "method_channels.updatePinnedForumTopic": "Pin or unpin [forum topics](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.updatePinnedForumTopic_param_channel_type_InputChannel": "Supergroup ID",
    "method_channels.updatePinnedForumTopic_param_topic_id_type_int": "[Forum topic ID](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.updatePinnedForumTopic_param_pinned_type_Bool": "Whether to pin or unpin the topic",
    "method_channels.editAdmin": "Modify the admin rights of a user in a [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_channels.editAdmin_param_channel_type_InputChannel": "The [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel).",
    "method_channels.editAdmin_param_user_id_type_InputUser": "The ID of the user whose admin rights should be modified",
    "method_channels.editAdmin_param_admin_rights_type_ChatAdminRights": "The admin rights",
    "method_channels.editAdmin_param_rank_type_string": "Indicates the role (rank) of the admin in the group: just an arbitrary string",
    "method_users.getFullUser": "Returns extended user info by ID.",
    "method_users.getFullUser_param_id_type_InputUser": "User ID",
    "method_account.updateProfile": "Updates user profile.",
    "method_account.updateProfile_param_first_name_type_flags.0?string": "New user first name",
    "method_account.updateProfile_param_last_name_type_flags.1?string": "New user last name",
    "method_account.updateProfile_param_about_type_flags.2?string": "New bio",
    "method_messages.sendWebViewResultMessage": "Terminate webview interaction started with [messages.requestWebView](..\/methods\/messages.requestWebView.md), sending the specified message to the chat on behalf of the user.",
    "method_messages.sendWebViewResultMessage_param_bot_query_id_type_string": "Webview interaction ID obtained from [messages.requestWebView](..\/methods\/messages.requestWebView.md)",
    "method_messages.sendWebViewResultMessage_param_result_type_InputBotInlineResult": "Message to send",
    "method_account.updateEmojiStatus": "Set an [emoji status](https:\/\/core.telegram.org\/api\/emoji-status)",
    "method_account.updateEmojiStatus_param_emoji_status_type_EmojiStatus": "[Emoji status](https:\/\/core.telegram.org\/api\/emoji-status) to set",
    "method_messages.getPinnedDialogs": "Get pinned dialogs",
    "method_messages.getPinnedDialogs_param_folder_id_type_int": "[Peer folder ID, for more info click here](https:\/\/core.telegram.org\/api\/folders#peer-folders)",
    "method_account.getThemes": "Get installed themes",
    "method_account.getThemes_param_format_type_string": "Theme format, a string that identifies the theming engines supported by the client",
    "method_account.getThemes_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getPeerSettings": "Get peer settings",
    "method_messages.getPeerSettings_param_peer_type_InputPeer": "The peer",
    "method_account.getTheme": "Get theme information",
    "method_account.getTheme_param_format_type_string": "Theme format, a string that identifies the theming engines supported by the client",
    "method_account.getTheme_param_theme_type_InputTheme": "Theme",
    "method_account.createTheme": "Create a theme",
    "method_account.createTheme_param_slug_type_string": "Unique theme ID used to generate [theme deep links](https:\/\/core.telegram.org\/api\/links#theme-links), can be empty to autogenerate a random ID.",
    "method_account.createTheme_param_title_type_string": "Theme name",
    "method_account.createTheme_param_document_type_flags.2?InputDocument": "Theme file",
    "method_account.createTheme_param_settings_type_flags.3?Vector<InputThemeSettings>": "Theme settings, multiple values can be provided for the different base themes (day\/night mode, etc).",
    "method_chatlists.editExportedInvite": "Edit a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.editExportedInvite_param_chatlist_type_InputChatlist": "Folder ID",
    "method_chatlists.editExportedInvite_param_slug_type_string": "`slug` obtained from the [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links).",
    "method_chatlists.editExportedInvite_param_title_type_flags.1?string": "If set, sets a new name for the link",
    "method_chatlists.editExportedInvite_param_peers_type_flags.2?Vector<InputPeer>": "If set, changes the list of peers shared with the link",
    "method_messages.getStickers": "Get stickers by emoji",
    "method_messages.getStickers_param_emoticon_type_string": "The emoji",
    "method_messages.getStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.unregisterDevice": "Deletes a device by its token, stops sending PUSH-notifications to it.",
    "method_account.unregisterDevice_param_token_type_type_int": "Device token type, see [PUSH updates](https:\/\/core.telegram.org\/api\/push-updates#subscribing-to-notifications) for the possible values.",
    "method_account.unregisterDevice_param_token_type_string": "Device token, see [PUSH updates](https:\/\/core.telegram.org\/api\/push-updates#subscribing-to-notifications) for the possible values.",
    "method_account.unregisterDevice_param_other_uids_type_Vector<long>": "List of user identifiers of other users currently using the client",
    "method_account.getAuthorizations": "Get logged-in sessions",
    "method_account.confirmPasswordEmail": "Verify an email to use as [2FA recovery method](https:\/\/core.telegram.org\/api\/srp).",
    "method_account.confirmPasswordEmail_param_code_type_string": "The phone code that was received after [setting a recovery email](https:\/\/core.telegram.org\/api\/srp#email-verification)",
    "method_account.updateTheme": "Update theme",
    "method_account.updateTheme_param_format_type_string": "Theme format, a string that identifies the theming engines supported by the client",
    "method_account.updateTheme_param_theme_type_InputTheme": "Theme to update",
    "method_account.updateTheme_param_slug_type_flags.0?string": "Unique theme ID",
    "method_account.updateTheme_param_title_type_flags.1?string": "Theme name",
    "method_account.updateTheme_param_document_type_flags.2?InputDocument": "Theme file",
    "method_account.updateTheme_param_settings_type_flags.3?Vector<InputThemeSettings>": "Theme settings",
    "method_messages.editChatAdmin": "Make a user admin in a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups).",
    "method_messages.editChatAdmin_param_chat_id_type_long": "The ID of the group",
    "method_messages.editChatAdmin_param_user_id_type_InputUser": "The user to make admin",
    "method_messages.editChatAdmin_param_is_admin_type_Bool": "Whether to make them admin",
    "method_upload.saveBigFilePart": "Saves a part of a large file (over 10 MB in size) to be later passed to one of the methods.",
    "method_upload.saveBigFilePart_param_file_id_type_long": "Random file id, created by the client",
    "method_upload.saveBigFilePart_param_file_part_type_int": "Part sequence number",
    "method_upload.saveBigFilePart_param_file_total_parts_type_int": "Total number of parts",
    "method_upload.saveBigFilePart_param_bytes_type_bytes": "Binary data, part contents",
    "method_messages.setEncryptedTyping": "Send typing event by the current user to a secret chat.",
    "method_messages.setEncryptedTyping_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.setEncryptedTyping_param_typing_type_Bool": "Typing.<br>**Possible values**:<br>[(boolTrue)](..\/constructors\/boolTrue.md), if the user started typing and more than **5 seconds** have passed since the last request<br>[(boolFalse)](..\/constructors\/boolFalse.md), if the user stopped typing",
    "method_channels.updateUsername": "Change or remove the username of a supergroup\/channel",
    "method_channels.updateUsername_param_channel_type_InputChannel": "Channel",
    "method_channels.updateUsername_param_username_type_string": "New username, pass an empty string to remove the username",
    "method_upload.getFileHashes": "Get SHA256 hashes for verifying downloaded files",
    "method_upload.getFileHashes_param_location_type_InputFileLocation": "File",
    "method_upload.getFileHashes_param_offset_type_long": "Offset from which to get file hashes",
    "method_account.getDefaultProfilePhotoEmojis": "Get a set of suggested [custom emoji stickers](https:\/\/core.telegram.org\/api\/custom-emoji) that can be [used as profile picture](https:\/\/core.telegram.org\/api\/files#sticker-profile-pictures)",
    "method_account.getDefaultProfilePhotoEmojis_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getAllChats": "Get all chats, channels and supergroups",
    "method_messages.getAllChats_param_except_ids_type_Vector<long>": "Except these chats\/channels\/supergroups",
    "method_help.getDeepLinkInfo": "Get info about an unsupported deep link, see [here for more info \u00bb](https:\/\/core.telegram.org\/api\/links#unsupported-links).",
    "method_help.getDeepLinkInfo_param_path_type_string": "Path component of a `tg:` link",
    "method_contacts.getContacts": "Returns the current user's contact list.",
    "method_contacts.getContacts_param_hash_type_long": "If there already is a full contact list on the client, a [hash](https:\/\/core.telegram.org\/api\/offsets#hash-generation) of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, [(contacts.contactsNotModified)](..\/constructors\/contacts.contactsNotModified.md) will be returned.",
    "method_messages.discardEncryption": "Cancels a request for creation and\/or delete info on secret chat.",
    "method_messages.discardEncryption_param_delete_history_type_flags.0?true": "Whether to delete the entire chat history for the other user as well",
    "method_messages.discardEncryption_param_chat_id_type_int": "Secret chat ID",
    "method_channels.getMessages": "Get [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel) messages",
    "method_channels.getMessages_param_channel_type_InputChannel": "Channel\/supergroup",
    "method_channels.getMessages_param_id_type_Vector<InputMessage>": "IDs of messages to get",
    "method_messages.getExportedChatInvite": "Get info about a chat invite",
    "method_messages.getExportedChatInvite_param_peer_type_InputPeer": "Chat",
    "method_messages.getExportedChatInvite_param_link_type_string": "Invite link",
    "method_messages.getEmojiURL": "Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new [emoji keywords \u00bb](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-keywords). The URL will be valid for 30 seconds after generation.",
    "method_messages.getEmojiURL_param_lang_code_type_string": "Language code for which the emoji keywords will be suggested",
    "method_auth.importAuthorization": "Logs in a user using a key transmitted from his native data-center.",
    "method_auth.importAuthorization_param_id_type_long": "User ID",
    "method_auth.importAuthorization_param_bytes_type_bytes": "Authorization key",
    "method_payments.sendPaymentForm": "Send compiled payment form",
    "method_payments.sendPaymentForm_param_form_id_type_long": "Form ID",
    "method_payments.sendPaymentForm_param_invoice_type_InputInvoice": "Invoice",
    "method_payments.sendPaymentForm_param_requested_info_id_type_flags.0?string": "ID of saved and validated [order info](..\/constructors\/payments.validatedRequestedInfo.md)",
    "method_payments.sendPaymentForm_param_shipping_option_id_type_flags.1?string": "Chosen shipping option ID",
    "method_payments.sendPaymentForm_param_credentials_type_InputPaymentCredentials": "Payment credentials",
    "method_payments.sendPaymentForm_param_tip_amount_type_flags.2?long": "Tip, in the smallest units of the currency (integer, not float\/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https:\/\/core.telegram.org\/bots\/payments\/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).",
    "method_messages.readMessageContents": "Notifies the sender about the recipient having listened a voice message or watched a video.",
    "method_messages.readMessageContents_param_id_type_Vector<int>": "Message ID list",
    "method_channels.exportMessageLink": "Get link and embed info of a message in a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.exportMessageLink_param_grouped_type_flags.0?true": "Whether to include other grouped media (for albums)",
    "method_channels.exportMessageLink_param_thread_type_flags.1?true": "Whether to also include a thread ID, if available, inside of the link",
    "method_channels.exportMessageLink_param_channel_type_InputChannel": "Channel",
    "method_channels.exportMessageLink_param_id_type_int": "Message ID",
    "method_contacts.exportContactToken": "Generates a [temporary profile link](https:\/\/core.telegram.org\/api\/links#temporary-profile-links) for the currently logged-in user.",
    "method_channels.toggleJoinToSend": "Set whether all users [should join a discussion group in order to comment on a post \u00bb](https:\/\/core.telegram.org\/api\/discussion#requiring-users-to-join-the-group)",
    "method_channels.toggleJoinToSend_param_channel_type_InputChannel": "Discussion group",
    "method_channels.toggleJoinToSend_param_enabled_type_Bool": "Toggle",
    "method_messages.createChat": "Creates a new chat.\n\nMay also return 0-N updates of type [updateGroupInvitePrivacyForbidden](..\/constructors\/updateGroupInvitePrivacyForbidden.md): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https:\/\/core.telegram.org\/api\/invites) can be shared with the user, instead.",
    "method_messages.createChat_param_users_type_Vector<InputUser>": "List of user IDs to be invited",
    "method_messages.createChat_param_title_type_string": "Chat name",
    "method_messages.createChat_param_ttl_period_type_flags.0?int": "Time-to-live of all messages that will be sent in the chat: once message.date+message.ttl\\_period === time(), the message will be deleted on the server, and must be deleted locally as well. You can use [messages.setDefaultHistoryTTL](..\/methods\/messages.setDefaultHistoryTTL.md) to edit this value later.",
    "method_messages.acceptEncryption": "Confirms creation of a secret chat",
    "method_messages.acceptEncryption_param_peer_type_InputEncryptedChat": "Secret chat ID",
    "method_messages.acceptEncryption_param_g_b_type_bytes": "`B = g ^ b mod p`, see [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Diffie%E2%80%93Hellman_key_exchange)",
    "method_messages.acceptEncryption_param_key_fingerprint_type_long": "64-bit fingerprint of the received key",
    "method_messages.editInlineBotMessage": "Edit an inline bot message",
    "method_messages.editInlineBotMessage_param_no_webpage_type_flags.1?true": "Disable webpage preview",
    "method_messages.editInlineBotMessage_param_id_type_InputBotInlineMessageID": "Sent inline message ID",
    "method_messages.editInlineBotMessage_param_message_type_flags.11?string": "Message",
    "method_messages.editInlineBotMessage_param_media_type_flags.14?InputMedia": "Media",
    "method_messages.editInlineBotMessage_param_reply_markup_type_flags.2?ReplyMarkup": "Reply markup for inline keyboards",
    "method_messages.editInlineBotMessage_param_entities_type_flags.3?Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "method_payments.getBankCardData": "Get info about a credit card",
    "method_payments.getBankCardData_param_number_type_string": "Credit card number",
    "method_account.deleteSecureValue": "Delete stored [Telegram Passport](https:\/\/core.telegram.org\/passport) documents, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_account.deleteSecureValue_param_types_type_Vector<SecureValueType>": "Document types to delete",
    "method_bots.reorderUsernames": "Reorder usernames associated to a bot we own.",
    "method_bots.reorderUsernames_param_bot_type_InputUser": "The bot",
    "method_bots.reorderUsernames_param_order_type_Vector<string>": "The new order for active usernames. All active usernames must be specified.",
    "method_account.getAutoDownloadSettings": "Get media autodownload settings",
    "method_account.getNotifyExceptions": "Returns list of chats with non-default notification settings",
    "method_account.getNotifyExceptions_param_compare_sound_type_flags.1?true": "If true, chats with non-default sound will also be returned",
    "method_account.getNotifyExceptions_param_peer_type_flags.0?InputNotifyPeer": "If specified, only chats of the specified category will be returned",
    "method_messages.getSearchResultsCalendar": "Returns information about the next messages of the specified type in the chat split by days.\n\nReturns the results in reverse chronological order.  \nCan return partial results for the last returned day.",
    "method_messages.getSearchResultsCalendar_param_peer_type_InputPeer": "Peer where to search",
    "method_messages.getSearchResultsCalendar_param_filter_type_MessagesFilter": "Message filter, [inputMessagesFilterEmpty](..\/constructors\/inputMessagesFilterEmpty.md), [inputMessagesFilterMyMentions](..\/constructors\/inputMessagesFilterMyMentions.md) filters are not supported by this method.",
    "method_messages.getSearchResultsCalendar_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getSearchResultsCalendar_param_offset_date_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.sendScreenshotNotification": "Notify the other user in a private chat that a screenshot of the chat was taken",
    "method_messages.sendScreenshotNotification_param_peer_type_InputPeer": "Other user",
    "method_messages.sendScreenshotNotification_param_reply_to_msg_id_type_int": "ID of message that was screenshotted, can be 0",
    "method_messages.sendScreenshotNotification_param_random_id_type_long": "Random ID to avoid message resending",
    "method_account.saveWallPaper": "Install\/uninstall [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "method_account.saveWallPaper_param_wallpaper_type_InputWallPaper": "[Wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) to install or uninstall",
    "method_account.saveWallPaper_param_unsave_type_Bool": "Uninstall wallpaper?",
    "method_account.saveWallPaper_param_settings_type_WallPaperSettings": "Wallpaper settings",
    "method_messages.sendWebViewData": "Used by the user to relay data from an opened [reply keyboard bot web app](https:\/\/core.telegram.org\/api\/bots\/webapps) to the bot that owns it.",
    "method_messages.sendWebViewData_param_bot_type_InputUser": "Bot that owns the web app",
    "method_messages.sendWebViewData_param_random_id_type_long": "Unique client message ID to prevent duplicate sending of the same event",
    "method_messages.sendWebViewData_param_button_text_type_string": "Text of the [keyboardButtonSimpleWebView](..\/constructors\/keyboardButtonSimpleWebView.md) that was pressed to open the web app.",
    "method_messages.sendWebViewData_param_data_type_string": "Data to relay to the bot, obtained from a [`web_app_data_send` JS event](https:\/\/core.telegram.org\/api\/web-events#web-app-data-send).",
    "method_messages.togglePeerTranslations": "Show or hide the [real-time chat translation popup](https:\/\/core.telegram.org\/api\/translation) for a certain chat",
    "method_messages.togglePeerTranslations_param_disabled_type_flags.0?true": "Whether to disable or enable the real-time chat translation popup",
    "method_messages.togglePeerTranslations_param_peer_type_InputPeer": "The peer",
    "method_auth.bindTempAuthKey": "Binds a temporary authorization key `temp_auth_key_id` to the permanent authorization key `perm_auth_key_id`. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.\n\nFor more information, see [Perfect Forward Secrecy](https:\/\/core.telegram.org\/api\/pfs).",
    "method_auth.bindTempAuthKey_param_perm_auth_key_id_type_long": "Permanent auth\\_key\\_id to bind to",
    "method_auth.bindTempAuthKey_param_nonce_type_long": "Random long from [Binding message contents](#binding-message-contents)",
    "method_auth.bindTempAuthKey_param_expires_at_type_int": "Unix timestamp to invalidate temporary key, see [Binding message contents](#binding-message-contents)",
    "method_auth.bindTempAuthKey_param_encrypted_message_type_bytes": "See [Generating encrypted\\_message](#generating-encrypted-message)",
    "method_auth.importLoginToken": "Login using a redirected login token, generated in case of DC mismatch during [QR code login](https:\/\/core.telegram.org\/api\/qr-login).\n\nFor more info, see [login via QR code](https:\/\/core.telegram.org\/api\/qr-login).",
    "method_auth.importLoginToken_param_token_type_bytes": "Login token",
    "method_phone.leaveGroupCallPresentation": "Stop screen sharing in a group call",
    "method_phone.leaveGroupCallPresentation_param_call_type_InputGroupCall": "The group call",
    "method_messages.hideChatJoinRequest": "Dismiss or approve a chat [join request](https:\/\/core.telegram.org\/api\/invites#join-requests) related to a specific chat or channel.",
    "method_messages.hideChatJoinRequest_param_approved_type_flags.0?true": "Whether to dismiss or approve the chat [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "method_messages.hideChatJoinRequest_param_peer_type_InputPeer": "The chat or channel",
    "method_messages.hideChatJoinRequest_param_user_id_type_InputUser": "The user whose [join request \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) should be dismissed or approved",
    "method_account.getDefaultGroupPhotoEmojis": "Get a set of suggested [custom emoji stickers](https:\/\/core.telegram.org\/api\/custom-emoji) that can be [used as group picture](https:\/\/core.telegram.org\/api\/files#sticker-profile-pictures)",
    "method_account.getDefaultGroupPhotoEmojis_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_messages.getTopReactions": "Got popular [message reactions](https:\/\/core.telegram.org\/api\/reactions)",
    "method_messages.getTopReactions_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getTopReactions_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_auth.sendCode": "Send the verification code for login",
    "method_auth.sendCode_param_phone_number_type_string": "Phone number in international format",
    "method_auth.sendCode_param_api_id_type_int": "Application identifier (see [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.sendCode_param_api_hash_type_string": "Application secret hash (see [App configuration](https:\/\/core.telegram.org\/myapp))",
    "method_auth.sendCode_param_settings_type_CodeSettings": "Settings for the code type to send",
    "method_messages.getEmojiGroups": "Represents a list of [emoji categories](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-categories), to be used when selecting [custom emojis](https:\/\/core.telegram.org\/api\/custom-emoji).",
    "method_messages.getEmojiGroups_param_hash_type_int": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getSupport": "Returns the support user for the \"ask a question\" feature.",
    "method_help.editUserInfo": "Internal use",
    "method_help.editUserInfo_param_user_id_type_InputUser": "User",
    "method_help.editUserInfo_param_message_type_string": "Message",
    "method_help.editUserInfo_param_entities_type_Vector<MessageEntity>": "[Message entities for styled text](https:\/\/core.telegram.org\/api\/entities)",
    "method_messages.saveGif": "Add GIF to saved gifs list",
    "method_messages.saveGif_param_id_type_InputDocument": "GIF to save",
    "method_messages.saveGif_param_unsave_type_Bool": "Whether to remove GIF from saved gifs list",
    "method_channels.getForumTopics": "Get [topics of a forum](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.getForumTopics_param_channel_type_InputChannel": "Supergroup",
    "method_channels.getForumTopics_param_q_type_flags.0?string": "Search query",
    "method_channels.getForumTopics_param_offset_date_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getForumTopics_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getForumTopics_param_offset_topic_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getForumTopics_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_phone.discardGroupCall": "Terminate a group call",
    "method_phone.discardGroupCall_param_call_type_InputGroupCall": "The group call to terminate",
    "method_contacts.unblock": "Deletes the user from the blacklist.",
    "method_contacts.unblock_param_id_type_InputPeer": "User ID",
    "method_messages.getMaskStickers": "Get installed mask stickers",
    "method_messages.getMaskStickers_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_bots.setBotGroupDefaultAdminRights": "Set the default [suggested admin rights](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights) for bots being added as admins to groups, see [here for more info on how to handle them \u00bb](https:\/\/core.telegram.org\/api\/rights#suggested-bot-rights).",
    "method_bots.setBotGroupDefaultAdminRights_param_admin_rights_type_ChatAdminRights": "Admin rights",
    "method_messages.getFullChat": "Get full info about a [basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups).",
    "method_messages.getFullChat_param_chat_id_type_long": "[Basic group](https:\/\/core.telegram.org\/api\/channel#basic-groups) ID.",
    "method_account.getWebAuthorizations": "Get web [login widget](https:\/\/core.telegram.org\/widgets\/login) authorizations",
    "method_contacts.getSaved": "Get all contacts",
    "method_channels.deleteTopicHistory": "Delete message history of a [forum topic](https:\/\/core.telegram.org\/api\/forum)",
    "method_channels.deleteTopicHistory_param_channel_type_InputChannel": "Forum",
    "method_channels.deleteTopicHistory_param_top_msg_id_type_int": "Topic ID",
    "method_messages.hideAllChatJoinRequests": "Dismiss or approve all [join requests](https:\/\/core.telegram.org\/api\/invites#join-requests) related to a specific chat or channel.",
    "method_messages.hideAllChatJoinRequests_param_approved_type_flags.0?true": "Whether to dismiss or approve all chat [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests)",
    "method_messages.hideAllChatJoinRequests_param_peer_type_InputPeer": "The chat or channel",
    "method_messages.hideAllChatJoinRequests_param_link_type_flags.1?string": "Only dismiss or approve [join requests \u00bb](https:\/\/core.telegram.org\/api\/invites#join-requests) initiated using this invite link",
    "method_contacts.getBlocked": "Returns the list of blocked users.",
    "method_contacts.getBlocked_param_offset_type_int": "The number of list elements to be skipped",
    "method_contacts.getBlocked_param_limit_type_int": "The number of list elements to be returned",
    "method_stats.getMegagroupStats": "Get [supergroup statistics](https:\/\/core.telegram.org\/api\/stats)",
    "method_stats.getMegagroupStats_param_dark_type_flags.0?true": "Whether to enable dark theme for graph colors",
    "method_stats.getMegagroupStats_param_channel_type_InputChannel": "[Supergroup ID](https:\/\/core.telegram.org\/api\/channel)",
    "method_messages.translateText": "Translate a given text.\n\n[Styled text entities](https:\/\/core.telegram.org\/api\/entities) will only be preserved for [Telegram Premium](https:\/\/core.telegram.org\/api\/premium) users.",
    "method_messages.translateText_param_peer_type_flags.0?InputPeer": "If the text is a chat message, the peer ID",
    "method_messages.translateText_param_id_type_flags.0?Vector<int>": "A list of message IDs to translate",
    "method_messages.translateText_param_text_type_flags.1?Vector<TextWithEntities>": "A list of styled messages to translate",
    "method_messages.translateText_param_to_lang_type_string": "Two-letter ISO 639-1 language code of the language to which the message is translated",
    "method_payments.exportInvoice": "Generate an [invoice deep link](https:\/\/core.telegram.org\/api\/links#invoice-links)",
    "method_payments.exportInvoice_param_invoice_media_type_InputMedia": "Invoice",
    "method_channels.reportAntiSpamFalsePositive": "Report a [native antispam](https:\/\/core.telegram.org\/api\/antispam) false positive",
    "method_channels.reportAntiSpamFalsePositive_param_channel_type_InputChannel": "Supergroup ID",
    "method_channels.reportAntiSpamFalsePositive_param_msg_id_type_int": "Message ID that was mistakenly deleted by the [native antispam](https:\/\/core.telegram.org\/api\/antispam) system, taken from the [admin log](https:\/\/core.telegram.org\/api\/recent-actions)",
    "method_contacts.resetSaved": "Delete saved contacts",
    "method_channels.toggleForum": "Enable or disable [forum functionality](https:\/\/core.telegram.org\/api\/forum) in a supergroup.",
    "method_channels.toggleForum_param_channel_type_InputChannel": "Supergroup ID",
    "method_channels.toggleForum_param_enabled_type_Bool": "Enable or disable forum functionality",
    "method_auth.acceptLoginToken": "Accept QR code login token, logging in the app that generated it.\n\nReturns info about the new session.\n\nFor more info, see [login via QR code](https:\/\/core.telegram.org\/api\/qr-login).",
    "method_auth.acceptLoginToken_param_token_type_bytes": "Login token embedded in QR code, for more info, see [login via QR code](https:\/\/core.telegram.org\/api\/qr-login).",
    "method_updates.getDifference": "Get new [updates](https:\/\/core.telegram.org\/api\/updates).",
    "method_updates.getDifference_param_pts_type_int": "PTS, see [updates](https:\/\/core.telegram.org\/api\/updates).",
    "method_updates.getDifference_param_pts_total_limit_type_flags.0?int": "For fast updating: if provided and `pts + pts_total_limit < remote pts`, [updates.differenceTooLong](..\/constructors\/updates.differenceTooLong.md) will be returned.<br>Simply tells the server to not return the difference if it is bigger than `pts_total_limit`<br>If the remote pts is too big (&gt; ~4000000), this field will default to 1000000",
    "method_updates.getDifference_param_date_type_int": "date, see [updates](https:\/\/core.telegram.org\/api\/updates).",
    "method_updates.getDifference_param_qts_type_int": "QTS, see [updates](https:\/\/core.telegram.org\/api\/updates).",
    "method_messages.updatePinnedMessage": "Pin a message",
    "method_messages.updatePinnedMessage_param_silent_type_flags.0?true": "Pin the message silently, without triggering a notification",
    "method_messages.updatePinnedMessage_param_unpin_type_flags.1?true": "Whether the message should unpinned or pinned",
    "method_messages.updatePinnedMessage_param_pm_oneside_type_flags.2?true": "Whether the message should only be pinned on the local side of a one-to-one chat",
    "method_messages.updatePinnedMessage_param_peer_type_InputPeer": "The peer where to pin the message",
    "method_messages.updatePinnedMessage_param_id_type_int": "The message to pin or unpin",
    "method_auth.signIn": "Signs in a user with a validated phone number.",
    "method_auth.signIn_param_phone_number_type_string": "Phone number in the international format",
    "method_auth.signIn_param_phone_code_hash_type_string": "SMS-message ID, obtained from [auth.sendCode](..\/methods\/auth.sendCode.md)",
    "method_auth.signIn_param_phone_code_type_flags.0?string": "Valid numerical code from the SMS-message",
    "method_auth.signIn_param_email_verification_type_flags.1?EmailVerification": "Email verification code or token",
    "method_messages.editChatPhoto": "Changes chat photo and sends a service message on it",
    "method_messages.editChatPhoto_param_chat_id_type_long": "Chat ID",
    "method_messages.editChatPhoto_param_photo_type_InputChatPhoto": "Photo to be set",
    "method_account.deleteAutoSaveExceptions": "Clear all peer-specific autosave settings.",
    "method_account.setPrivacy": "Change privacy settings of current account",
    "method_account.setPrivacy_param_key_type_InputPrivacyKey": "New privacy rule",
    "method_account.setPrivacy_param_rules_type_Vector<InputPrivacyRule>": "Peers to which the privacy rule will apply.",
    "method_messages.getUnreadReactions": "Get unread reactions to messages you sent",
    "method_messages.getUnreadReactions_param_peer_type_InputPeer": "Peer",
    "method_messages.getUnreadReactions_param_top_msg_id_type_flags.0?int": "If set, considers only reactions to messages within the specified [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_messages.getUnreadReactions_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadReactions_param_add_offset_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadReactions_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getUnreadReactions_param_max_id_type_int": "Only return reactions for messages up until this message ID",
    "method_messages.getUnreadReactions_param_min_id_type_int": "Only return reactions for messages starting from this message ID",
    "method_messages.getMessageReadParticipants": "Get which users read a specific message: only available for groups and supergroups with less than [`chat_read_mark_size_threshold` members](https:\/\/core.telegram.org\/api\/config#chat-read-mark-size-threshold), read receipts will be stored for [`chat_read_mark_expire_period` seconds after the message was sent](https:\/\/core.telegram.org\/api\/config#chat-read-mark-expire-period), see [client configuration for more info \u00bb](https:\/\/core.telegram.org\/api\/config#client-configuration).",
    "method_messages.getMessageReadParticipants_param_peer_type_InputPeer": "Dialog",
    "method_messages.getMessageReadParticipants_param_msg_id_type_int": "Message ID",
    "method_contacts.getStatuses": "Returns the list of contact statuses.",
    "method_stats.getMessageStats": "Get [message statistics](https:\/\/core.telegram.org\/api\/stats)",
    "method_stats.getMessageStats_param_dark_type_flags.0?true": "Whether to enable dark theme for graph colors",
    "method_stats.getMessageStats_param_channel_type_InputChannel": "Channel ID",
    "method_stats.getMessageStats_param_msg_id_type_int": "Message ID",
    "method_account.getSecureValue": "Get saved [Telegram Passport](https:\/\/core.telegram.org\/passport) document, [for more info see the passport docs \u00bb](https:\/\/core.telegram.org\/passport\/encryption#encryption)",
    "method_account.getSecureValue_param_types_type_Vector<SecureValueType>": "Requested value types",
    "method_help.hidePromoData": "Hide MTProxy\/Public Service Announcement information",
    "method_help.hidePromoData_param_peer_type_InputPeer": "Peer to hide",
    "method_phone.acceptCall": "Accept incoming call",
    "method_phone.acceptCall_param_peer_type_InputPhoneCall": "The call to accept",
    "method_phone.acceptCall_param_g_b_type_bytes": "[Parameter for E2E encryption key exchange \u00bb](https:\/\/core.telegram.org\/api\/end-to-end\/voice-calls)",
    "method_phone.acceptCall_param_protocol_type_PhoneCallProtocol": "Phone call settings",
    "method_messages.readReactions": "Mark [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions) as read",
    "method_messages.readReactions_param_peer_type_InputPeer": "Peer",
    "method_messages.readReactions_param_top_msg_id_type_flags.0?int": "Mark as read only reactions to messages within the specified [forum topic](https:\/\/core.telegram.org\/api\/forum#forum-topics)",
    "method_account.getAccountTTL": "Get days to live of account",
    "method_bots.setBotCommands": "Set bot command list",
    "method_bots.setBotCommands_param_scope_type_BotCommandScope": "Command scope",
    "method_bots.setBotCommands_param_lang_code_type_string": "Language code",
    "method_bots.setBotCommands_param_commands_type_Vector<BotCommand>": "Bot commands",
    "method_account.reportPeer": "Report a peer for violation of telegram's Terms of Service",
    "method_account.reportPeer_param_peer_type_InputPeer": "The peer to report",
    "method_account.reportPeer_param_reason_type_ReportReason": "The reason why this peer is being reported",
    "method_account.reportPeer_param_message_type_string": "Comment for report moderation",
    "method_messages.getRecentLocations": "Get live location history of a certain user",
    "method_messages.getRecentLocations_param_peer_type_InputPeer": "User",
    "method_messages.getRecentLocations_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getRecentLocations_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_help.getTermsOfServiceUpdate": "Look for updates of telegram's terms of service",
    "method_account.getChatThemes": "Get all available chat themes",
    "method_account.getChatThemes_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.resendPasswordEmail": "Resend the code to verify an email to use as [2FA recovery method](https:\/\/core.telegram.org\/api\/srp).",
    "method_messages.toggleDialogPin": "Pin\/unpin a dialog",
    "method_messages.toggleDialogPin_param_pinned_type_flags.0?true": "Whether to pin or unpin the dialog",
    "method_messages.toggleDialogPin_param_peer_type_InputDialogPeer": "The dialog to pin",
    "method_channels.deactivateAllUsernames": "Disable all purchased usernames of a supergroup or channel",
    "method_channels.deactivateAllUsernames_param_channel_type_InputChannel": "Supergroup or channel",
    "method_messages.setChatAvailableReactions": "Change the set of [message reactions \u00bb](https:\/\/core.telegram.org\/api\/reactions) that can be used in a certain group, supergroup or channel",
    "method_messages.setChatAvailableReactions_param_peer_type_InputPeer": "Group where to apply changes",
    "method_messages.setChatAvailableReactions_param_available_reactions_type_ChatReactions": "Allowed reaction emojis",
    "method_contacts.importContacts": "Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.\n\nUse [contacts.addContact](..\/methods\/contacts.addContact.md) to add Telegram contacts without actually using their phone number.",
    "method_contacts.importContacts_param_contacts_type_Vector<InputContact>": "List of contacts to import",
    "method_channels.getSendAs": "Obtains a list of peers that can be used to send messages in a specific group",
    "method_channels.getSendAs_param_peer_type_InputPeer": "The group where we intend to send messages",
    "method_messages.setBotPrecheckoutResults": "Once the user has confirmed their payment and shipping details, the bot receives an [updateBotPrecheckoutQuery](..\/constructors\/updateBotPrecheckoutQuery.md) update.  \nUse this method to respond to such pre-checkout queries.  \n**Note**: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.",
    "method_messages.setBotPrecheckoutResults_param_success_type_flags.1?true": "Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the `error` field, instead",
    "method_messages.setBotPrecheckoutResults_param_query_id_type_long": "Unique identifier for the query to be answered",
    "method_messages.setBotPrecheckoutResults_param_error_type_flags.0?string": "Required if the `success` isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.",
    "method_account.cancelPasswordEmail": "Cancel the code that was sent to verify an email to use as [2FA recovery method](https:\/\/core.telegram.org\/api\/srp).",
    "method_messages.setInlineGameScore": "Use this method to set the score of the specified user in a game sent as an inline message (bots only).",
    "method_messages.setInlineGameScore_param_edit_message_type_flags.0?true": "Set this flag if the game message should be automatically edited to include the current scoreboard",
    "method_messages.setInlineGameScore_param_force_type_flags.1?true": "Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
    "method_messages.setInlineGameScore_param_id_type_InputBotInlineMessageID": "ID of the inline message",
    "method_messages.setInlineGameScore_param_user_id_type_InputUser": "User identifier",
    "method_messages.setInlineGameScore_param_score_type_int": "New score",
    "method_photos.uploadProfilePhoto": "Updates current user profile photo.\n\nThe `file`, `video` and `video_emoji_markup` flags are mutually exclusive.",
    "method_photos.uploadProfilePhoto_param_fallback_type_flags.3?true": "If set, the chosen profile photo will be shown to users that can't display your main profile photo due to your privacy settings.",
    "method_photos.uploadProfilePhoto_param_bot_type_flags.5?InputUser": "Can contain info of a bot we own, to change the profile photo of that bot, instead of the current user.",
    "method_photos.uploadProfilePhoto_param_file_type_flags.0?InputFile": "Profile photo",
    "method_photos.uploadProfilePhoto_param_video_type_flags.1?InputFile": "[Animated profile picture](https:\/\/core.telegram.org\/api\/files#animated-profile-pictures) video",
    "method_photos.uploadProfilePhoto_param_video_start_ts_type_flags.2?double": "Floating point UNIX timestamp in seconds, indicating the frame of the video\/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set.",
    "method_photos.uploadProfilePhoto_param_video_emoji_markup_type_flags.4?VideoSize": "Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](..\/constructors\/videoSizeEmojiMarkup.md) or a [videoSizeStickerMarkup](..\/constructors\/videoSizeStickerMarkup.md) constructor.",
    "method_channels.editPhoto": "Change the photo of a [channel\/supergroup](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.editPhoto_param_channel_type_InputChannel": "Channel\/supergroup whose photo should be edited",
    "method_channels.editPhoto_param_photo_type_InputChatPhoto": "New photo",
    "method_messages.getInlineBotResults": "Query an inline bot",
    "method_messages.getInlineBotResults_param_bot_type_InputUser": "The bot to query",
    "method_messages.getInlineBotResults_param_peer_type_InputPeer": "The currently opened chat",
    "method_messages.getInlineBotResults_param_geo_point_type_flags.0?InputGeoPoint": "The geolocation, if requested",
    "method_messages.getInlineBotResults_param_query_type_string": "The query",
    "method_messages.getInlineBotResults_param_offset_type_string": "The offset within the results, will be passed directly as-is to the bot.",
    "method_contacts.deleteContacts": "Deletes several contacts from the list.",
    "method_contacts.deleteContacts_param_id_type_Vector<InputUser>": "User ID list",
    "method_messages.editExportedChatInvite": "Edit an exported chat invite",
    "method_messages.editExportedChatInvite_param_revoked_type_flags.2?true": "Whether to revoke the chat invite",
    "method_messages.editExportedChatInvite_param_peer_type_InputPeer": "Chat",
    "method_messages.editExportedChatInvite_param_link_type_string": "Invite link",
    "method_messages.editExportedChatInvite_param_expire_date_type_flags.0?int": "New expiration date",
    "method_messages.editExportedChatInvite_param_usage_limit_type_flags.1?int": "Maximum number of users that can join using this link",
    "method_messages.editExportedChatInvite_param_request_needed_type_flags.3?Bool": "Whether admin confirmation is required before admitting each separate user into the chat",
    "method_messages.editExportedChatInvite_param_title_type_flags.4?string": "Description of the invite link, visible only to administrators",
    "method_messages.getSearchResultsPositions": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation.\n\nReturns the results in reverse chronological order (i.e., in order of decreasing message\\_id).",
    "method_messages.getSearchResultsPositions_param_peer_type_InputPeer": "Peer where to search",
    "method_messages.getSearchResultsPositions_param_filter_type_MessagesFilter": "Message filter, [inputMessagesFilterEmpty](..\/constructors\/inputMessagesFilterEmpty.md), [inputMessagesFilterMyMentions](..\/constructors\/inputMessagesFilterMyMentions.md) filters are not supported by this method.",
    "method_messages.getSearchResultsPositions_param_offset_id_type_int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getSearchResultsPositions_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getDialogUnreadMarks": "Get dialogs manually marked as unread",
    "method_account.getWallPaper": "Get info about a certain [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers)",
    "method_account.getWallPaper_param_wallpaper_type_InputWallPaper": "The [wallpaper](https:\/\/core.telegram.org\/api\/wallpapers) to get info about",
    "method_messages.sendMultiMedia": "Send an [album or grouped media](https:\/\/core.telegram.org\/api\/files#albums-grouped-media)",
    "method_messages.sendMultiMedia_param_silent_type_flags.5?true": "Whether to send the album silently (no notification triggered)",
    "method_messages.sendMultiMedia_param_background_type_flags.6?true": "Send in background?",
    "method_messages.sendMultiMedia_param_clear_draft_type_flags.7?true": "Whether to clear [drafts](https:\/\/core.telegram.org\/api\/drafts)",
    "method_messages.sendMultiMedia_param_noforwards_type_flags.14?true": "Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https:\/\/telegram.org\/blog\/protected-content-delete-by-date-and-more) enabled",
    "method_messages.sendMultiMedia_param_update_stickersets_order_type_flags.15?true": "Whether to move used stickersets to top, [see here for more info on this flag \u00bb](https:\/\/core.telegram.org\/api\/stickers#recent-stickersets)",
    "method_messages.sendMultiMedia_param_peer_type_InputPeer": "The destination chat",
    "method_messages.sendMultiMedia_param_reply_to_msg_id_type_flags.0?int": "The message to reply to",
    "method_messages.sendMultiMedia_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.sendMultiMedia_param_multi_media_type_Vector<InputSingleMedia>": "The medias to send: note that they must be separately uploaded using [messages.uploadMedia](..\/methods\/messages.uploadMedia.md) first, using raw `inputMediaUploaded*` constructors is not supported.",
    "method_messages.sendMultiMedia_param_schedule_date_type_flags.10?int": "Scheduled message date for scheduled messages",
    "method_messages.sendMultiMedia_param_send_as_type_flags.13?InputPeer": "Send this message as the specified peer",
    "method_messages.prolongWebView": "Indicate to the server (from the user side) that the user is still using a web app.\n\nIf the method returns a `QUERY_ID_INVALID` error, the webview must be closed.",
    "method_messages.prolongWebView_param_silent_type_flags.5?true": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](..\/methods\/messages.sendWebViewResultMessage.md) should be sent silently (no notifications for the receivers).",
    "method_messages.prolongWebView_param_peer_type_InputPeer": "Dialog where the web app was opened.",
    "method_messages.prolongWebView_param_bot_type_InputUser": "Bot that owns the [web app](https:\/\/core.telegram.org\/api\/bots\/webapps)",
    "method_messages.prolongWebView_param_query_id_type_long": "Web app interaction ID obtained from [messages.requestWebView](..\/methods\/messages.requestWebView.md)",
    "method_messages.prolongWebView_param_reply_to_msg_id_type_flags.0?int": "Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](..\/methods\/messages.sendWebViewResultMessage.md) should be sent in reply to this message ID.",
    "method_messages.prolongWebView_param_top_msg_id_type_flags.9?int": "This field must contain the topic ID **only** when replying to messages in [forum topics](https:\/\/core.telegram.org\/api\/forum#forum-topics) different from the \"General\" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`). <br>If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the \"General\" topic.",
    "method_messages.prolongWebView_param_send_as_type_flags.13?InputPeer": "Open the web app as the specified peer",
    "method_messages.sendReaction": "React to message.\n\nStarting from layer 159, the reaction will be sent from the peer specified using [messages.saveDefaultSendAs](..\/methods\/messages.saveDefaultSendAs.md).",
    "method_messages.sendReaction_param_big_type_flags.1?true": "Whether a bigger and longer reaction should be shown",
    "method_messages.sendReaction_param_add_to_recent_type_flags.2?true": "Add this reaction to the [recent reactions list \u00bb](https:\/\/core.telegram.org\/api\/reactions#recent-reactions).",
    "method_messages.sendReaction_param_peer_type_InputPeer": "Peer",
    "method_messages.sendReaction_param_msg_id_type_int": "Message ID to react to",
    "method_messages.sendReaction_param_reaction_type_flags.0?Vector<Reaction>": "A list of reactions",
    "method_chatlists.getExportedInvites": "List all [chat folder deep links \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links) associated to a folder",
    "method_chatlists.getExportedInvites_param_chatlist_type_InputChatlist": "The folder",
    "method_messages.getPeerDialogs": "Get dialog info of specified peers",
    "method_messages.getPeerDialogs_param_peers_type_Vector<InputDialogPeer>": "Peers",
    "method_messages.getExportedChatInvites": "Get info about the chat invites of a specific chat",
    "method_messages.getExportedChatInvites_param_revoked_type_flags.3?true": "Whether to fetch revoked chat invites",
    "method_messages.getExportedChatInvites_param_peer_type_InputPeer": "Chat",
    "method_messages.getExportedChatInvites_param_admin_id_type_InputUser": "Whether to only fetch chat invites from this admin",
    "method_messages.getExportedChatInvites_param_offset_date_type_flags.2?int": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getExportedChatInvites_param_offset_link_type_flags.2?string": "[Offsets for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets)",
    "method_messages.getExportedChatInvites_param_limit_type_int": "Maximum number of results to return, [see pagination](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getParticipants": "Get the participants of a [supergroup\/channel](https:\/\/core.telegram.org\/api\/channel)",
    "method_channels.getParticipants_param_channel_type_InputChannel": "Channel",
    "method_channels.getParticipants_param_filter_type_ChannelParticipantsFilter": "Which participant types to fetch",
    "method_channels.getParticipants_param_offset_type_int": "[Offset](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getParticipants_param_limit_type_int": "[Limit](https:\/\/core.telegram.org\/api\/offsets)",
    "method_channels.getParticipants_param_hash_type_long": "[Hash](https:\/\/core.telegram.org\/api\/offsets)",
    "method_chatlists.leaveChatlist": "Delete a folder imported using a [chat folder deep link \u00bb](https:\/\/core.telegram.org\/api\/links#chat-folder-links)",
    "method_chatlists.leaveChatlist_param_chatlist_type_InputChatlist": "Folder ID",
    "method_chatlists.leaveChatlist_param_peers_type_Vector<InputPeer>": "Also leave the specified channels and groups",
    "method_messages.getEmojiKeywordsLanguages": "Obtain a list of related languages that must be used when fetching [emoji keyword lists \u00bb](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-keywords).\n\nUsually the method will return the passed language codes (if localized) + `en` + some language codes for similar languages (if applicable).",
    "method_messages.getEmojiKeywordsLanguages_param_lang_codes_type_Vector<string>": "The user's language codes",
    "method_help.saveAppLog": "Saves logs of application on the server.",
    "method_help.saveAppLog_param_events_type_Vector<InputAppEvent>": "List of input events",
    "method_account.toggleUsername": "Activate or deactivate a purchased [fragment.com](https:\/\/fragment.com) username associated to the currently logged-in user.",
    "method_account.toggleUsername_param_username_type_string": "Username",
    "method_account.toggleUsername_param_active_type_Bool": "Whether to activate or deactivate it",
    "method_phone.discardCall": "Refuse or end running call",
    "method_phone.discardCall_param_video_type_flags.0?true": "Whether this is a video call",
    "method_phone.discardCall_param_peer_type_InputPhoneCall": "The phone call",
    "method_phone.discardCall_param_duration_type_int": "Call duration",
    "method_phone.discardCall_param_reason_type_PhoneCallDiscardReason": "Why was the call discarded",
    "method_phone.discardCall_param_connection_id_type_long": "Preferred libtgvoip relay ID",
    "method_messages.getEmojiKeywordsDifference": "Get changed [emoji keywords \u00bb](https:\/\/core.telegram.org\/api\/custom-emoji#emoji-keywords).",
    "method_messages.getEmojiKeywordsDifference_param_lang_code_type_string": "Language code",
    "method_messages.getEmojiKeywordsDifference_param_from_version_type_int": "Previous stored emoji keyword list `version`",
    "method_payments.assignAppStoreTransaction": "Informs server about a purchase made through the App Store: for official applications only.",
    "method_payments.assignAppStoreTransaction_param_receipt_type_bytes": "Receipt",
    "method_payments.assignAppStoreTransaction_param_purpose_type_InputStorePaymentPurpose": "Payment purpose",
    "method_bots.sendCustomRequest": "Sends a custom request; for bots only",
    "method_bots.sendCustomRequest_param_custom_method_type_string": "The method name",
    "method_bots.sendCustomRequest_param_params_type_DataJSON": "JSON-serialized method parameters",
    "method_messages.clearAllDrafts": "Clear all [drafts](https:\/\/core.telegram.org\/api\/drafts).",
    "method_messages.getDefaultHistoryTTL": "Gets the default value of the Time-To-Live setting, applied to all new chats.",
    "method_invokeWithMessagesRange": "Invoke with the given message range",
    "method_invokeWithMessagesRange_param_range_type_MessageRange": "Message range",
    "method_invokeWithMessagesRange_param_query_type_!X": "Query",
    "method_upload.reuploadCdnFile": "Request a reupload of a certain file to a [CDN DC](https:\/\/core.telegram.org\/cdn).",
    "method_upload.reuploadCdnFile_param_file_token_type_bytes": "File token",
    "method_upload.reuploadCdnFile_param_request_token_type_bytes": "Request token",
    "method_phone.saveDefaultGroupCallJoinAs": "Set the default peer that will be used to join a group call in a specific dialog.",
    "method_phone.saveDefaultGroupCallJoinAs_param_peer_type_InputPeer": "The dialog",
    "method_phone.saveDefaultGroupCallJoinAs_param_join_as_type_InputPeer": "The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user\/channel.",
    "method_account.sendConfirmPhoneCode": "Send confirmation code to cancel account deletion, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_account.sendConfirmPhoneCode_param_hash_type_string": "The hash from the service notification, for more info [click here \u00bb](https:\/\/core.telegram.org\/api\/account-deletion)",
    "method_account.sendConfirmPhoneCode_param_settings_type_CodeSettings": "Phone code settings",
    "method_contacts.getContactIDs": "Get contact by telegram IDs",
    "method_contacts.getContactIDs_param_hash_type_long": "[Hash for pagination, for more info click here](https:\/\/core.telegram.org\/api\/offsets#hash-generation)",
    "method_account.setAuthorizationTTL": "Set time-to-live of current session",
    "method_account.setAuthorizationTTL_param_authorization_ttl_days_type_int": "Time-to-live of current session in days",
    "method_messages.setChatWallPaper": "Set a custom [wallpaper \u00bb](https:\/\/core.telegram.org\/api\/wallpapers) in a specific private chat with another user.",
    "method_messages.setChatWallPaper_param_peer_type_InputPeer": "The private chat where the wallpaper will be set",
    "method_messages.setChatWallPaper_param_wallpaper_type_flags.0?InputWallPaper": "The [wallpaper \u00bb](https:\/\/core.telegram.org\/api\/wallpapers), obtained as described in the [wallpaper documentation \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#uploading-wallpapers); must **not** be provided when installing a wallpaper obtained from a [messageActionSetChatWallPaper](..\/constructors\/messageActionSetChatWallPaper.md) service message (`id` must be provided, instead).",
    "method_messages.setChatWallPaper_param_settings_type_flags.2?WallPaperSettings": "Wallpaper settings, obtained as described in the [wallpaper documentation \u00bb](https:\/\/core.telegram.org\/api\/wallpapers#uploading-wallpapers) or from [messageActionSetChatWallPaper](..\/constructors\/messageActionSetChatWallPaper.md).`wallpaper`.`settings`.",
    "method_messages.setChatWallPaper_param_id_type_flags.1?int": "If the wallpaper was obtained from a [messageActionSetChatWallPaper](..\/constructors\/messageActionSetChatWallPaper.md) service message, must contain the ID of that message."
}