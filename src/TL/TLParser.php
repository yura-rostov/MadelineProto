<?php declare(strict_types=1);

namespace danog\MadelineProto\TL;

/** @internal Autogenerated using tools/TL/Builder.php */
final class TLParser
{
    private static function err(mixed $stream): never
    {

        fseek($stream, -4, SEEK_CUR);
        throw new AssertionError("Unexpected ID ".bin2hex(fread($stream, 4)));

    }
    private static function gzdecode(mixed $stream): mixed
    {

        $res = fopen('php://memory', 'rw+b');
        fwrite($res, gzdecode(self::deserialize_string($stream)));
        rewind($res);
        return $res;

    }
    private static function gzdecode_vector(mixed $stream): mixed
    {

        $res = fopen('php://memory', 'rw+b');
        fwrite($res, gzdecode(self::deserialize_string($stream)));
        rewind($res);
        return match (stream_get_contents($stream, 4)) {
            '警' => $stream,
            default => self::err($stream)
        };

    }
    private static function deserialize_bytes(mixed $stream): mixed
    {

        $l = \ord(stream_get_contents($stream, 1));
        if ($l > 254) {
            throw new Exception(Lang::$current_lang["length_too_big"]);
        }
        if ($l === 254) {
            $l = unpack("V", stream_get_contents($stream, 3).\chr(0))[1];
            $x = stream_get_contents($stream, $l);
            $resto = (-$l) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        } else {
            $x = $l ? stream_get_contents($stream, $l) : "";
            $resto = (-$l+1) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        }

        return new Types\Bytes($x);

    }
    private static function deserialize_string(mixed $stream): mixed
    {

        $l = \ord(stream_get_contents($stream, 1));
        if ($l > 254) {
            throw new Exception(Lang::$current_lang["length_too_big"]);
        }
        if ($l === 254) {
            $l = unpack("V", stream_get_contents($stream, 3).\chr(0))[1];
            $x = stream_get_contents($stream, $l);
            $resto = (-$l) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        } else {
            $x = $l ? stream_get_contents($stream, $l) : "";
            $resto = (-$l+1) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        }

        return $x;

    }
    private static function deserialize_waveform(mixed $stream): mixed
    {

        $l = \ord(stream_get_contents($stream, 1));
        if ($l > 254) {
            throw new Exception(Lang::$current_lang["length_too_big"]);
        }
        if ($l === 254) {
            $l = unpack("V", stream_get_contents($stream, 3).\chr(0))[1];
            $x = stream_get_contents($stream, $l);
            $resto = (-$l) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        } else {
            $x = $l ? stream_get_contents($stream, $l) : "";
            $resto = (-$l+1) % 4;
            $resto = $resto < 0 ? $resto + 4 : $resto;
            if ($resto > 0) {
                stream_get_contents($stream, $resto);
            }
        }

        return TL::extractWaveform($x);

    }
    private static function deserialize_random_bytes(mixed $stream): void
    {

        $l = \ord(stream_get_contents($stream, 1));
        if ($l > 254) {
            throw new Exception(Lang::$current_lang["length_too_big"]);
        }
        if ($l === 254) {
            $l = unpack("V", stream_get_contents($stream, 3).\chr(0))[1];
            if ($l < 15) {
                throw new SecurityException("Random_bytes is too small!");
            }
        } else {
            if ($l < 15) {
                throw new SecurityException("Random_bytes is too small!");
            }
            $l += 1;
        }
        $resto = (-$l) % 4;
        $resto = $resto < 0 ? $resto + 4 : $resto;
        if ($resto > 0) {
            $l += $resto;
        }
        stream_get_contents($stream, $l);

    }
    private function deserialize_type_array_of_int(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            unpack('l', stream_get_contents($stream, 4))[1];
        }
        return $result;

    }
    private function deserialize_type_array_of_long(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            unpack('q', stream_get_contents($stream, 8))[1];
        }
        return $result;

    }
    private function deserialize_type_array_of_double(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            unpack('d', stream_get_contents($stream, 8))[1];
        }
        return $result;

    }
    private function deserialize_type_array_of_strlong(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            stream_get_contents($stream, 8);
        }
        return $result;

    }
    private function deserialize_type_array_of_string(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            $this->deserialize_string($stream);
        }
        return $result;

    }
    private function deserialize_type_array_of_bytes(mixed $stream): array
    {

        $stream = match(stream_get_contents($stream, 4)) {
            '警' => $stream,
            '＋r0' => self::gzdecode_vector($stream)
        };
        $result = [];
        for ($x = unpack("V", stream_get_contents($stream, 4))[1]; $x > 0; --$x) {
            $this->deserialize_bytes($stream);
        }
        return $result;

    }
    public function deserialize_type_Object(mixed $stream): mixed
    {
        return match (stream_get_contents($stream, 4)) {
            '犵!' => [
                '_' => 'rpc_error',
                'error_code' => unpack('l', stream_get_contents($stream, 4))[1],
                'error_message' => $this->deserialize_string($stream),
            ],
            '＋r0' => $this->deserialize($stream),
            default => self::err($stream)
        };
    }
}
